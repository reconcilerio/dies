//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright 2021-2022 the original author or authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by diegen. DO NOT EDIT.

package v1

import (
	metav1 "dies.dev/apis/meta/v1"
	json "encoding/json"
	fmtx "fmt"
	autoscalingv1 "k8s.io/api/autoscaling/v1"
	apismetav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	unstructured "k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
	runtime "k8s.io/apimachinery/pkg/runtime"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
)

var HorizontalPodAutoscalerBlank = (&HorizontalPodAutoscalerDie{}).DieFeed(autoscalingv1.HorizontalPodAutoscaler{})

type HorizontalPodAutoscalerDie struct {
	metav1.FrozenObjectMeta
	mutable bool
	r       autoscalingv1.HorizontalPodAutoscaler
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *HorizontalPodAutoscalerDie) DieImmutable(immutable bool) *HorizontalPodAutoscalerDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *HorizontalPodAutoscalerDie) DieFeed(r autoscalingv1.HorizontalPodAutoscaler) *HorizontalPodAutoscalerDie {
	if d.mutable {
		d.FrozenObjectMeta = metav1.FreezeObjectMeta(r.ObjectMeta)
		d.r = r
		return d
	}
	return &HorizontalPodAutoscalerDie{
		FrozenObjectMeta: metav1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *HorizontalPodAutoscalerDie) DieFeedPtr(r *autoscalingv1.HorizontalPodAutoscaler) *HorizontalPodAutoscalerDie {
	if r == nil {
		r = &autoscalingv1.HorizontalPodAutoscaler{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *HorizontalPodAutoscalerDie) DieFeedRawExtension(raw runtime.RawExtension) *HorizontalPodAutoscalerDie {
	b, _ := json.Marshal(raw)
	r := autoscalingv1.HorizontalPodAutoscaler{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *HorizontalPodAutoscalerDie) DieRelease() autoscalingv1.HorizontalPodAutoscaler {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *HorizontalPodAutoscalerDie) DieReleasePtr() *autoscalingv1.HorizontalPodAutoscaler {
	r := d.DieRelease()
	return &r
}

// DieReleaseUnstructured returns the resource managed by the die as an unstructured object.
func (d *HorizontalPodAutoscalerDie) DieReleaseUnstructured() *unstructured.Unstructured {
	r := d.DieReleasePtr()
	u, _ := runtime.DefaultUnstructuredConverter.ToUnstructured(r)
	return &unstructured.Unstructured{
		Object: u,
	}
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *HorizontalPodAutoscalerDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *HorizontalPodAutoscalerDie) DieStamp(fn func(r *autoscalingv1.HorizontalPodAutoscaler)) *HorizontalPodAutoscalerDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *HorizontalPodAutoscalerDie) DeepCopy() *HorizontalPodAutoscalerDie {
	r := *d.r.DeepCopy()
	return &HorizontalPodAutoscalerDie{
		FrozenObjectMeta: metav1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
	}
}

var _ runtime.Object = (*HorizontalPodAutoscalerDie)(nil)

func (d *HorizontalPodAutoscalerDie) DeepCopyObject() runtime.Object {
	return d.r.DeepCopy()
}

func (d *HorizontalPodAutoscalerDie) GetObjectKind() schema.ObjectKind {
	r := d.DieRelease()
	return r.GetObjectKind()
}

func (d *HorizontalPodAutoscalerDie) MarshalJSON() ([]byte, error) {
	return json.Marshal(d.r)
}

func (d *HorizontalPodAutoscalerDie) UnmarshalJSON(b []byte) error {
	if d == HorizontalPodAutoscalerBlank {
		return fmtx.Errorf("cannot unmarshal into the blank die, create a copy first")
	}
	if !d.mutable {
		return fmtx.Errorf("cannot unmarshal into immutable dies, create a mutable version first")
	}
	r := &autoscalingv1.HorizontalPodAutoscaler{}
	err := json.Unmarshal(b, r)
	*d = *d.DieFeed(*r)
	return err
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (d *HorizontalPodAutoscalerDie) APIVersion(v string) *HorizontalPodAutoscalerDie {
	return d.DieStamp(func(r *autoscalingv1.HorizontalPodAutoscaler) {
		r.APIVersion = v
	})
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (d *HorizontalPodAutoscalerDie) Kind(v string) *HorizontalPodAutoscalerDie {
	return d.DieStamp(func(r *autoscalingv1.HorizontalPodAutoscaler) {
		r.Kind = v
	})
}

// MetadataDie stamps the resource's ObjectMeta field with a mutable die.
func (d *HorizontalPodAutoscalerDie) MetadataDie(fn func(d *metav1.ObjectMetaDie)) *HorizontalPodAutoscalerDie {
	return d.DieStamp(func(r *autoscalingv1.HorizontalPodAutoscaler) {
		d := metav1.ObjectMetaBlank.DieImmutable(false).DieFeed(r.ObjectMeta)
		fn(d)
		r.ObjectMeta = d.DieRelease()
	})
}

// SpecDie stamps the resource's spec field with a mutable die.
func (d *HorizontalPodAutoscalerDie) SpecDie(fn func(d *HorizontalPodAutoscalerSpecDie)) *HorizontalPodAutoscalerDie {
	return d.DieStamp(func(r *autoscalingv1.HorizontalPodAutoscaler) {
		d := HorizontalPodAutoscalerSpecBlank.DieImmutable(false).DieFeed(r.Spec)
		fn(d)
		r.Spec = d.DieRelease()
	})
}

// StatusDie stamps the resource's status field with a mutable die.
func (d *HorizontalPodAutoscalerDie) StatusDie(fn func(d *HorizontalPodAutoscalerStatusDie)) *HorizontalPodAutoscalerDie {
	return d.DieStamp(func(r *autoscalingv1.HorizontalPodAutoscaler) {
		d := HorizontalPodAutoscalerStatusBlank.DieImmutable(false).DieFeed(r.Status)
		fn(d)
		r.Status = d.DieRelease()
	})
}

// behaviour of autoscaler. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status.
func (d *HorizontalPodAutoscalerDie) Spec(v autoscalingv1.HorizontalPodAutoscalerSpec) *HorizontalPodAutoscalerDie {
	return d.DieStamp(func(r *autoscalingv1.HorizontalPodAutoscaler) {
		r.Spec = v
	})
}

// current information about the autoscaler.
func (d *HorizontalPodAutoscalerDie) Status(v autoscalingv1.HorizontalPodAutoscalerStatus) *HorizontalPodAutoscalerDie {
	return d.DieStamp(func(r *autoscalingv1.HorizontalPodAutoscaler) {
		r.Status = v
	})
}

var HorizontalPodAutoscalerSpecBlank = (&HorizontalPodAutoscalerSpecDie{}).DieFeed(autoscalingv1.HorizontalPodAutoscalerSpec{})

type HorizontalPodAutoscalerSpecDie struct {
	mutable bool
	r       autoscalingv1.HorizontalPodAutoscalerSpec
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *HorizontalPodAutoscalerSpecDie) DieImmutable(immutable bool) *HorizontalPodAutoscalerSpecDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *HorizontalPodAutoscalerSpecDie) DieFeed(r autoscalingv1.HorizontalPodAutoscalerSpec) *HorizontalPodAutoscalerSpecDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &HorizontalPodAutoscalerSpecDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *HorizontalPodAutoscalerSpecDie) DieFeedPtr(r *autoscalingv1.HorizontalPodAutoscalerSpec) *HorizontalPodAutoscalerSpecDie {
	if r == nil {
		r = &autoscalingv1.HorizontalPodAutoscalerSpec{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *HorizontalPodAutoscalerSpecDie) DieFeedRawExtension(raw runtime.RawExtension) *HorizontalPodAutoscalerSpecDie {
	b, _ := json.Marshal(raw)
	r := autoscalingv1.HorizontalPodAutoscalerSpec{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *HorizontalPodAutoscalerSpecDie) DieRelease() autoscalingv1.HorizontalPodAutoscalerSpec {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *HorizontalPodAutoscalerSpecDie) DieReleasePtr() *autoscalingv1.HorizontalPodAutoscalerSpec {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *HorizontalPodAutoscalerSpecDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *HorizontalPodAutoscalerSpecDie) DieStamp(fn func(r *autoscalingv1.HorizontalPodAutoscalerSpec)) *HorizontalPodAutoscalerSpecDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *HorizontalPodAutoscalerSpecDie) DeepCopy() *HorizontalPodAutoscalerSpecDie {
	r := *d.r.DeepCopy()
	return &HorizontalPodAutoscalerSpecDie{
		mutable: d.mutable,
		r:       r,
	}
}

// reference to scaled resource; horizontal pod autoscaler will learn the current resource consumption and will set the desired number of pods by using its Scale subresource.
func (d *HorizontalPodAutoscalerSpecDie) ScaleTargetRef(v autoscalingv1.CrossVersionObjectReference) *HorizontalPodAutoscalerSpecDie {
	return d.DieStamp(func(r *autoscalingv1.HorizontalPodAutoscalerSpec) {
		r.ScaleTargetRef = v
	})
}

// minReplicas is the lower limit for the number of replicas to which the autoscaler can scale down.  It defaults to 1 pod.  minReplicas is allowed to be 0 if the alpha feature gate HPAScaleToZero is enabled and at least one Object or External metric is configured.  Scaling is active as long as at least one metric value is available.
func (d *HorizontalPodAutoscalerSpecDie) MinReplicas(v *int32) *HorizontalPodAutoscalerSpecDie {
	return d.DieStamp(func(r *autoscalingv1.HorizontalPodAutoscalerSpec) {
		r.MinReplicas = v
	})
}

// upper limit for the number of pods that can be set by the autoscaler; cannot be smaller than MinReplicas.
func (d *HorizontalPodAutoscalerSpecDie) MaxReplicas(v int32) *HorizontalPodAutoscalerSpecDie {
	return d.DieStamp(func(r *autoscalingv1.HorizontalPodAutoscalerSpec) {
		r.MaxReplicas = v
	})
}

// target average CPU utilization (represented as a percentage of requested CPU) over all the pods; if not specified the default autoscaling policy will be used.
func (d *HorizontalPodAutoscalerSpecDie) TargetCPUUtilizationPercentage(v *int32) *HorizontalPodAutoscalerSpecDie {
	return d.DieStamp(func(r *autoscalingv1.HorizontalPodAutoscalerSpec) {
		r.TargetCPUUtilizationPercentage = v
	})
}

var CrossVersionObjectReferenceBlank = (&CrossVersionObjectReferenceDie{}).DieFeed(autoscalingv1.CrossVersionObjectReference{})

type CrossVersionObjectReferenceDie struct {
	mutable bool
	r       autoscalingv1.CrossVersionObjectReference
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *CrossVersionObjectReferenceDie) DieImmutable(immutable bool) *CrossVersionObjectReferenceDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *CrossVersionObjectReferenceDie) DieFeed(r autoscalingv1.CrossVersionObjectReference) *CrossVersionObjectReferenceDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &CrossVersionObjectReferenceDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *CrossVersionObjectReferenceDie) DieFeedPtr(r *autoscalingv1.CrossVersionObjectReference) *CrossVersionObjectReferenceDie {
	if r == nil {
		r = &autoscalingv1.CrossVersionObjectReference{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *CrossVersionObjectReferenceDie) DieFeedRawExtension(raw runtime.RawExtension) *CrossVersionObjectReferenceDie {
	b, _ := json.Marshal(raw)
	r := autoscalingv1.CrossVersionObjectReference{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *CrossVersionObjectReferenceDie) DieRelease() autoscalingv1.CrossVersionObjectReference {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *CrossVersionObjectReferenceDie) DieReleasePtr() *autoscalingv1.CrossVersionObjectReference {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *CrossVersionObjectReferenceDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *CrossVersionObjectReferenceDie) DieStamp(fn func(r *autoscalingv1.CrossVersionObjectReference)) *CrossVersionObjectReferenceDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *CrossVersionObjectReferenceDie) DeepCopy() *CrossVersionObjectReferenceDie {
	r := *d.r.DeepCopy()
	return &CrossVersionObjectReferenceDie{
		mutable: d.mutable,
		r:       r,
	}
}

// Kind of the referent; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
func (d *CrossVersionObjectReferenceDie) Kind(v string) *CrossVersionObjectReferenceDie {
	return d.DieStamp(func(r *autoscalingv1.CrossVersionObjectReference) {
		r.Kind = v
	})
}

// Name of the referent; More info: http://kubernetes.io/docs/user-guide/identifiers#names
func (d *CrossVersionObjectReferenceDie) Name(v string) *CrossVersionObjectReferenceDie {
	return d.DieStamp(func(r *autoscalingv1.CrossVersionObjectReference) {
		r.Name = v
	})
}

// API version of the referent
func (d *CrossVersionObjectReferenceDie) APIVersion(v string) *CrossVersionObjectReferenceDie {
	return d.DieStamp(func(r *autoscalingv1.CrossVersionObjectReference) {
		r.APIVersion = v
	})
}

var HorizontalPodAutoscalerStatusBlank = (&HorizontalPodAutoscalerStatusDie{}).DieFeed(autoscalingv1.HorizontalPodAutoscalerStatus{})

type HorizontalPodAutoscalerStatusDie struct {
	mutable bool
	r       autoscalingv1.HorizontalPodAutoscalerStatus
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *HorizontalPodAutoscalerStatusDie) DieImmutable(immutable bool) *HorizontalPodAutoscalerStatusDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *HorizontalPodAutoscalerStatusDie) DieFeed(r autoscalingv1.HorizontalPodAutoscalerStatus) *HorizontalPodAutoscalerStatusDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &HorizontalPodAutoscalerStatusDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *HorizontalPodAutoscalerStatusDie) DieFeedPtr(r *autoscalingv1.HorizontalPodAutoscalerStatus) *HorizontalPodAutoscalerStatusDie {
	if r == nil {
		r = &autoscalingv1.HorizontalPodAutoscalerStatus{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *HorizontalPodAutoscalerStatusDie) DieFeedRawExtension(raw runtime.RawExtension) *HorizontalPodAutoscalerStatusDie {
	b, _ := json.Marshal(raw)
	r := autoscalingv1.HorizontalPodAutoscalerStatus{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *HorizontalPodAutoscalerStatusDie) DieRelease() autoscalingv1.HorizontalPodAutoscalerStatus {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *HorizontalPodAutoscalerStatusDie) DieReleasePtr() *autoscalingv1.HorizontalPodAutoscalerStatus {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *HorizontalPodAutoscalerStatusDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *HorizontalPodAutoscalerStatusDie) DieStamp(fn func(r *autoscalingv1.HorizontalPodAutoscalerStatus)) *HorizontalPodAutoscalerStatusDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *HorizontalPodAutoscalerStatusDie) DeepCopy() *HorizontalPodAutoscalerStatusDie {
	r := *d.r.DeepCopy()
	return &HorizontalPodAutoscalerStatusDie{
		mutable: d.mutable,
		r:       r,
	}
}

// most recent generation observed by this autoscaler.
func (d *HorizontalPodAutoscalerStatusDie) ObservedGeneration(v *int64) *HorizontalPodAutoscalerStatusDie {
	return d.DieStamp(func(r *autoscalingv1.HorizontalPodAutoscalerStatus) {
		r.ObservedGeneration = v
	})
}

// last time the HorizontalPodAutoscaler scaled the number of pods; used by the autoscaler to control how often the number of pods is changed.
func (d *HorizontalPodAutoscalerStatusDie) LastScaleTime(v *apismetav1.Time) *HorizontalPodAutoscalerStatusDie {
	return d.DieStamp(func(r *autoscalingv1.HorizontalPodAutoscalerStatus) {
		r.LastScaleTime = v
	})
}

// current number of replicas of pods managed by this autoscaler.
func (d *HorizontalPodAutoscalerStatusDie) CurrentReplicas(v int32) *HorizontalPodAutoscalerStatusDie {
	return d.DieStamp(func(r *autoscalingv1.HorizontalPodAutoscalerStatus) {
		r.CurrentReplicas = v
	})
}

// desired number of replicas of pods managed by this autoscaler.
func (d *HorizontalPodAutoscalerStatusDie) DesiredReplicas(v int32) *HorizontalPodAutoscalerStatusDie {
	return d.DieStamp(func(r *autoscalingv1.HorizontalPodAutoscalerStatus) {
		r.DesiredReplicas = v
	})
}

// current average CPU utilization over all pods, represented as a percentage of requested CPU, e.g. 70 means that an average pod is using now 70% of its requested CPU.
func (d *HorizontalPodAutoscalerStatusDie) CurrentCPUUtilizationPercentage(v *int32) *HorizontalPodAutoscalerStatusDie {
	return d.DieStamp(func(r *autoscalingv1.HorizontalPodAutoscalerStatus) {
		r.CurrentCPUUtilizationPercentage = v
	})
}
