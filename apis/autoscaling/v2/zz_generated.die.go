//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright 2021-2022 the original author or authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by diegen. DO NOT EDIT.

package v2

import (
	json "encoding/json"
	fmtx "fmt"
	autoscalingv2 "k8s.io/api/autoscaling/v2"
	corev1 "k8s.io/api/core/v1"
	resource "k8s.io/apimachinery/pkg/api/resource"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	unstructured "k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
	runtime "k8s.io/apimachinery/pkg/runtime"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	jsonpath "k8s.io/client-go/util/jsonpath"
	osx "os"
	"reconciler.io/dies/apis/meta/v1"
	reflectx "reflect"
	yaml "sigs.k8s.io/yaml"
)

var HorizontalPodAutoscalerBlank = (&HorizontalPodAutoscalerDie{}).DieFeed(autoscalingv2.HorizontalPodAutoscaler{})

type HorizontalPodAutoscalerDie struct {
	v1.FrozenObjectMeta
	mutable bool
	r       autoscalingv2.HorizontalPodAutoscaler
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *HorizontalPodAutoscalerDie) DieImmutable(immutable bool) *HorizontalPodAutoscalerDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *HorizontalPodAutoscalerDie) DieFeed(r autoscalingv2.HorizontalPodAutoscaler) *HorizontalPodAutoscalerDie {
	if d.mutable {
		d.FrozenObjectMeta = v1.FreezeObjectMeta(r.ObjectMeta)
		d.r = r
		return d
	}
	return &HorizontalPodAutoscalerDie{
		FrozenObjectMeta: v1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *HorizontalPodAutoscalerDie) DieFeedPtr(r *autoscalingv2.HorizontalPodAutoscaler) *HorizontalPodAutoscalerDie {
	if r == nil {
		r = &autoscalingv2.HorizontalPodAutoscaler{}
	}
	return d.DieFeed(*r)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *HorizontalPodAutoscalerDie) DieFeedJSON(j []byte) *HorizontalPodAutoscalerDie {
	r := autoscalingv2.HorizontalPodAutoscaler{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *HorizontalPodAutoscalerDie) DieFeedYAML(y []byte) *HorizontalPodAutoscalerDie {
	r := autoscalingv2.HorizontalPodAutoscaler{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *HorizontalPodAutoscalerDie) DieFeedYAMLFile(name string) *HorizontalPodAutoscalerDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *HorizontalPodAutoscalerDie) DieFeedRawExtension(raw runtime.RawExtension) *HorizontalPodAutoscalerDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *HorizontalPodAutoscalerDie) DieRelease() autoscalingv2.HorizontalPodAutoscaler {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *HorizontalPodAutoscalerDie) DieReleasePtr() *autoscalingv2.HorizontalPodAutoscaler {
	r := d.DieRelease()
	return &r
}

// DieReleaseUnstructured returns the resource managed by the die as an unstructured object. Panics on error.
func (d *HorizontalPodAutoscalerDie) DieReleaseUnstructured() *unstructured.Unstructured {
	r := d.DieReleasePtr()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(r)
	if err != nil {
		panic(err)
	}
	return &unstructured.Unstructured{
		Object: u,
	}
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *HorizontalPodAutoscalerDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *HorizontalPodAutoscalerDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *HorizontalPodAutoscalerDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *HorizontalPodAutoscalerDie) DieStamp(fn func(r *autoscalingv2.HorizontalPodAutoscaler)) *HorizontalPodAutoscalerDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// Experimental: DieStampAt uses a JSON path (http://goessner.net/articles/JsonPath/) expression to stamp portions of the resource. The callback is invoked with each JSON path match. Panics if the callback function does not accept a single argument of the same type or a pointer to that type as found on the resource at the target location.
//
// Future iterations will improve type coercion from the resource to the callback argument.
func (d *HorizontalPodAutoscalerDie) DieStampAt(jp string, fn interface{}) *HorizontalPodAutoscalerDie {
	return d.DieStamp(func(r *autoscalingv2.HorizontalPodAutoscaler) {
		if ni := reflectx.ValueOf(fn).Type().NumIn(); ni != 1 {
			panic(fmtx.Errorf("callback function must have 1 input parameters, found %d", ni))
		}
		if no := reflectx.ValueOf(fn).Type().NumOut(); no != 0 {
			panic(fmtx.Errorf("callback function must have 0 output parameters, found %d", no))
		}

		cp := jsonpath.New("")
		if err := cp.Parse(fmtx.Sprintf("{%s}", jp)); err != nil {
			panic(err)
		}
		cr, err := cp.FindResults(r)
		if err != nil {
			// errors are expected if a path is not found
			return
		}
		for _, cv := range cr[0] {
			arg0t := reflectx.ValueOf(fn).Type().In(0)

			var args []reflectx.Value
			if cv.Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv}
			} else if cv.CanAddr() && cv.Addr().Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv.Addr()}
			} else {
				panic(fmtx.Errorf("callback function must accept value of type %q, found type %q", cv.Type(), arg0t))
			}

			reflectx.ValueOf(fn).Call(args)
		}
	})
}

// DieWith returns a new die after passing the current die to the callback function. The passed die is mutable.
func (d *HorizontalPodAutoscalerDie) DieWith(fns ...func(d *HorizontalPodAutoscalerDie)) *HorizontalPodAutoscalerDie {
	nd := HorizontalPodAutoscalerBlank.DieFeed(d.DieRelease()).DieImmutable(false)
	for _, fn := range fns {
		if fn != nil {
			fn(nd)
		}
	}
	return d.DieFeed(nd.DieRelease())
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *HorizontalPodAutoscalerDie) DeepCopy() *HorizontalPodAutoscalerDie {
	r := *d.r.DeepCopy()
	return &HorizontalPodAutoscalerDie{
		FrozenObjectMeta: v1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
	}
}

var _ runtime.Object = (*HorizontalPodAutoscalerDie)(nil)

func (d *HorizontalPodAutoscalerDie) DeepCopyObject() runtime.Object {
	return d.r.DeepCopy()
}

func (d *HorizontalPodAutoscalerDie) GetObjectKind() schema.ObjectKind {
	r := d.DieRelease()
	return r.GetObjectKind()
}

func (d *HorizontalPodAutoscalerDie) MarshalJSON() ([]byte, error) {
	return json.Marshal(d.r)
}

func (d *HorizontalPodAutoscalerDie) UnmarshalJSON(b []byte) error {
	if !d.mutable {
		return fmtx.Errorf("cannot unmarshal into immutable dies, create a mutable version first")
	}
	r := &autoscalingv2.HorizontalPodAutoscaler{}
	err := json.Unmarshal(b, r)
	*d = *d.DieFeed(*r)
	return err
}

// DieDefaultTypeMetadata sets the APIVersion and Kind to "autoscaling/v2" and "HorizontalPodAutoscaler" respectively.
func (d *HorizontalPodAutoscalerDie) DieDefaultTypeMetadata() *HorizontalPodAutoscalerDie {
	return d.DieStamp(func(r *autoscalingv2.HorizontalPodAutoscaler) {
		r.APIVersion = "autoscaling/v2"
		r.Kind = "HorizontalPodAutoscaler"
	})
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (d *HorizontalPodAutoscalerDie) APIVersion(v string) *HorizontalPodAutoscalerDie {
	return d.DieStamp(func(r *autoscalingv2.HorizontalPodAutoscaler) {
		r.APIVersion = v
	})
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (d *HorizontalPodAutoscalerDie) Kind(v string) *HorizontalPodAutoscalerDie {
	return d.DieStamp(func(r *autoscalingv2.HorizontalPodAutoscaler) {
		r.Kind = v
	})
}

// TypeMetadata standard object's type metadata.
func (d *HorizontalPodAutoscalerDie) TypeMetadata(v metav1.TypeMeta) *HorizontalPodAutoscalerDie {
	return d.DieStamp(func(r *autoscalingv2.HorizontalPodAutoscaler) {
		r.TypeMeta = v
	})
}

// TypeMetadataDie stamps the resource's TypeMeta field with a mutable die.
func (d *HorizontalPodAutoscalerDie) TypeMetadataDie(fn func(d *v1.TypeMetaDie)) *HorizontalPodAutoscalerDie {
	return d.DieStamp(func(r *autoscalingv2.HorizontalPodAutoscaler) {
		d := v1.TypeMetaBlank.DieImmutable(false).DieFeed(r.TypeMeta)
		fn(d)
		r.TypeMeta = d.DieRelease()
	})
}

// Metadata standard object's metadata.
func (d *HorizontalPodAutoscalerDie) Metadata(v metav1.ObjectMeta) *HorizontalPodAutoscalerDie {
	return d.DieStamp(func(r *autoscalingv2.HorizontalPodAutoscaler) {
		r.ObjectMeta = v
	})
}

// MetadataDie stamps the resource's ObjectMeta field with a mutable die.
func (d *HorizontalPodAutoscalerDie) MetadataDie(fn func(d *v1.ObjectMetaDie)) *HorizontalPodAutoscalerDie {
	return d.DieStamp(func(r *autoscalingv2.HorizontalPodAutoscaler) {
		d := v1.ObjectMetaBlank.DieImmutable(false).DieFeed(r.ObjectMeta)
		fn(d)
		r.ObjectMeta = d.DieRelease()
	})
}

// SpecDie stamps the resource's spec field with a mutable die.
func (d *HorizontalPodAutoscalerDie) SpecDie(fn func(d *HorizontalPodAutoscalerSpecDie)) *HorizontalPodAutoscalerDie {
	return d.DieStamp(func(r *autoscalingv2.HorizontalPodAutoscaler) {
		d := HorizontalPodAutoscalerSpecBlank.DieImmutable(false).DieFeed(r.Spec)
		fn(d)
		r.Spec = d.DieRelease()
	})
}

// StatusDie stamps the resource's status field with a mutable die.
func (d *HorizontalPodAutoscalerDie) StatusDie(fn func(d *HorizontalPodAutoscalerStatusDie)) *HorizontalPodAutoscalerDie {
	return d.DieStamp(func(r *autoscalingv2.HorizontalPodAutoscaler) {
		d := HorizontalPodAutoscalerStatusBlank.DieImmutable(false).DieFeed(r.Status)
		fn(d)
		r.Status = d.DieRelease()
	})
}

// spec is the specification for the behaviour of the autoscaler.
//
// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status.
func (d *HorizontalPodAutoscalerDie) Spec(v autoscalingv2.HorizontalPodAutoscalerSpec) *HorizontalPodAutoscalerDie {
	return d.DieStamp(func(r *autoscalingv2.HorizontalPodAutoscaler) {
		r.Spec = v
	})
}

// status is the current information about the autoscaler.
func (d *HorizontalPodAutoscalerDie) Status(v autoscalingv2.HorizontalPodAutoscalerStatus) *HorizontalPodAutoscalerDie {
	return d.DieStamp(func(r *autoscalingv2.HorizontalPodAutoscaler) {
		r.Status = v
	})
}

var HorizontalPodAutoscalerSpecBlank = (&HorizontalPodAutoscalerSpecDie{}).DieFeed(autoscalingv2.HorizontalPodAutoscalerSpec{})

type HorizontalPodAutoscalerSpecDie struct {
	mutable bool
	r       autoscalingv2.HorizontalPodAutoscalerSpec
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *HorizontalPodAutoscalerSpecDie) DieImmutable(immutable bool) *HorizontalPodAutoscalerSpecDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *HorizontalPodAutoscalerSpecDie) DieFeed(r autoscalingv2.HorizontalPodAutoscalerSpec) *HorizontalPodAutoscalerSpecDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &HorizontalPodAutoscalerSpecDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *HorizontalPodAutoscalerSpecDie) DieFeedPtr(r *autoscalingv2.HorizontalPodAutoscalerSpec) *HorizontalPodAutoscalerSpecDie {
	if r == nil {
		r = &autoscalingv2.HorizontalPodAutoscalerSpec{}
	}
	return d.DieFeed(*r)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *HorizontalPodAutoscalerSpecDie) DieFeedJSON(j []byte) *HorizontalPodAutoscalerSpecDie {
	r := autoscalingv2.HorizontalPodAutoscalerSpec{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *HorizontalPodAutoscalerSpecDie) DieFeedYAML(y []byte) *HorizontalPodAutoscalerSpecDie {
	r := autoscalingv2.HorizontalPodAutoscalerSpec{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *HorizontalPodAutoscalerSpecDie) DieFeedYAMLFile(name string) *HorizontalPodAutoscalerSpecDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *HorizontalPodAutoscalerSpecDie) DieFeedRawExtension(raw runtime.RawExtension) *HorizontalPodAutoscalerSpecDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *HorizontalPodAutoscalerSpecDie) DieRelease() autoscalingv2.HorizontalPodAutoscalerSpec {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *HorizontalPodAutoscalerSpecDie) DieReleasePtr() *autoscalingv2.HorizontalPodAutoscalerSpec {
	r := d.DieRelease()
	return &r
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *HorizontalPodAutoscalerSpecDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *HorizontalPodAutoscalerSpecDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *HorizontalPodAutoscalerSpecDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *HorizontalPodAutoscalerSpecDie) DieStamp(fn func(r *autoscalingv2.HorizontalPodAutoscalerSpec)) *HorizontalPodAutoscalerSpecDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// Experimental: DieStampAt uses a JSON path (http://goessner.net/articles/JsonPath/) expression to stamp portions of the resource. The callback is invoked with each JSON path match. Panics if the callback function does not accept a single argument of the same type or a pointer to that type as found on the resource at the target location.
//
// Future iterations will improve type coercion from the resource to the callback argument.
func (d *HorizontalPodAutoscalerSpecDie) DieStampAt(jp string, fn interface{}) *HorizontalPodAutoscalerSpecDie {
	return d.DieStamp(func(r *autoscalingv2.HorizontalPodAutoscalerSpec) {
		if ni := reflectx.ValueOf(fn).Type().NumIn(); ni != 1 {
			panic(fmtx.Errorf("callback function must have 1 input parameters, found %d", ni))
		}
		if no := reflectx.ValueOf(fn).Type().NumOut(); no != 0 {
			panic(fmtx.Errorf("callback function must have 0 output parameters, found %d", no))
		}

		cp := jsonpath.New("")
		if err := cp.Parse(fmtx.Sprintf("{%s}", jp)); err != nil {
			panic(err)
		}
		cr, err := cp.FindResults(r)
		if err != nil {
			// errors are expected if a path is not found
			return
		}
		for _, cv := range cr[0] {
			arg0t := reflectx.ValueOf(fn).Type().In(0)

			var args []reflectx.Value
			if cv.Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv}
			} else if cv.CanAddr() && cv.Addr().Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv.Addr()}
			} else {
				panic(fmtx.Errorf("callback function must accept value of type %q, found type %q", cv.Type(), arg0t))
			}

			reflectx.ValueOf(fn).Call(args)
		}
	})
}

// DieWith returns a new die after passing the current die to the callback function. The passed die is mutable.
func (d *HorizontalPodAutoscalerSpecDie) DieWith(fns ...func(d *HorizontalPodAutoscalerSpecDie)) *HorizontalPodAutoscalerSpecDie {
	nd := HorizontalPodAutoscalerSpecBlank.DieFeed(d.DieRelease()).DieImmutable(false)
	for _, fn := range fns {
		if fn != nil {
			fn(nd)
		}
	}
	return d.DieFeed(nd.DieRelease())
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *HorizontalPodAutoscalerSpecDie) DeepCopy() *HorizontalPodAutoscalerSpecDie {
	r := *d.r.DeepCopy()
	return &HorizontalPodAutoscalerSpecDie{
		mutable: d.mutable,
		r:       r,
	}
}

// scaleTargetRef points to the target resource to scale, and is used to the pods for which metrics
//
// should be collected, as well as to actually change the replica count.
func (d *HorizontalPodAutoscalerSpecDie) ScaleTargetRef(v autoscalingv2.CrossVersionObjectReference) *HorizontalPodAutoscalerSpecDie {
	return d.DieStamp(func(r *autoscalingv2.HorizontalPodAutoscalerSpec) {
		r.ScaleTargetRef = v
	})
}

// minReplicas is the lower limit for the number of replicas to which the autoscaler
//
// can scale down.  It defaults to 1 pod.  minReplicas is allowed to be 0 if the
//
// alpha feature gate HPAScaleToZero is enabled and at least one Object or External
//
// metric is configured.  Scaling is active as long as at least one metric value is
//
// available.
func (d *HorizontalPodAutoscalerSpecDie) MinReplicas(v *int32) *HorizontalPodAutoscalerSpecDie {
	return d.DieStamp(func(r *autoscalingv2.HorizontalPodAutoscalerSpec) {
		r.MinReplicas = v
	})
}

// maxReplicas is the upper limit for the number of replicas to which the autoscaler can scale up.
//
// It cannot be less that minReplicas.
func (d *HorizontalPodAutoscalerSpecDie) MaxReplicas(v int32) *HorizontalPodAutoscalerSpecDie {
	return d.DieStamp(func(r *autoscalingv2.HorizontalPodAutoscalerSpec) {
		r.MaxReplicas = v
	})
}

// metrics contains the specifications for which to use to calculate the
//
// desired replica count (the maximum replica count across all metrics will
//
// be used).  The desired replica count is calculated multiplying the
//
// ratio between the target value and the current value by the current
//
// number of pods.  Ergo, metrics used must decrease as the pod count is
//
// increased, and vice-versa.  See the individual metric source types for
//
// more information about how each type of metric must respond.
//
// If not set, the default metric will be set to 80% average CPU utilization.
func (d *HorizontalPodAutoscalerSpecDie) Metrics(v ...autoscalingv2.MetricSpec) *HorizontalPodAutoscalerSpecDie {
	return d.DieStamp(func(r *autoscalingv2.HorizontalPodAutoscalerSpec) {
		r.Metrics = v
	})
}

// behavior configures the scaling behavior of the target
//
// in both Up and Down directions (scaleUp and scaleDown fields respectively).
//
// If not set, the default HPAScalingRules for scale up and scale down are used.
func (d *HorizontalPodAutoscalerSpecDie) Behavior(v *autoscalingv2.HorizontalPodAutoscalerBehavior) *HorizontalPodAutoscalerSpecDie {
	return d.DieStamp(func(r *autoscalingv2.HorizontalPodAutoscalerSpec) {
		r.Behavior = v
	})
}

var CrossVersionObjectReferenceBlank = (&CrossVersionObjectReferenceDie{}).DieFeed(autoscalingv2.CrossVersionObjectReference{})

type CrossVersionObjectReferenceDie struct {
	mutable bool
	r       autoscalingv2.CrossVersionObjectReference
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *CrossVersionObjectReferenceDie) DieImmutable(immutable bool) *CrossVersionObjectReferenceDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *CrossVersionObjectReferenceDie) DieFeed(r autoscalingv2.CrossVersionObjectReference) *CrossVersionObjectReferenceDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &CrossVersionObjectReferenceDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *CrossVersionObjectReferenceDie) DieFeedPtr(r *autoscalingv2.CrossVersionObjectReference) *CrossVersionObjectReferenceDie {
	if r == nil {
		r = &autoscalingv2.CrossVersionObjectReference{}
	}
	return d.DieFeed(*r)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *CrossVersionObjectReferenceDie) DieFeedJSON(j []byte) *CrossVersionObjectReferenceDie {
	r := autoscalingv2.CrossVersionObjectReference{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *CrossVersionObjectReferenceDie) DieFeedYAML(y []byte) *CrossVersionObjectReferenceDie {
	r := autoscalingv2.CrossVersionObjectReference{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *CrossVersionObjectReferenceDie) DieFeedYAMLFile(name string) *CrossVersionObjectReferenceDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *CrossVersionObjectReferenceDie) DieFeedRawExtension(raw runtime.RawExtension) *CrossVersionObjectReferenceDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *CrossVersionObjectReferenceDie) DieRelease() autoscalingv2.CrossVersionObjectReference {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *CrossVersionObjectReferenceDie) DieReleasePtr() *autoscalingv2.CrossVersionObjectReference {
	r := d.DieRelease()
	return &r
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *CrossVersionObjectReferenceDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *CrossVersionObjectReferenceDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *CrossVersionObjectReferenceDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *CrossVersionObjectReferenceDie) DieStamp(fn func(r *autoscalingv2.CrossVersionObjectReference)) *CrossVersionObjectReferenceDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// Experimental: DieStampAt uses a JSON path (http://goessner.net/articles/JsonPath/) expression to stamp portions of the resource. The callback is invoked with each JSON path match. Panics if the callback function does not accept a single argument of the same type or a pointer to that type as found on the resource at the target location.
//
// Future iterations will improve type coercion from the resource to the callback argument.
func (d *CrossVersionObjectReferenceDie) DieStampAt(jp string, fn interface{}) *CrossVersionObjectReferenceDie {
	return d.DieStamp(func(r *autoscalingv2.CrossVersionObjectReference) {
		if ni := reflectx.ValueOf(fn).Type().NumIn(); ni != 1 {
			panic(fmtx.Errorf("callback function must have 1 input parameters, found %d", ni))
		}
		if no := reflectx.ValueOf(fn).Type().NumOut(); no != 0 {
			panic(fmtx.Errorf("callback function must have 0 output parameters, found %d", no))
		}

		cp := jsonpath.New("")
		if err := cp.Parse(fmtx.Sprintf("{%s}", jp)); err != nil {
			panic(err)
		}
		cr, err := cp.FindResults(r)
		if err != nil {
			// errors are expected if a path is not found
			return
		}
		for _, cv := range cr[0] {
			arg0t := reflectx.ValueOf(fn).Type().In(0)

			var args []reflectx.Value
			if cv.Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv}
			} else if cv.CanAddr() && cv.Addr().Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv.Addr()}
			} else {
				panic(fmtx.Errorf("callback function must accept value of type %q, found type %q", cv.Type(), arg0t))
			}

			reflectx.ValueOf(fn).Call(args)
		}
	})
}

// DieWith returns a new die after passing the current die to the callback function. The passed die is mutable.
func (d *CrossVersionObjectReferenceDie) DieWith(fns ...func(d *CrossVersionObjectReferenceDie)) *CrossVersionObjectReferenceDie {
	nd := CrossVersionObjectReferenceBlank.DieFeed(d.DieRelease()).DieImmutable(false)
	for _, fn := range fns {
		if fn != nil {
			fn(nd)
		}
	}
	return d.DieFeed(nd.DieRelease())
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *CrossVersionObjectReferenceDie) DeepCopy() *CrossVersionObjectReferenceDie {
	r := *d.r.DeepCopy()
	return &CrossVersionObjectReferenceDie{
		mutable: d.mutable,
		r:       r,
	}
}

// kind is the kind of the referent; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (d *CrossVersionObjectReferenceDie) Kind(v string) *CrossVersionObjectReferenceDie {
	return d.DieStamp(func(r *autoscalingv2.CrossVersionObjectReference) {
		r.Kind = v
	})
}

// name is the name of the referent; More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (d *CrossVersionObjectReferenceDie) Name(v string) *CrossVersionObjectReferenceDie {
	return d.DieStamp(func(r *autoscalingv2.CrossVersionObjectReference) {
		r.Name = v
	})
}

// apiVersion is the API version of the referent
func (d *CrossVersionObjectReferenceDie) APIVersion(v string) *CrossVersionObjectReferenceDie {
	return d.DieStamp(func(r *autoscalingv2.CrossVersionObjectReference) {
		r.APIVersion = v
	})
}

var MetricSpecBlank = (&MetricSpecDie{}).DieFeed(autoscalingv2.MetricSpec{})

type MetricSpecDie struct {
	mutable bool
	r       autoscalingv2.MetricSpec
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *MetricSpecDie) DieImmutable(immutable bool) *MetricSpecDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *MetricSpecDie) DieFeed(r autoscalingv2.MetricSpec) *MetricSpecDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &MetricSpecDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *MetricSpecDie) DieFeedPtr(r *autoscalingv2.MetricSpec) *MetricSpecDie {
	if r == nil {
		r = &autoscalingv2.MetricSpec{}
	}
	return d.DieFeed(*r)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *MetricSpecDie) DieFeedJSON(j []byte) *MetricSpecDie {
	r := autoscalingv2.MetricSpec{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *MetricSpecDie) DieFeedYAML(y []byte) *MetricSpecDie {
	r := autoscalingv2.MetricSpec{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *MetricSpecDie) DieFeedYAMLFile(name string) *MetricSpecDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *MetricSpecDie) DieFeedRawExtension(raw runtime.RawExtension) *MetricSpecDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *MetricSpecDie) DieRelease() autoscalingv2.MetricSpec {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *MetricSpecDie) DieReleasePtr() *autoscalingv2.MetricSpec {
	r := d.DieRelease()
	return &r
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *MetricSpecDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *MetricSpecDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *MetricSpecDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *MetricSpecDie) DieStamp(fn func(r *autoscalingv2.MetricSpec)) *MetricSpecDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// Experimental: DieStampAt uses a JSON path (http://goessner.net/articles/JsonPath/) expression to stamp portions of the resource. The callback is invoked with each JSON path match. Panics if the callback function does not accept a single argument of the same type or a pointer to that type as found on the resource at the target location.
//
// Future iterations will improve type coercion from the resource to the callback argument.
func (d *MetricSpecDie) DieStampAt(jp string, fn interface{}) *MetricSpecDie {
	return d.DieStamp(func(r *autoscalingv2.MetricSpec) {
		if ni := reflectx.ValueOf(fn).Type().NumIn(); ni != 1 {
			panic(fmtx.Errorf("callback function must have 1 input parameters, found %d", ni))
		}
		if no := reflectx.ValueOf(fn).Type().NumOut(); no != 0 {
			panic(fmtx.Errorf("callback function must have 0 output parameters, found %d", no))
		}

		cp := jsonpath.New("")
		if err := cp.Parse(fmtx.Sprintf("{%s}", jp)); err != nil {
			panic(err)
		}
		cr, err := cp.FindResults(r)
		if err != nil {
			// errors are expected if a path is not found
			return
		}
		for _, cv := range cr[0] {
			arg0t := reflectx.ValueOf(fn).Type().In(0)

			var args []reflectx.Value
			if cv.Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv}
			} else if cv.CanAddr() && cv.Addr().Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv.Addr()}
			} else {
				panic(fmtx.Errorf("callback function must accept value of type %q, found type %q", cv.Type(), arg0t))
			}

			reflectx.ValueOf(fn).Call(args)
		}
	})
}

// DieWith returns a new die after passing the current die to the callback function. The passed die is mutable.
func (d *MetricSpecDie) DieWith(fns ...func(d *MetricSpecDie)) *MetricSpecDie {
	nd := MetricSpecBlank.DieFeed(d.DieRelease()).DieImmutable(false)
	for _, fn := range fns {
		if fn != nil {
			fn(nd)
		}
	}
	return d.DieFeed(nd.DieRelease())
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *MetricSpecDie) DeepCopy() *MetricSpecDie {
	r := *d.r.DeepCopy()
	return &MetricSpecDie{
		mutable: d.mutable,
		r:       r,
	}
}

// type is the type of metric source.  It should be one of "ContainerResource", "External",
//
// "Object", "Pods" or "Resource", each mapping to a matching field in the object.
//
// Note: "ContainerResource" type is available on when the feature-gate
//
// HPAContainerMetrics is enabled
func (d *MetricSpecDie) Type(v autoscalingv2.MetricSourceType) *MetricSpecDie {
	return d.DieStamp(func(r *autoscalingv2.MetricSpec) {
		r.Type = v
	})
}

// object refers to a metric describing a single kubernetes object
//
// (for example, hits-per-second on an Ingress object).
func (d *MetricSpecDie) Object(v *autoscalingv2.ObjectMetricSource) *MetricSpecDie {
	return d.DieStamp(func(r *autoscalingv2.MetricSpec) {
		r.Object = v
	})
}

// pods refers to a metric describing each pod in the current scale target
//
// (for example, transactions-processed-per-second).  The values will be
//
// averaged together before being compared to the target value.
func (d *MetricSpecDie) Pods(v *autoscalingv2.PodsMetricSource) *MetricSpecDie {
	return d.DieStamp(func(r *autoscalingv2.MetricSpec) {
		r.Pods = v
	})
}

// resource refers to a resource metric (such as those specified in
//
// requests and limits) known to Kubernetes describing each pod in the
//
// current scale target (e.g. CPU or memory). Such metrics are built in to
//
// # Kubernetes, and have special scaling options on top of those available
//
// to normal per-pod metrics using the "pods" source.
func (d *MetricSpecDie) Resource(v *autoscalingv2.ResourceMetricSource) *MetricSpecDie {
	return d.DieStamp(func(r *autoscalingv2.MetricSpec) {
		r.Resource = v
	})
}

// containerResource refers to a resource metric (such as those specified in
//
// requests and limits) known to Kubernetes describing a single container in
//
// each pod of the current scale target (e.g. CPU or memory). Such metrics are
//
// built in to Kubernetes, and have special scaling options on top of those
//
// available to normal per-pod metrics using the "pods" source.
//
// This is an alpha feature and can be enabled by the HPAContainerMetrics feature flag.
func (d *MetricSpecDie) ContainerResource(v *autoscalingv2.ContainerResourceMetricSource) *MetricSpecDie {
	return d.DieStamp(func(r *autoscalingv2.MetricSpec) {
		r.ContainerResource = v
	})
}

// external refers to a global metric that is not associated
//
// with any Kubernetes object. It allows autoscaling based on information
//
// coming from components running outside of cluster
//
// (for example length of queue in cloud messaging service, or
//
// QPS from loadbalancer running outside of cluster).
func (d *MetricSpecDie) External(v *autoscalingv2.ExternalMetricSource) *MetricSpecDie {
	return d.DieStamp(func(r *autoscalingv2.MetricSpec) {
		r.External = v
	})
}

var ObjectMetricSourceBlank = (&ObjectMetricSourceDie{}).DieFeed(autoscalingv2.ObjectMetricSource{})

type ObjectMetricSourceDie struct {
	mutable bool
	r       autoscalingv2.ObjectMetricSource
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *ObjectMetricSourceDie) DieImmutable(immutable bool) *ObjectMetricSourceDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *ObjectMetricSourceDie) DieFeed(r autoscalingv2.ObjectMetricSource) *ObjectMetricSourceDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &ObjectMetricSourceDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *ObjectMetricSourceDie) DieFeedPtr(r *autoscalingv2.ObjectMetricSource) *ObjectMetricSourceDie {
	if r == nil {
		r = &autoscalingv2.ObjectMetricSource{}
	}
	return d.DieFeed(*r)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *ObjectMetricSourceDie) DieFeedJSON(j []byte) *ObjectMetricSourceDie {
	r := autoscalingv2.ObjectMetricSource{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *ObjectMetricSourceDie) DieFeedYAML(y []byte) *ObjectMetricSourceDie {
	r := autoscalingv2.ObjectMetricSource{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *ObjectMetricSourceDie) DieFeedYAMLFile(name string) *ObjectMetricSourceDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *ObjectMetricSourceDie) DieFeedRawExtension(raw runtime.RawExtension) *ObjectMetricSourceDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *ObjectMetricSourceDie) DieRelease() autoscalingv2.ObjectMetricSource {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *ObjectMetricSourceDie) DieReleasePtr() *autoscalingv2.ObjectMetricSource {
	r := d.DieRelease()
	return &r
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *ObjectMetricSourceDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *ObjectMetricSourceDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *ObjectMetricSourceDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *ObjectMetricSourceDie) DieStamp(fn func(r *autoscalingv2.ObjectMetricSource)) *ObjectMetricSourceDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// Experimental: DieStampAt uses a JSON path (http://goessner.net/articles/JsonPath/) expression to stamp portions of the resource. The callback is invoked with each JSON path match. Panics if the callback function does not accept a single argument of the same type or a pointer to that type as found on the resource at the target location.
//
// Future iterations will improve type coercion from the resource to the callback argument.
func (d *ObjectMetricSourceDie) DieStampAt(jp string, fn interface{}) *ObjectMetricSourceDie {
	return d.DieStamp(func(r *autoscalingv2.ObjectMetricSource) {
		if ni := reflectx.ValueOf(fn).Type().NumIn(); ni != 1 {
			panic(fmtx.Errorf("callback function must have 1 input parameters, found %d", ni))
		}
		if no := reflectx.ValueOf(fn).Type().NumOut(); no != 0 {
			panic(fmtx.Errorf("callback function must have 0 output parameters, found %d", no))
		}

		cp := jsonpath.New("")
		if err := cp.Parse(fmtx.Sprintf("{%s}", jp)); err != nil {
			panic(err)
		}
		cr, err := cp.FindResults(r)
		if err != nil {
			// errors are expected if a path is not found
			return
		}
		for _, cv := range cr[0] {
			arg0t := reflectx.ValueOf(fn).Type().In(0)

			var args []reflectx.Value
			if cv.Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv}
			} else if cv.CanAddr() && cv.Addr().Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv.Addr()}
			} else {
				panic(fmtx.Errorf("callback function must accept value of type %q, found type %q", cv.Type(), arg0t))
			}

			reflectx.ValueOf(fn).Call(args)
		}
	})
}

// DieWith returns a new die after passing the current die to the callback function. The passed die is mutable.
func (d *ObjectMetricSourceDie) DieWith(fns ...func(d *ObjectMetricSourceDie)) *ObjectMetricSourceDie {
	nd := ObjectMetricSourceBlank.DieFeed(d.DieRelease()).DieImmutable(false)
	for _, fn := range fns {
		if fn != nil {
			fn(nd)
		}
	}
	return d.DieFeed(nd.DieRelease())
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *ObjectMetricSourceDie) DeepCopy() *ObjectMetricSourceDie {
	r := *d.r.DeepCopy()
	return &ObjectMetricSourceDie{
		mutable: d.mutable,
		r:       r,
	}
}

// describedObject specifies the descriptions of a object,such as kind,name apiVersion
func (d *ObjectMetricSourceDie) DescribedObject(v autoscalingv2.CrossVersionObjectReference) *ObjectMetricSourceDie {
	return d.DieStamp(func(r *autoscalingv2.ObjectMetricSource) {
		r.DescribedObject = v
	})
}

// target specifies the target value for the given metric
func (d *ObjectMetricSourceDie) Target(v autoscalingv2.MetricTarget) *ObjectMetricSourceDie {
	return d.DieStamp(func(r *autoscalingv2.ObjectMetricSource) {
		r.Target = v
	})
}

// metric identifies the target metric by name and selector
func (d *ObjectMetricSourceDie) Metric(v autoscalingv2.MetricIdentifier) *ObjectMetricSourceDie {
	return d.DieStamp(func(r *autoscalingv2.ObjectMetricSource) {
		r.Metric = v
	})
}

var MetricTargetBlank = (&MetricTargetDie{}).DieFeed(autoscalingv2.MetricTarget{})

type MetricTargetDie struct {
	mutable bool
	r       autoscalingv2.MetricTarget
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *MetricTargetDie) DieImmutable(immutable bool) *MetricTargetDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *MetricTargetDie) DieFeed(r autoscalingv2.MetricTarget) *MetricTargetDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &MetricTargetDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *MetricTargetDie) DieFeedPtr(r *autoscalingv2.MetricTarget) *MetricTargetDie {
	if r == nil {
		r = &autoscalingv2.MetricTarget{}
	}
	return d.DieFeed(*r)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *MetricTargetDie) DieFeedJSON(j []byte) *MetricTargetDie {
	r := autoscalingv2.MetricTarget{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *MetricTargetDie) DieFeedYAML(y []byte) *MetricTargetDie {
	r := autoscalingv2.MetricTarget{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *MetricTargetDie) DieFeedYAMLFile(name string) *MetricTargetDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *MetricTargetDie) DieFeedRawExtension(raw runtime.RawExtension) *MetricTargetDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *MetricTargetDie) DieRelease() autoscalingv2.MetricTarget {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *MetricTargetDie) DieReleasePtr() *autoscalingv2.MetricTarget {
	r := d.DieRelease()
	return &r
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *MetricTargetDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *MetricTargetDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *MetricTargetDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *MetricTargetDie) DieStamp(fn func(r *autoscalingv2.MetricTarget)) *MetricTargetDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// Experimental: DieStampAt uses a JSON path (http://goessner.net/articles/JsonPath/) expression to stamp portions of the resource. The callback is invoked with each JSON path match. Panics if the callback function does not accept a single argument of the same type or a pointer to that type as found on the resource at the target location.
//
// Future iterations will improve type coercion from the resource to the callback argument.
func (d *MetricTargetDie) DieStampAt(jp string, fn interface{}) *MetricTargetDie {
	return d.DieStamp(func(r *autoscalingv2.MetricTarget) {
		if ni := reflectx.ValueOf(fn).Type().NumIn(); ni != 1 {
			panic(fmtx.Errorf("callback function must have 1 input parameters, found %d", ni))
		}
		if no := reflectx.ValueOf(fn).Type().NumOut(); no != 0 {
			panic(fmtx.Errorf("callback function must have 0 output parameters, found %d", no))
		}

		cp := jsonpath.New("")
		if err := cp.Parse(fmtx.Sprintf("{%s}", jp)); err != nil {
			panic(err)
		}
		cr, err := cp.FindResults(r)
		if err != nil {
			// errors are expected if a path is not found
			return
		}
		for _, cv := range cr[0] {
			arg0t := reflectx.ValueOf(fn).Type().In(0)

			var args []reflectx.Value
			if cv.Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv}
			} else if cv.CanAddr() && cv.Addr().Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv.Addr()}
			} else {
				panic(fmtx.Errorf("callback function must accept value of type %q, found type %q", cv.Type(), arg0t))
			}

			reflectx.ValueOf(fn).Call(args)
		}
	})
}

// DieWith returns a new die after passing the current die to the callback function. The passed die is mutable.
func (d *MetricTargetDie) DieWith(fns ...func(d *MetricTargetDie)) *MetricTargetDie {
	nd := MetricTargetBlank.DieFeed(d.DieRelease()).DieImmutable(false)
	for _, fn := range fns {
		if fn != nil {
			fn(nd)
		}
	}
	return d.DieFeed(nd.DieRelease())
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *MetricTargetDie) DeepCopy() *MetricTargetDie {
	r := *d.r.DeepCopy()
	return &MetricTargetDie{
		mutable: d.mutable,
		r:       r,
	}
}

// type represents whether the metric type is Utilization, Value, or AverageValue
func (d *MetricTargetDie) Type(v autoscalingv2.MetricTargetType) *MetricTargetDie {
	return d.DieStamp(func(r *autoscalingv2.MetricTarget) {
		r.Type = v
	})
}

// value is the target value of the metric (as a quantity).
func (d *MetricTargetDie) Value(v *resource.Quantity) *MetricTargetDie {
	return d.DieStamp(func(r *autoscalingv2.MetricTarget) {
		r.Value = v
	})
}

// ValueString sets Value by parsing the string as a Quantity. Panics if the string is not parsable.
//
// value is the target value of the metric (as a quantity).
func (d *MetricTargetDie) ValueString(s string) *MetricTargetDie {
	q := resource.MustParse(s)
	return d.Value(&q)
}

// averageValue is the target value of the average of the
//
// metric across all relevant pods (as a quantity)
func (d *MetricTargetDie) AverageValue(v *resource.Quantity) *MetricTargetDie {
	return d.DieStamp(func(r *autoscalingv2.MetricTarget) {
		r.AverageValue = v
	})
}

// AverageValueString sets AverageValue by parsing the string as a Quantity. Panics if the string is not parsable.
//
// averageValue is the target value of the average of the
//
// metric across all relevant pods (as a quantity)
func (d *MetricTargetDie) AverageValueString(s string) *MetricTargetDie {
	q := resource.MustParse(s)
	return d.AverageValue(&q)
}

// averageUtilization is the target value of the average of the
//
// resource metric across all relevant pods, represented as a percentage of
//
// the requested value of the resource for the pods.
//
// Currently only valid for Resource metric source type
func (d *MetricTargetDie) AverageUtilization(v *int32) *MetricTargetDie {
	return d.DieStamp(func(r *autoscalingv2.MetricTarget) {
		r.AverageUtilization = v
	})
}

var MetricIdentifierBlank = (&MetricIdentifierDie{}).DieFeed(autoscalingv2.MetricIdentifier{})

type MetricIdentifierDie struct {
	mutable bool
	r       autoscalingv2.MetricIdentifier
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *MetricIdentifierDie) DieImmutable(immutable bool) *MetricIdentifierDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *MetricIdentifierDie) DieFeed(r autoscalingv2.MetricIdentifier) *MetricIdentifierDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &MetricIdentifierDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *MetricIdentifierDie) DieFeedPtr(r *autoscalingv2.MetricIdentifier) *MetricIdentifierDie {
	if r == nil {
		r = &autoscalingv2.MetricIdentifier{}
	}
	return d.DieFeed(*r)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *MetricIdentifierDie) DieFeedJSON(j []byte) *MetricIdentifierDie {
	r := autoscalingv2.MetricIdentifier{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *MetricIdentifierDie) DieFeedYAML(y []byte) *MetricIdentifierDie {
	r := autoscalingv2.MetricIdentifier{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *MetricIdentifierDie) DieFeedYAMLFile(name string) *MetricIdentifierDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *MetricIdentifierDie) DieFeedRawExtension(raw runtime.RawExtension) *MetricIdentifierDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *MetricIdentifierDie) DieRelease() autoscalingv2.MetricIdentifier {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *MetricIdentifierDie) DieReleasePtr() *autoscalingv2.MetricIdentifier {
	r := d.DieRelease()
	return &r
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *MetricIdentifierDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *MetricIdentifierDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *MetricIdentifierDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *MetricIdentifierDie) DieStamp(fn func(r *autoscalingv2.MetricIdentifier)) *MetricIdentifierDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// Experimental: DieStampAt uses a JSON path (http://goessner.net/articles/JsonPath/) expression to stamp portions of the resource. The callback is invoked with each JSON path match. Panics if the callback function does not accept a single argument of the same type or a pointer to that type as found on the resource at the target location.
//
// Future iterations will improve type coercion from the resource to the callback argument.
func (d *MetricIdentifierDie) DieStampAt(jp string, fn interface{}) *MetricIdentifierDie {
	return d.DieStamp(func(r *autoscalingv2.MetricIdentifier) {
		if ni := reflectx.ValueOf(fn).Type().NumIn(); ni != 1 {
			panic(fmtx.Errorf("callback function must have 1 input parameters, found %d", ni))
		}
		if no := reflectx.ValueOf(fn).Type().NumOut(); no != 0 {
			panic(fmtx.Errorf("callback function must have 0 output parameters, found %d", no))
		}

		cp := jsonpath.New("")
		if err := cp.Parse(fmtx.Sprintf("{%s}", jp)); err != nil {
			panic(err)
		}
		cr, err := cp.FindResults(r)
		if err != nil {
			// errors are expected if a path is not found
			return
		}
		for _, cv := range cr[0] {
			arg0t := reflectx.ValueOf(fn).Type().In(0)

			var args []reflectx.Value
			if cv.Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv}
			} else if cv.CanAddr() && cv.Addr().Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv.Addr()}
			} else {
				panic(fmtx.Errorf("callback function must accept value of type %q, found type %q", cv.Type(), arg0t))
			}

			reflectx.ValueOf(fn).Call(args)
		}
	})
}

// DieWith returns a new die after passing the current die to the callback function. The passed die is mutable.
func (d *MetricIdentifierDie) DieWith(fns ...func(d *MetricIdentifierDie)) *MetricIdentifierDie {
	nd := MetricIdentifierBlank.DieFeed(d.DieRelease()).DieImmutable(false)
	for _, fn := range fns {
		if fn != nil {
			fn(nd)
		}
	}
	return d.DieFeed(nd.DieRelease())
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *MetricIdentifierDie) DeepCopy() *MetricIdentifierDie {
	r := *d.r.DeepCopy()
	return &MetricIdentifierDie{
		mutable: d.mutable,
		r:       r,
	}
}

// name is the name of the given metric
func (d *MetricIdentifierDie) Name(v string) *MetricIdentifierDie {
	return d.DieStamp(func(r *autoscalingv2.MetricIdentifier) {
		r.Name = v
	})
}

// selector is the string-encoded form of a standard kubernetes label selector for the given metric
//
// When set, it is passed as an additional parameter to the metrics server for more specific metrics scoping.
//
// When unset, just the metricName will be used to gather metrics.
func (d *MetricIdentifierDie) Selector(v *metav1.LabelSelector) *MetricIdentifierDie {
	return d.DieStamp(func(r *autoscalingv2.MetricIdentifier) {
		r.Selector = v
	})
}

var PodsMetricSourceBlank = (&PodsMetricSourceDie{}).DieFeed(autoscalingv2.PodsMetricSource{})

type PodsMetricSourceDie struct {
	mutable bool
	r       autoscalingv2.PodsMetricSource
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *PodsMetricSourceDie) DieImmutable(immutable bool) *PodsMetricSourceDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *PodsMetricSourceDie) DieFeed(r autoscalingv2.PodsMetricSource) *PodsMetricSourceDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &PodsMetricSourceDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *PodsMetricSourceDie) DieFeedPtr(r *autoscalingv2.PodsMetricSource) *PodsMetricSourceDie {
	if r == nil {
		r = &autoscalingv2.PodsMetricSource{}
	}
	return d.DieFeed(*r)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *PodsMetricSourceDie) DieFeedJSON(j []byte) *PodsMetricSourceDie {
	r := autoscalingv2.PodsMetricSource{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *PodsMetricSourceDie) DieFeedYAML(y []byte) *PodsMetricSourceDie {
	r := autoscalingv2.PodsMetricSource{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *PodsMetricSourceDie) DieFeedYAMLFile(name string) *PodsMetricSourceDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *PodsMetricSourceDie) DieFeedRawExtension(raw runtime.RawExtension) *PodsMetricSourceDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *PodsMetricSourceDie) DieRelease() autoscalingv2.PodsMetricSource {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *PodsMetricSourceDie) DieReleasePtr() *autoscalingv2.PodsMetricSource {
	r := d.DieRelease()
	return &r
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *PodsMetricSourceDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *PodsMetricSourceDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *PodsMetricSourceDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *PodsMetricSourceDie) DieStamp(fn func(r *autoscalingv2.PodsMetricSource)) *PodsMetricSourceDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// Experimental: DieStampAt uses a JSON path (http://goessner.net/articles/JsonPath/) expression to stamp portions of the resource. The callback is invoked with each JSON path match. Panics if the callback function does not accept a single argument of the same type or a pointer to that type as found on the resource at the target location.
//
// Future iterations will improve type coercion from the resource to the callback argument.
func (d *PodsMetricSourceDie) DieStampAt(jp string, fn interface{}) *PodsMetricSourceDie {
	return d.DieStamp(func(r *autoscalingv2.PodsMetricSource) {
		if ni := reflectx.ValueOf(fn).Type().NumIn(); ni != 1 {
			panic(fmtx.Errorf("callback function must have 1 input parameters, found %d", ni))
		}
		if no := reflectx.ValueOf(fn).Type().NumOut(); no != 0 {
			panic(fmtx.Errorf("callback function must have 0 output parameters, found %d", no))
		}

		cp := jsonpath.New("")
		if err := cp.Parse(fmtx.Sprintf("{%s}", jp)); err != nil {
			panic(err)
		}
		cr, err := cp.FindResults(r)
		if err != nil {
			// errors are expected if a path is not found
			return
		}
		for _, cv := range cr[0] {
			arg0t := reflectx.ValueOf(fn).Type().In(0)

			var args []reflectx.Value
			if cv.Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv}
			} else if cv.CanAddr() && cv.Addr().Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv.Addr()}
			} else {
				panic(fmtx.Errorf("callback function must accept value of type %q, found type %q", cv.Type(), arg0t))
			}

			reflectx.ValueOf(fn).Call(args)
		}
	})
}

// DieWith returns a new die after passing the current die to the callback function. The passed die is mutable.
func (d *PodsMetricSourceDie) DieWith(fns ...func(d *PodsMetricSourceDie)) *PodsMetricSourceDie {
	nd := PodsMetricSourceBlank.DieFeed(d.DieRelease()).DieImmutable(false)
	for _, fn := range fns {
		if fn != nil {
			fn(nd)
		}
	}
	return d.DieFeed(nd.DieRelease())
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *PodsMetricSourceDie) DeepCopy() *PodsMetricSourceDie {
	r := *d.r.DeepCopy()
	return &PodsMetricSourceDie{
		mutable: d.mutable,
		r:       r,
	}
}

// metric identifies the target metric by name and selector
func (d *PodsMetricSourceDie) Metric(v autoscalingv2.MetricIdentifier) *PodsMetricSourceDie {
	return d.DieStamp(func(r *autoscalingv2.PodsMetricSource) {
		r.Metric = v
	})
}

// target specifies the target value for the given metric
func (d *PodsMetricSourceDie) Target(v autoscalingv2.MetricTarget) *PodsMetricSourceDie {
	return d.DieStamp(func(r *autoscalingv2.PodsMetricSource) {
		r.Target = v
	})
}

var ResourceMetricSourceBlank = (&ResourceMetricSourceDie{}).DieFeed(autoscalingv2.ResourceMetricSource{})

type ResourceMetricSourceDie struct {
	mutable bool
	r       autoscalingv2.ResourceMetricSource
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *ResourceMetricSourceDie) DieImmutable(immutable bool) *ResourceMetricSourceDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *ResourceMetricSourceDie) DieFeed(r autoscalingv2.ResourceMetricSource) *ResourceMetricSourceDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &ResourceMetricSourceDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *ResourceMetricSourceDie) DieFeedPtr(r *autoscalingv2.ResourceMetricSource) *ResourceMetricSourceDie {
	if r == nil {
		r = &autoscalingv2.ResourceMetricSource{}
	}
	return d.DieFeed(*r)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *ResourceMetricSourceDie) DieFeedJSON(j []byte) *ResourceMetricSourceDie {
	r := autoscalingv2.ResourceMetricSource{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *ResourceMetricSourceDie) DieFeedYAML(y []byte) *ResourceMetricSourceDie {
	r := autoscalingv2.ResourceMetricSource{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *ResourceMetricSourceDie) DieFeedYAMLFile(name string) *ResourceMetricSourceDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *ResourceMetricSourceDie) DieFeedRawExtension(raw runtime.RawExtension) *ResourceMetricSourceDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *ResourceMetricSourceDie) DieRelease() autoscalingv2.ResourceMetricSource {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *ResourceMetricSourceDie) DieReleasePtr() *autoscalingv2.ResourceMetricSource {
	r := d.DieRelease()
	return &r
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *ResourceMetricSourceDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *ResourceMetricSourceDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *ResourceMetricSourceDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *ResourceMetricSourceDie) DieStamp(fn func(r *autoscalingv2.ResourceMetricSource)) *ResourceMetricSourceDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// Experimental: DieStampAt uses a JSON path (http://goessner.net/articles/JsonPath/) expression to stamp portions of the resource. The callback is invoked with each JSON path match. Panics if the callback function does not accept a single argument of the same type or a pointer to that type as found on the resource at the target location.
//
// Future iterations will improve type coercion from the resource to the callback argument.
func (d *ResourceMetricSourceDie) DieStampAt(jp string, fn interface{}) *ResourceMetricSourceDie {
	return d.DieStamp(func(r *autoscalingv2.ResourceMetricSource) {
		if ni := reflectx.ValueOf(fn).Type().NumIn(); ni != 1 {
			panic(fmtx.Errorf("callback function must have 1 input parameters, found %d", ni))
		}
		if no := reflectx.ValueOf(fn).Type().NumOut(); no != 0 {
			panic(fmtx.Errorf("callback function must have 0 output parameters, found %d", no))
		}

		cp := jsonpath.New("")
		if err := cp.Parse(fmtx.Sprintf("{%s}", jp)); err != nil {
			panic(err)
		}
		cr, err := cp.FindResults(r)
		if err != nil {
			// errors are expected if a path is not found
			return
		}
		for _, cv := range cr[0] {
			arg0t := reflectx.ValueOf(fn).Type().In(0)

			var args []reflectx.Value
			if cv.Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv}
			} else if cv.CanAddr() && cv.Addr().Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv.Addr()}
			} else {
				panic(fmtx.Errorf("callback function must accept value of type %q, found type %q", cv.Type(), arg0t))
			}

			reflectx.ValueOf(fn).Call(args)
		}
	})
}

// DieWith returns a new die after passing the current die to the callback function. The passed die is mutable.
func (d *ResourceMetricSourceDie) DieWith(fns ...func(d *ResourceMetricSourceDie)) *ResourceMetricSourceDie {
	nd := ResourceMetricSourceBlank.DieFeed(d.DieRelease()).DieImmutable(false)
	for _, fn := range fns {
		if fn != nil {
			fn(nd)
		}
	}
	return d.DieFeed(nd.DieRelease())
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *ResourceMetricSourceDie) DeepCopy() *ResourceMetricSourceDie {
	r := *d.r.DeepCopy()
	return &ResourceMetricSourceDie{
		mutable: d.mutable,
		r:       r,
	}
}

// name is the name of the resource in question.
func (d *ResourceMetricSourceDie) Name(v corev1.ResourceName) *ResourceMetricSourceDie {
	return d.DieStamp(func(r *autoscalingv2.ResourceMetricSource) {
		r.Name = v
	})
}

// target specifies the target value for the given metric
func (d *ResourceMetricSourceDie) Target(v autoscalingv2.MetricTarget) *ResourceMetricSourceDie {
	return d.DieStamp(func(r *autoscalingv2.ResourceMetricSource) {
		r.Target = v
	})
}

var ContainerResourceMetricSourceBlank = (&ContainerResourceMetricSourceDie{}).DieFeed(autoscalingv2.ContainerResourceMetricSource{})

type ContainerResourceMetricSourceDie struct {
	mutable bool
	r       autoscalingv2.ContainerResourceMetricSource
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *ContainerResourceMetricSourceDie) DieImmutable(immutable bool) *ContainerResourceMetricSourceDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *ContainerResourceMetricSourceDie) DieFeed(r autoscalingv2.ContainerResourceMetricSource) *ContainerResourceMetricSourceDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &ContainerResourceMetricSourceDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *ContainerResourceMetricSourceDie) DieFeedPtr(r *autoscalingv2.ContainerResourceMetricSource) *ContainerResourceMetricSourceDie {
	if r == nil {
		r = &autoscalingv2.ContainerResourceMetricSource{}
	}
	return d.DieFeed(*r)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *ContainerResourceMetricSourceDie) DieFeedJSON(j []byte) *ContainerResourceMetricSourceDie {
	r := autoscalingv2.ContainerResourceMetricSource{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *ContainerResourceMetricSourceDie) DieFeedYAML(y []byte) *ContainerResourceMetricSourceDie {
	r := autoscalingv2.ContainerResourceMetricSource{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *ContainerResourceMetricSourceDie) DieFeedYAMLFile(name string) *ContainerResourceMetricSourceDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *ContainerResourceMetricSourceDie) DieFeedRawExtension(raw runtime.RawExtension) *ContainerResourceMetricSourceDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *ContainerResourceMetricSourceDie) DieRelease() autoscalingv2.ContainerResourceMetricSource {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *ContainerResourceMetricSourceDie) DieReleasePtr() *autoscalingv2.ContainerResourceMetricSource {
	r := d.DieRelease()
	return &r
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *ContainerResourceMetricSourceDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *ContainerResourceMetricSourceDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *ContainerResourceMetricSourceDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *ContainerResourceMetricSourceDie) DieStamp(fn func(r *autoscalingv2.ContainerResourceMetricSource)) *ContainerResourceMetricSourceDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// Experimental: DieStampAt uses a JSON path (http://goessner.net/articles/JsonPath/) expression to stamp portions of the resource. The callback is invoked with each JSON path match. Panics if the callback function does not accept a single argument of the same type or a pointer to that type as found on the resource at the target location.
//
// Future iterations will improve type coercion from the resource to the callback argument.
func (d *ContainerResourceMetricSourceDie) DieStampAt(jp string, fn interface{}) *ContainerResourceMetricSourceDie {
	return d.DieStamp(func(r *autoscalingv2.ContainerResourceMetricSource) {
		if ni := reflectx.ValueOf(fn).Type().NumIn(); ni != 1 {
			panic(fmtx.Errorf("callback function must have 1 input parameters, found %d", ni))
		}
		if no := reflectx.ValueOf(fn).Type().NumOut(); no != 0 {
			panic(fmtx.Errorf("callback function must have 0 output parameters, found %d", no))
		}

		cp := jsonpath.New("")
		if err := cp.Parse(fmtx.Sprintf("{%s}", jp)); err != nil {
			panic(err)
		}
		cr, err := cp.FindResults(r)
		if err != nil {
			// errors are expected if a path is not found
			return
		}
		for _, cv := range cr[0] {
			arg0t := reflectx.ValueOf(fn).Type().In(0)

			var args []reflectx.Value
			if cv.Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv}
			} else if cv.CanAddr() && cv.Addr().Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv.Addr()}
			} else {
				panic(fmtx.Errorf("callback function must accept value of type %q, found type %q", cv.Type(), arg0t))
			}

			reflectx.ValueOf(fn).Call(args)
		}
	})
}

// DieWith returns a new die after passing the current die to the callback function. The passed die is mutable.
func (d *ContainerResourceMetricSourceDie) DieWith(fns ...func(d *ContainerResourceMetricSourceDie)) *ContainerResourceMetricSourceDie {
	nd := ContainerResourceMetricSourceBlank.DieFeed(d.DieRelease()).DieImmutable(false)
	for _, fn := range fns {
		if fn != nil {
			fn(nd)
		}
	}
	return d.DieFeed(nd.DieRelease())
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *ContainerResourceMetricSourceDie) DeepCopy() *ContainerResourceMetricSourceDie {
	r := *d.r.DeepCopy()
	return &ContainerResourceMetricSourceDie{
		mutable: d.mutable,
		r:       r,
	}
}

// name is the name of the resource in question.
func (d *ContainerResourceMetricSourceDie) Name(v corev1.ResourceName) *ContainerResourceMetricSourceDie {
	return d.DieStamp(func(r *autoscalingv2.ContainerResourceMetricSource) {
		r.Name = v
	})
}

// target specifies the target value for the given metric
func (d *ContainerResourceMetricSourceDie) Target(v autoscalingv2.MetricTarget) *ContainerResourceMetricSourceDie {
	return d.DieStamp(func(r *autoscalingv2.ContainerResourceMetricSource) {
		r.Target = v
	})
}

// container is the name of the container in the pods of the scaling target
func (d *ContainerResourceMetricSourceDie) Container(v string) *ContainerResourceMetricSourceDie {
	return d.DieStamp(func(r *autoscalingv2.ContainerResourceMetricSource) {
		r.Container = v
	})
}

var ExternalMetricSourceBlank = (&ExternalMetricSourceDie{}).DieFeed(autoscalingv2.ExternalMetricSource{})

type ExternalMetricSourceDie struct {
	mutable bool
	r       autoscalingv2.ExternalMetricSource
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *ExternalMetricSourceDie) DieImmutable(immutable bool) *ExternalMetricSourceDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *ExternalMetricSourceDie) DieFeed(r autoscalingv2.ExternalMetricSource) *ExternalMetricSourceDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &ExternalMetricSourceDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *ExternalMetricSourceDie) DieFeedPtr(r *autoscalingv2.ExternalMetricSource) *ExternalMetricSourceDie {
	if r == nil {
		r = &autoscalingv2.ExternalMetricSource{}
	}
	return d.DieFeed(*r)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *ExternalMetricSourceDie) DieFeedJSON(j []byte) *ExternalMetricSourceDie {
	r := autoscalingv2.ExternalMetricSource{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *ExternalMetricSourceDie) DieFeedYAML(y []byte) *ExternalMetricSourceDie {
	r := autoscalingv2.ExternalMetricSource{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *ExternalMetricSourceDie) DieFeedYAMLFile(name string) *ExternalMetricSourceDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *ExternalMetricSourceDie) DieFeedRawExtension(raw runtime.RawExtension) *ExternalMetricSourceDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *ExternalMetricSourceDie) DieRelease() autoscalingv2.ExternalMetricSource {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *ExternalMetricSourceDie) DieReleasePtr() *autoscalingv2.ExternalMetricSource {
	r := d.DieRelease()
	return &r
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *ExternalMetricSourceDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *ExternalMetricSourceDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *ExternalMetricSourceDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *ExternalMetricSourceDie) DieStamp(fn func(r *autoscalingv2.ExternalMetricSource)) *ExternalMetricSourceDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// Experimental: DieStampAt uses a JSON path (http://goessner.net/articles/JsonPath/) expression to stamp portions of the resource. The callback is invoked with each JSON path match. Panics if the callback function does not accept a single argument of the same type or a pointer to that type as found on the resource at the target location.
//
// Future iterations will improve type coercion from the resource to the callback argument.
func (d *ExternalMetricSourceDie) DieStampAt(jp string, fn interface{}) *ExternalMetricSourceDie {
	return d.DieStamp(func(r *autoscalingv2.ExternalMetricSource) {
		if ni := reflectx.ValueOf(fn).Type().NumIn(); ni != 1 {
			panic(fmtx.Errorf("callback function must have 1 input parameters, found %d", ni))
		}
		if no := reflectx.ValueOf(fn).Type().NumOut(); no != 0 {
			panic(fmtx.Errorf("callback function must have 0 output parameters, found %d", no))
		}

		cp := jsonpath.New("")
		if err := cp.Parse(fmtx.Sprintf("{%s}", jp)); err != nil {
			panic(err)
		}
		cr, err := cp.FindResults(r)
		if err != nil {
			// errors are expected if a path is not found
			return
		}
		for _, cv := range cr[0] {
			arg0t := reflectx.ValueOf(fn).Type().In(0)

			var args []reflectx.Value
			if cv.Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv}
			} else if cv.CanAddr() && cv.Addr().Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv.Addr()}
			} else {
				panic(fmtx.Errorf("callback function must accept value of type %q, found type %q", cv.Type(), arg0t))
			}

			reflectx.ValueOf(fn).Call(args)
		}
	})
}

// DieWith returns a new die after passing the current die to the callback function. The passed die is mutable.
func (d *ExternalMetricSourceDie) DieWith(fns ...func(d *ExternalMetricSourceDie)) *ExternalMetricSourceDie {
	nd := ExternalMetricSourceBlank.DieFeed(d.DieRelease()).DieImmutable(false)
	for _, fn := range fns {
		if fn != nil {
			fn(nd)
		}
	}
	return d.DieFeed(nd.DieRelease())
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *ExternalMetricSourceDie) DeepCopy() *ExternalMetricSourceDie {
	r := *d.r.DeepCopy()
	return &ExternalMetricSourceDie{
		mutable: d.mutable,
		r:       r,
	}
}

// metric identifies the target metric by name and selector
func (d *ExternalMetricSourceDie) Metric(v autoscalingv2.MetricIdentifier) *ExternalMetricSourceDie {
	return d.DieStamp(func(r *autoscalingv2.ExternalMetricSource) {
		r.Metric = v
	})
}

// target specifies the target value for the given metric
func (d *ExternalMetricSourceDie) Target(v autoscalingv2.MetricTarget) *ExternalMetricSourceDie {
	return d.DieStamp(func(r *autoscalingv2.ExternalMetricSource) {
		r.Target = v
	})
}

var HorizontalPodAutoscalerBehaviorBlank = (&HorizontalPodAutoscalerBehaviorDie{}).DieFeed(autoscalingv2.HorizontalPodAutoscalerBehavior{})

type HorizontalPodAutoscalerBehaviorDie struct {
	mutable bool
	r       autoscalingv2.HorizontalPodAutoscalerBehavior
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *HorizontalPodAutoscalerBehaviorDie) DieImmutable(immutable bool) *HorizontalPodAutoscalerBehaviorDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *HorizontalPodAutoscalerBehaviorDie) DieFeed(r autoscalingv2.HorizontalPodAutoscalerBehavior) *HorizontalPodAutoscalerBehaviorDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &HorizontalPodAutoscalerBehaviorDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *HorizontalPodAutoscalerBehaviorDie) DieFeedPtr(r *autoscalingv2.HorizontalPodAutoscalerBehavior) *HorizontalPodAutoscalerBehaviorDie {
	if r == nil {
		r = &autoscalingv2.HorizontalPodAutoscalerBehavior{}
	}
	return d.DieFeed(*r)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *HorizontalPodAutoscalerBehaviorDie) DieFeedJSON(j []byte) *HorizontalPodAutoscalerBehaviorDie {
	r := autoscalingv2.HorizontalPodAutoscalerBehavior{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *HorizontalPodAutoscalerBehaviorDie) DieFeedYAML(y []byte) *HorizontalPodAutoscalerBehaviorDie {
	r := autoscalingv2.HorizontalPodAutoscalerBehavior{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *HorizontalPodAutoscalerBehaviorDie) DieFeedYAMLFile(name string) *HorizontalPodAutoscalerBehaviorDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *HorizontalPodAutoscalerBehaviorDie) DieFeedRawExtension(raw runtime.RawExtension) *HorizontalPodAutoscalerBehaviorDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *HorizontalPodAutoscalerBehaviorDie) DieRelease() autoscalingv2.HorizontalPodAutoscalerBehavior {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *HorizontalPodAutoscalerBehaviorDie) DieReleasePtr() *autoscalingv2.HorizontalPodAutoscalerBehavior {
	r := d.DieRelease()
	return &r
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *HorizontalPodAutoscalerBehaviorDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *HorizontalPodAutoscalerBehaviorDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *HorizontalPodAutoscalerBehaviorDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *HorizontalPodAutoscalerBehaviorDie) DieStamp(fn func(r *autoscalingv2.HorizontalPodAutoscalerBehavior)) *HorizontalPodAutoscalerBehaviorDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// Experimental: DieStampAt uses a JSON path (http://goessner.net/articles/JsonPath/) expression to stamp portions of the resource. The callback is invoked with each JSON path match. Panics if the callback function does not accept a single argument of the same type or a pointer to that type as found on the resource at the target location.
//
// Future iterations will improve type coercion from the resource to the callback argument.
func (d *HorizontalPodAutoscalerBehaviorDie) DieStampAt(jp string, fn interface{}) *HorizontalPodAutoscalerBehaviorDie {
	return d.DieStamp(func(r *autoscalingv2.HorizontalPodAutoscalerBehavior) {
		if ni := reflectx.ValueOf(fn).Type().NumIn(); ni != 1 {
			panic(fmtx.Errorf("callback function must have 1 input parameters, found %d", ni))
		}
		if no := reflectx.ValueOf(fn).Type().NumOut(); no != 0 {
			panic(fmtx.Errorf("callback function must have 0 output parameters, found %d", no))
		}

		cp := jsonpath.New("")
		if err := cp.Parse(fmtx.Sprintf("{%s}", jp)); err != nil {
			panic(err)
		}
		cr, err := cp.FindResults(r)
		if err != nil {
			// errors are expected if a path is not found
			return
		}
		for _, cv := range cr[0] {
			arg0t := reflectx.ValueOf(fn).Type().In(0)

			var args []reflectx.Value
			if cv.Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv}
			} else if cv.CanAddr() && cv.Addr().Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv.Addr()}
			} else {
				panic(fmtx.Errorf("callback function must accept value of type %q, found type %q", cv.Type(), arg0t))
			}

			reflectx.ValueOf(fn).Call(args)
		}
	})
}

// DieWith returns a new die after passing the current die to the callback function. The passed die is mutable.
func (d *HorizontalPodAutoscalerBehaviorDie) DieWith(fns ...func(d *HorizontalPodAutoscalerBehaviorDie)) *HorizontalPodAutoscalerBehaviorDie {
	nd := HorizontalPodAutoscalerBehaviorBlank.DieFeed(d.DieRelease()).DieImmutable(false)
	for _, fn := range fns {
		if fn != nil {
			fn(nd)
		}
	}
	return d.DieFeed(nd.DieRelease())
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *HorizontalPodAutoscalerBehaviorDie) DeepCopy() *HorizontalPodAutoscalerBehaviorDie {
	r := *d.r.DeepCopy()
	return &HorizontalPodAutoscalerBehaviorDie{
		mutable: d.mutable,
		r:       r,
	}
}

// scaleUp is scaling policy for scaling Up.
//
// If not set, the default value is the higher of:
//
// * increase no more than 4 pods per 60 seconds
//
// * double the number of pods per 60 seconds
//
// No stabilization is used.
func (d *HorizontalPodAutoscalerBehaviorDie) ScaleUp(v *autoscalingv2.HPAScalingRules) *HorizontalPodAutoscalerBehaviorDie {
	return d.DieStamp(func(r *autoscalingv2.HorizontalPodAutoscalerBehavior) {
		r.ScaleUp = v
	})
}

// scaleDown is scaling policy for scaling Down.
//
// # If not set, the default value is to allow to scale down to minReplicas pods, with a
//
// 300 second stabilization window (i.e., the highest recommendation for
//
// the last 300sec is used).
func (d *HorizontalPodAutoscalerBehaviorDie) ScaleDown(v *autoscalingv2.HPAScalingRules) *HorizontalPodAutoscalerBehaviorDie {
	return d.DieStamp(func(r *autoscalingv2.HorizontalPodAutoscalerBehavior) {
		r.ScaleDown = v
	})
}

var HPAScalingRulesBlank = (&HPAScalingRulesDie{}).DieFeed(autoscalingv2.HPAScalingRules{})

type HPAScalingRulesDie struct {
	mutable bool
	r       autoscalingv2.HPAScalingRules
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *HPAScalingRulesDie) DieImmutable(immutable bool) *HPAScalingRulesDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *HPAScalingRulesDie) DieFeed(r autoscalingv2.HPAScalingRules) *HPAScalingRulesDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &HPAScalingRulesDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *HPAScalingRulesDie) DieFeedPtr(r *autoscalingv2.HPAScalingRules) *HPAScalingRulesDie {
	if r == nil {
		r = &autoscalingv2.HPAScalingRules{}
	}
	return d.DieFeed(*r)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *HPAScalingRulesDie) DieFeedJSON(j []byte) *HPAScalingRulesDie {
	r := autoscalingv2.HPAScalingRules{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *HPAScalingRulesDie) DieFeedYAML(y []byte) *HPAScalingRulesDie {
	r := autoscalingv2.HPAScalingRules{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *HPAScalingRulesDie) DieFeedYAMLFile(name string) *HPAScalingRulesDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *HPAScalingRulesDie) DieFeedRawExtension(raw runtime.RawExtension) *HPAScalingRulesDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *HPAScalingRulesDie) DieRelease() autoscalingv2.HPAScalingRules {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *HPAScalingRulesDie) DieReleasePtr() *autoscalingv2.HPAScalingRules {
	r := d.DieRelease()
	return &r
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *HPAScalingRulesDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *HPAScalingRulesDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *HPAScalingRulesDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *HPAScalingRulesDie) DieStamp(fn func(r *autoscalingv2.HPAScalingRules)) *HPAScalingRulesDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// Experimental: DieStampAt uses a JSON path (http://goessner.net/articles/JsonPath/) expression to stamp portions of the resource. The callback is invoked with each JSON path match. Panics if the callback function does not accept a single argument of the same type or a pointer to that type as found on the resource at the target location.
//
// Future iterations will improve type coercion from the resource to the callback argument.
func (d *HPAScalingRulesDie) DieStampAt(jp string, fn interface{}) *HPAScalingRulesDie {
	return d.DieStamp(func(r *autoscalingv2.HPAScalingRules) {
		if ni := reflectx.ValueOf(fn).Type().NumIn(); ni != 1 {
			panic(fmtx.Errorf("callback function must have 1 input parameters, found %d", ni))
		}
		if no := reflectx.ValueOf(fn).Type().NumOut(); no != 0 {
			panic(fmtx.Errorf("callback function must have 0 output parameters, found %d", no))
		}

		cp := jsonpath.New("")
		if err := cp.Parse(fmtx.Sprintf("{%s}", jp)); err != nil {
			panic(err)
		}
		cr, err := cp.FindResults(r)
		if err != nil {
			// errors are expected if a path is not found
			return
		}
		for _, cv := range cr[0] {
			arg0t := reflectx.ValueOf(fn).Type().In(0)

			var args []reflectx.Value
			if cv.Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv}
			} else if cv.CanAddr() && cv.Addr().Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv.Addr()}
			} else {
				panic(fmtx.Errorf("callback function must accept value of type %q, found type %q", cv.Type(), arg0t))
			}

			reflectx.ValueOf(fn).Call(args)
		}
	})
}

// DieWith returns a new die after passing the current die to the callback function. The passed die is mutable.
func (d *HPAScalingRulesDie) DieWith(fns ...func(d *HPAScalingRulesDie)) *HPAScalingRulesDie {
	nd := HPAScalingRulesBlank.DieFeed(d.DieRelease()).DieImmutable(false)
	for _, fn := range fns {
		if fn != nil {
			fn(nd)
		}
	}
	return d.DieFeed(nd.DieRelease())
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *HPAScalingRulesDie) DeepCopy() *HPAScalingRulesDie {
	r := *d.r.DeepCopy()
	return &HPAScalingRulesDie{
		mutable: d.mutable,
		r:       r,
	}
}

// stabilizationWindowSeconds is the number of seconds for which past recommendations should be
//
// considered while scaling up or scaling down.
//
// StabilizationWindowSeconds must be greater than or equal to zero and less than or equal to 3600 (one hour).
//
// If not set, use the default values:
//
// - For scale up: 0 (i.e. no stabilization is done).
//
// - For scale down: 300 (i.e. the stabilization window is 300 seconds long).
func (d *HPAScalingRulesDie) StabilizationWindowSeconds(v *int32) *HPAScalingRulesDie {
	return d.DieStamp(func(r *autoscalingv2.HPAScalingRules) {
		r.StabilizationWindowSeconds = v
	})
}

// selectPolicy is used to specify which policy should be used.
//
// If not set, the default value Max is used.
func (d *HPAScalingRulesDie) SelectPolicy(v *autoscalingv2.ScalingPolicySelect) *HPAScalingRulesDie {
	return d.DieStamp(func(r *autoscalingv2.HPAScalingRules) {
		r.SelectPolicy = v
	})
}

// policies is a list of potential scaling polices which can be used during scaling.
//
// At least one policy must be specified, otherwise the HPAScalingRules will be discarded as invalid
func (d *HPAScalingRulesDie) Policies(v ...autoscalingv2.HPAScalingPolicy) *HPAScalingRulesDie {
	return d.DieStamp(func(r *autoscalingv2.HPAScalingRules) {
		r.Policies = v
	})
}

var HPAScalingPolicyBlank = (&HPAScalingPolicyDie{}).DieFeed(autoscalingv2.HPAScalingPolicy{})

type HPAScalingPolicyDie struct {
	mutable bool
	r       autoscalingv2.HPAScalingPolicy
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *HPAScalingPolicyDie) DieImmutable(immutable bool) *HPAScalingPolicyDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *HPAScalingPolicyDie) DieFeed(r autoscalingv2.HPAScalingPolicy) *HPAScalingPolicyDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &HPAScalingPolicyDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *HPAScalingPolicyDie) DieFeedPtr(r *autoscalingv2.HPAScalingPolicy) *HPAScalingPolicyDie {
	if r == nil {
		r = &autoscalingv2.HPAScalingPolicy{}
	}
	return d.DieFeed(*r)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *HPAScalingPolicyDie) DieFeedJSON(j []byte) *HPAScalingPolicyDie {
	r := autoscalingv2.HPAScalingPolicy{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *HPAScalingPolicyDie) DieFeedYAML(y []byte) *HPAScalingPolicyDie {
	r := autoscalingv2.HPAScalingPolicy{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *HPAScalingPolicyDie) DieFeedYAMLFile(name string) *HPAScalingPolicyDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *HPAScalingPolicyDie) DieFeedRawExtension(raw runtime.RawExtension) *HPAScalingPolicyDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *HPAScalingPolicyDie) DieRelease() autoscalingv2.HPAScalingPolicy {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *HPAScalingPolicyDie) DieReleasePtr() *autoscalingv2.HPAScalingPolicy {
	r := d.DieRelease()
	return &r
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *HPAScalingPolicyDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *HPAScalingPolicyDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *HPAScalingPolicyDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *HPAScalingPolicyDie) DieStamp(fn func(r *autoscalingv2.HPAScalingPolicy)) *HPAScalingPolicyDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// Experimental: DieStampAt uses a JSON path (http://goessner.net/articles/JsonPath/) expression to stamp portions of the resource. The callback is invoked with each JSON path match. Panics if the callback function does not accept a single argument of the same type or a pointer to that type as found on the resource at the target location.
//
// Future iterations will improve type coercion from the resource to the callback argument.
func (d *HPAScalingPolicyDie) DieStampAt(jp string, fn interface{}) *HPAScalingPolicyDie {
	return d.DieStamp(func(r *autoscalingv2.HPAScalingPolicy) {
		if ni := reflectx.ValueOf(fn).Type().NumIn(); ni != 1 {
			panic(fmtx.Errorf("callback function must have 1 input parameters, found %d", ni))
		}
		if no := reflectx.ValueOf(fn).Type().NumOut(); no != 0 {
			panic(fmtx.Errorf("callback function must have 0 output parameters, found %d", no))
		}

		cp := jsonpath.New("")
		if err := cp.Parse(fmtx.Sprintf("{%s}", jp)); err != nil {
			panic(err)
		}
		cr, err := cp.FindResults(r)
		if err != nil {
			// errors are expected if a path is not found
			return
		}
		for _, cv := range cr[0] {
			arg0t := reflectx.ValueOf(fn).Type().In(0)

			var args []reflectx.Value
			if cv.Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv}
			} else if cv.CanAddr() && cv.Addr().Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv.Addr()}
			} else {
				panic(fmtx.Errorf("callback function must accept value of type %q, found type %q", cv.Type(), arg0t))
			}

			reflectx.ValueOf(fn).Call(args)
		}
	})
}

// DieWith returns a new die after passing the current die to the callback function. The passed die is mutable.
func (d *HPAScalingPolicyDie) DieWith(fns ...func(d *HPAScalingPolicyDie)) *HPAScalingPolicyDie {
	nd := HPAScalingPolicyBlank.DieFeed(d.DieRelease()).DieImmutable(false)
	for _, fn := range fns {
		if fn != nil {
			fn(nd)
		}
	}
	return d.DieFeed(nd.DieRelease())
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *HPAScalingPolicyDie) DeepCopy() *HPAScalingPolicyDie {
	r := *d.r.DeepCopy()
	return &HPAScalingPolicyDie{
		mutable: d.mutable,
		r:       r,
	}
}

// type is used to specify the scaling policy.
func (d *HPAScalingPolicyDie) Type(v autoscalingv2.HPAScalingPolicyType) *HPAScalingPolicyDie {
	return d.DieStamp(func(r *autoscalingv2.HPAScalingPolicy) {
		r.Type = v
	})
}

// value contains the amount of change which is permitted by the policy.
//
// It must be greater than zero
func (d *HPAScalingPolicyDie) Value(v int32) *HPAScalingPolicyDie {
	return d.DieStamp(func(r *autoscalingv2.HPAScalingPolicy) {
		r.Value = v
	})
}

// periodSeconds specifies the window of time for which the policy should hold true.
//
// PeriodSeconds must be greater than zero and less than or equal to 1800 (30 min).
func (d *HPAScalingPolicyDie) PeriodSeconds(v int32) *HPAScalingPolicyDie {
	return d.DieStamp(func(r *autoscalingv2.HPAScalingPolicy) {
		r.PeriodSeconds = v
	})
}

var HorizontalPodAutoscalerStatusBlank = (&HorizontalPodAutoscalerStatusDie{}).DieFeed(autoscalingv2.HorizontalPodAutoscalerStatus{})

type HorizontalPodAutoscalerStatusDie struct {
	mutable bool
	r       autoscalingv2.HorizontalPodAutoscalerStatus
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *HorizontalPodAutoscalerStatusDie) DieImmutable(immutable bool) *HorizontalPodAutoscalerStatusDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *HorizontalPodAutoscalerStatusDie) DieFeed(r autoscalingv2.HorizontalPodAutoscalerStatus) *HorizontalPodAutoscalerStatusDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &HorizontalPodAutoscalerStatusDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *HorizontalPodAutoscalerStatusDie) DieFeedPtr(r *autoscalingv2.HorizontalPodAutoscalerStatus) *HorizontalPodAutoscalerStatusDie {
	if r == nil {
		r = &autoscalingv2.HorizontalPodAutoscalerStatus{}
	}
	return d.DieFeed(*r)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *HorizontalPodAutoscalerStatusDie) DieFeedJSON(j []byte) *HorizontalPodAutoscalerStatusDie {
	r := autoscalingv2.HorizontalPodAutoscalerStatus{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *HorizontalPodAutoscalerStatusDie) DieFeedYAML(y []byte) *HorizontalPodAutoscalerStatusDie {
	r := autoscalingv2.HorizontalPodAutoscalerStatus{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *HorizontalPodAutoscalerStatusDie) DieFeedYAMLFile(name string) *HorizontalPodAutoscalerStatusDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *HorizontalPodAutoscalerStatusDie) DieFeedRawExtension(raw runtime.RawExtension) *HorizontalPodAutoscalerStatusDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *HorizontalPodAutoscalerStatusDie) DieRelease() autoscalingv2.HorizontalPodAutoscalerStatus {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *HorizontalPodAutoscalerStatusDie) DieReleasePtr() *autoscalingv2.HorizontalPodAutoscalerStatus {
	r := d.DieRelease()
	return &r
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *HorizontalPodAutoscalerStatusDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *HorizontalPodAutoscalerStatusDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *HorizontalPodAutoscalerStatusDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *HorizontalPodAutoscalerStatusDie) DieStamp(fn func(r *autoscalingv2.HorizontalPodAutoscalerStatus)) *HorizontalPodAutoscalerStatusDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// Experimental: DieStampAt uses a JSON path (http://goessner.net/articles/JsonPath/) expression to stamp portions of the resource. The callback is invoked with each JSON path match. Panics if the callback function does not accept a single argument of the same type or a pointer to that type as found on the resource at the target location.
//
// Future iterations will improve type coercion from the resource to the callback argument.
func (d *HorizontalPodAutoscalerStatusDie) DieStampAt(jp string, fn interface{}) *HorizontalPodAutoscalerStatusDie {
	return d.DieStamp(func(r *autoscalingv2.HorizontalPodAutoscalerStatus) {
		if ni := reflectx.ValueOf(fn).Type().NumIn(); ni != 1 {
			panic(fmtx.Errorf("callback function must have 1 input parameters, found %d", ni))
		}
		if no := reflectx.ValueOf(fn).Type().NumOut(); no != 0 {
			panic(fmtx.Errorf("callback function must have 0 output parameters, found %d", no))
		}

		cp := jsonpath.New("")
		if err := cp.Parse(fmtx.Sprintf("{%s}", jp)); err != nil {
			panic(err)
		}
		cr, err := cp.FindResults(r)
		if err != nil {
			// errors are expected if a path is not found
			return
		}
		for _, cv := range cr[0] {
			arg0t := reflectx.ValueOf(fn).Type().In(0)

			var args []reflectx.Value
			if cv.Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv}
			} else if cv.CanAddr() && cv.Addr().Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv.Addr()}
			} else {
				panic(fmtx.Errorf("callback function must accept value of type %q, found type %q", cv.Type(), arg0t))
			}

			reflectx.ValueOf(fn).Call(args)
		}
	})
}

// DieWith returns a new die after passing the current die to the callback function. The passed die is mutable.
func (d *HorizontalPodAutoscalerStatusDie) DieWith(fns ...func(d *HorizontalPodAutoscalerStatusDie)) *HorizontalPodAutoscalerStatusDie {
	nd := HorizontalPodAutoscalerStatusBlank.DieFeed(d.DieRelease()).DieImmutable(false)
	for _, fn := range fns {
		if fn != nil {
			fn(nd)
		}
	}
	return d.DieFeed(nd.DieRelease())
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *HorizontalPodAutoscalerStatusDie) DeepCopy() *HorizontalPodAutoscalerStatusDie {
	r := *d.r.DeepCopy()
	return &HorizontalPodAutoscalerStatusDie{
		mutable: d.mutable,
		r:       r,
	}
}

// observedGeneration is the most recent generation observed by this autoscaler.
func (d *HorizontalPodAutoscalerStatusDie) ObservedGeneration(v *int64) *HorizontalPodAutoscalerStatusDie {
	return d.DieStamp(func(r *autoscalingv2.HorizontalPodAutoscalerStatus) {
		r.ObservedGeneration = v
	})
}

// lastScaleTime is the last time the HorizontalPodAutoscaler scaled the number of pods,
//
// used by the autoscaler to control how often the number of pods is changed.
func (d *HorizontalPodAutoscalerStatusDie) LastScaleTime(v *metav1.Time) *HorizontalPodAutoscalerStatusDie {
	return d.DieStamp(func(r *autoscalingv2.HorizontalPodAutoscalerStatus) {
		r.LastScaleTime = v
	})
}

// currentReplicas is current number of replicas of pods managed by this autoscaler,
//
// as last seen by the autoscaler.
func (d *HorizontalPodAutoscalerStatusDie) CurrentReplicas(v int32) *HorizontalPodAutoscalerStatusDie {
	return d.DieStamp(func(r *autoscalingv2.HorizontalPodAutoscalerStatus) {
		r.CurrentReplicas = v
	})
}

// desiredReplicas is the desired number of replicas of pods managed by this autoscaler,
//
// as last calculated by the autoscaler.
func (d *HorizontalPodAutoscalerStatusDie) DesiredReplicas(v int32) *HorizontalPodAutoscalerStatusDie {
	return d.DieStamp(func(r *autoscalingv2.HorizontalPodAutoscalerStatus) {
		r.DesiredReplicas = v
	})
}

// currentMetrics is the last read state of the metrics used by this autoscaler.
func (d *HorizontalPodAutoscalerStatusDie) CurrentMetrics(v ...autoscalingv2.MetricStatus) *HorizontalPodAutoscalerStatusDie {
	return d.DieStamp(func(r *autoscalingv2.HorizontalPodAutoscalerStatus) {
		r.CurrentMetrics = v
	})
}

// conditions is the set of conditions required for this autoscaler to scale its target,
//
// and indicates whether or not those conditions are met.
func (d *HorizontalPodAutoscalerStatusDie) Conditions(v ...autoscalingv2.HorizontalPodAutoscalerCondition) *HorizontalPodAutoscalerStatusDie {
	return d.DieStamp(func(r *autoscalingv2.HorizontalPodAutoscalerStatus) {
		r.Conditions = v
	})
}

var MetricStatusBlank = (&MetricStatusDie{}).DieFeed(autoscalingv2.MetricStatus{})

type MetricStatusDie struct {
	mutable bool
	r       autoscalingv2.MetricStatus
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *MetricStatusDie) DieImmutable(immutable bool) *MetricStatusDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *MetricStatusDie) DieFeed(r autoscalingv2.MetricStatus) *MetricStatusDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &MetricStatusDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *MetricStatusDie) DieFeedPtr(r *autoscalingv2.MetricStatus) *MetricStatusDie {
	if r == nil {
		r = &autoscalingv2.MetricStatus{}
	}
	return d.DieFeed(*r)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *MetricStatusDie) DieFeedJSON(j []byte) *MetricStatusDie {
	r := autoscalingv2.MetricStatus{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *MetricStatusDie) DieFeedYAML(y []byte) *MetricStatusDie {
	r := autoscalingv2.MetricStatus{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *MetricStatusDie) DieFeedYAMLFile(name string) *MetricStatusDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *MetricStatusDie) DieFeedRawExtension(raw runtime.RawExtension) *MetricStatusDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *MetricStatusDie) DieRelease() autoscalingv2.MetricStatus {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *MetricStatusDie) DieReleasePtr() *autoscalingv2.MetricStatus {
	r := d.DieRelease()
	return &r
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *MetricStatusDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *MetricStatusDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *MetricStatusDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *MetricStatusDie) DieStamp(fn func(r *autoscalingv2.MetricStatus)) *MetricStatusDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// Experimental: DieStampAt uses a JSON path (http://goessner.net/articles/JsonPath/) expression to stamp portions of the resource. The callback is invoked with each JSON path match. Panics if the callback function does not accept a single argument of the same type or a pointer to that type as found on the resource at the target location.
//
// Future iterations will improve type coercion from the resource to the callback argument.
func (d *MetricStatusDie) DieStampAt(jp string, fn interface{}) *MetricStatusDie {
	return d.DieStamp(func(r *autoscalingv2.MetricStatus) {
		if ni := reflectx.ValueOf(fn).Type().NumIn(); ni != 1 {
			panic(fmtx.Errorf("callback function must have 1 input parameters, found %d", ni))
		}
		if no := reflectx.ValueOf(fn).Type().NumOut(); no != 0 {
			panic(fmtx.Errorf("callback function must have 0 output parameters, found %d", no))
		}

		cp := jsonpath.New("")
		if err := cp.Parse(fmtx.Sprintf("{%s}", jp)); err != nil {
			panic(err)
		}
		cr, err := cp.FindResults(r)
		if err != nil {
			// errors are expected if a path is not found
			return
		}
		for _, cv := range cr[0] {
			arg0t := reflectx.ValueOf(fn).Type().In(0)

			var args []reflectx.Value
			if cv.Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv}
			} else if cv.CanAddr() && cv.Addr().Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv.Addr()}
			} else {
				panic(fmtx.Errorf("callback function must accept value of type %q, found type %q", cv.Type(), arg0t))
			}

			reflectx.ValueOf(fn).Call(args)
		}
	})
}

// DieWith returns a new die after passing the current die to the callback function. The passed die is mutable.
func (d *MetricStatusDie) DieWith(fns ...func(d *MetricStatusDie)) *MetricStatusDie {
	nd := MetricStatusBlank.DieFeed(d.DieRelease()).DieImmutable(false)
	for _, fn := range fns {
		if fn != nil {
			fn(nd)
		}
	}
	return d.DieFeed(nd.DieRelease())
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *MetricStatusDie) DeepCopy() *MetricStatusDie {
	r := *d.r.DeepCopy()
	return &MetricStatusDie{
		mutable: d.mutable,
		r:       r,
	}
}

// type is the type of metric source.  It will be one of "ContainerResource", "External",
//
// "Object", "Pods" or "Resource", each corresponds to a matching field in the object.
//
// Note: "ContainerResource" type is available on when the feature-gate
//
// HPAContainerMetrics is enabled
func (d *MetricStatusDie) Type(v autoscalingv2.MetricSourceType) *MetricStatusDie {
	return d.DieStamp(func(r *autoscalingv2.MetricStatus) {
		r.Type = v
	})
}

// object refers to a metric describing a single kubernetes object
//
// (for example, hits-per-second on an Ingress object).
func (d *MetricStatusDie) Object(v *autoscalingv2.ObjectMetricStatus) *MetricStatusDie {
	return d.DieStamp(func(r *autoscalingv2.MetricStatus) {
		r.Object = v
	})
}

// pods refers to a metric describing each pod in the current scale target
//
// (for example, transactions-processed-per-second).  The values will be
//
// averaged together before being compared to the target value.
func (d *MetricStatusDie) Pods(v *autoscalingv2.PodsMetricStatus) *MetricStatusDie {
	return d.DieStamp(func(r *autoscalingv2.MetricStatus) {
		r.Pods = v
	})
}

// resource refers to a resource metric (such as those specified in
//
// requests and limits) known to Kubernetes describing each pod in the
//
// current scale target (e.g. CPU or memory). Such metrics are built in to
//
// # Kubernetes, and have special scaling options on top of those available
//
// to normal per-pod metrics using the "pods" source.
func (d *MetricStatusDie) Resource(v *autoscalingv2.ResourceMetricStatus) *MetricStatusDie {
	return d.DieStamp(func(r *autoscalingv2.MetricStatus) {
		r.Resource = v
	})
}

// container resource refers to a resource metric (such as those specified in
//
// requests and limits) known to Kubernetes describing a single container in each pod in the
//
// current scale target (e.g. CPU or memory). Such metrics are built in to
//
// # Kubernetes, and have special scaling options on top of those available
//
// to normal per-pod metrics using the "pods" source.
func (d *MetricStatusDie) ContainerResource(v *autoscalingv2.ContainerResourceMetricStatus) *MetricStatusDie {
	return d.DieStamp(func(r *autoscalingv2.MetricStatus) {
		r.ContainerResource = v
	})
}

// external refers to a global metric that is not associated
//
// with any Kubernetes object. It allows autoscaling based on information
//
// coming from components running outside of cluster
//
// (for example length of queue in cloud messaging service, or
//
// QPS from loadbalancer running outside of cluster).
func (d *MetricStatusDie) External(v *autoscalingv2.ExternalMetricStatus) *MetricStatusDie {
	return d.DieStamp(func(r *autoscalingv2.MetricStatus) {
		r.External = v
	})
}

var ObjectMetricStatusBlank = (&ObjectMetricStatusDie{}).DieFeed(autoscalingv2.ObjectMetricStatus{})

type ObjectMetricStatusDie struct {
	mutable bool
	r       autoscalingv2.ObjectMetricStatus
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *ObjectMetricStatusDie) DieImmutable(immutable bool) *ObjectMetricStatusDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *ObjectMetricStatusDie) DieFeed(r autoscalingv2.ObjectMetricStatus) *ObjectMetricStatusDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &ObjectMetricStatusDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *ObjectMetricStatusDie) DieFeedPtr(r *autoscalingv2.ObjectMetricStatus) *ObjectMetricStatusDie {
	if r == nil {
		r = &autoscalingv2.ObjectMetricStatus{}
	}
	return d.DieFeed(*r)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *ObjectMetricStatusDie) DieFeedJSON(j []byte) *ObjectMetricStatusDie {
	r := autoscalingv2.ObjectMetricStatus{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *ObjectMetricStatusDie) DieFeedYAML(y []byte) *ObjectMetricStatusDie {
	r := autoscalingv2.ObjectMetricStatus{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *ObjectMetricStatusDie) DieFeedYAMLFile(name string) *ObjectMetricStatusDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *ObjectMetricStatusDie) DieFeedRawExtension(raw runtime.RawExtension) *ObjectMetricStatusDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *ObjectMetricStatusDie) DieRelease() autoscalingv2.ObjectMetricStatus {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *ObjectMetricStatusDie) DieReleasePtr() *autoscalingv2.ObjectMetricStatus {
	r := d.DieRelease()
	return &r
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *ObjectMetricStatusDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *ObjectMetricStatusDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *ObjectMetricStatusDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *ObjectMetricStatusDie) DieStamp(fn func(r *autoscalingv2.ObjectMetricStatus)) *ObjectMetricStatusDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// Experimental: DieStampAt uses a JSON path (http://goessner.net/articles/JsonPath/) expression to stamp portions of the resource. The callback is invoked with each JSON path match. Panics if the callback function does not accept a single argument of the same type or a pointer to that type as found on the resource at the target location.
//
// Future iterations will improve type coercion from the resource to the callback argument.
func (d *ObjectMetricStatusDie) DieStampAt(jp string, fn interface{}) *ObjectMetricStatusDie {
	return d.DieStamp(func(r *autoscalingv2.ObjectMetricStatus) {
		if ni := reflectx.ValueOf(fn).Type().NumIn(); ni != 1 {
			panic(fmtx.Errorf("callback function must have 1 input parameters, found %d", ni))
		}
		if no := reflectx.ValueOf(fn).Type().NumOut(); no != 0 {
			panic(fmtx.Errorf("callback function must have 0 output parameters, found %d", no))
		}

		cp := jsonpath.New("")
		if err := cp.Parse(fmtx.Sprintf("{%s}", jp)); err != nil {
			panic(err)
		}
		cr, err := cp.FindResults(r)
		if err != nil {
			// errors are expected if a path is not found
			return
		}
		for _, cv := range cr[0] {
			arg0t := reflectx.ValueOf(fn).Type().In(0)

			var args []reflectx.Value
			if cv.Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv}
			} else if cv.CanAddr() && cv.Addr().Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv.Addr()}
			} else {
				panic(fmtx.Errorf("callback function must accept value of type %q, found type %q", cv.Type(), arg0t))
			}

			reflectx.ValueOf(fn).Call(args)
		}
	})
}

// DieWith returns a new die after passing the current die to the callback function. The passed die is mutable.
func (d *ObjectMetricStatusDie) DieWith(fns ...func(d *ObjectMetricStatusDie)) *ObjectMetricStatusDie {
	nd := ObjectMetricStatusBlank.DieFeed(d.DieRelease()).DieImmutable(false)
	for _, fn := range fns {
		if fn != nil {
			fn(nd)
		}
	}
	return d.DieFeed(nd.DieRelease())
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *ObjectMetricStatusDie) DeepCopy() *ObjectMetricStatusDie {
	r := *d.r.DeepCopy()
	return &ObjectMetricStatusDie{
		mutable: d.mutable,
		r:       r,
	}
}

// metric identifies the target metric by name and selector
func (d *ObjectMetricStatusDie) Metric(v autoscalingv2.MetricIdentifier) *ObjectMetricStatusDie {
	return d.DieStamp(func(r *autoscalingv2.ObjectMetricStatus) {
		r.Metric = v
	})
}

// current contains the current value for the given metric
func (d *ObjectMetricStatusDie) Current(v autoscalingv2.MetricValueStatus) *ObjectMetricStatusDie {
	return d.DieStamp(func(r *autoscalingv2.ObjectMetricStatus) {
		r.Current = v
	})
}

// DescribedObject specifies the descriptions of a object,such as kind,name apiVersion
func (d *ObjectMetricStatusDie) DescribedObject(v autoscalingv2.CrossVersionObjectReference) *ObjectMetricStatusDie {
	return d.DieStamp(func(r *autoscalingv2.ObjectMetricStatus) {
		r.DescribedObject = v
	})
}

var MetricValueStatusBlank = (&MetricValueStatusDie{}).DieFeed(autoscalingv2.MetricValueStatus{})

type MetricValueStatusDie struct {
	mutable bool
	r       autoscalingv2.MetricValueStatus
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *MetricValueStatusDie) DieImmutable(immutable bool) *MetricValueStatusDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *MetricValueStatusDie) DieFeed(r autoscalingv2.MetricValueStatus) *MetricValueStatusDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &MetricValueStatusDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *MetricValueStatusDie) DieFeedPtr(r *autoscalingv2.MetricValueStatus) *MetricValueStatusDie {
	if r == nil {
		r = &autoscalingv2.MetricValueStatus{}
	}
	return d.DieFeed(*r)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *MetricValueStatusDie) DieFeedJSON(j []byte) *MetricValueStatusDie {
	r := autoscalingv2.MetricValueStatus{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *MetricValueStatusDie) DieFeedYAML(y []byte) *MetricValueStatusDie {
	r := autoscalingv2.MetricValueStatus{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *MetricValueStatusDie) DieFeedYAMLFile(name string) *MetricValueStatusDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *MetricValueStatusDie) DieFeedRawExtension(raw runtime.RawExtension) *MetricValueStatusDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *MetricValueStatusDie) DieRelease() autoscalingv2.MetricValueStatus {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *MetricValueStatusDie) DieReleasePtr() *autoscalingv2.MetricValueStatus {
	r := d.DieRelease()
	return &r
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *MetricValueStatusDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *MetricValueStatusDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *MetricValueStatusDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *MetricValueStatusDie) DieStamp(fn func(r *autoscalingv2.MetricValueStatus)) *MetricValueStatusDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// Experimental: DieStampAt uses a JSON path (http://goessner.net/articles/JsonPath/) expression to stamp portions of the resource. The callback is invoked with each JSON path match. Panics if the callback function does not accept a single argument of the same type or a pointer to that type as found on the resource at the target location.
//
// Future iterations will improve type coercion from the resource to the callback argument.
func (d *MetricValueStatusDie) DieStampAt(jp string, fn interface{}) *MetricValueStatusDie {
	return d.DieStamp(func(r *autoscalingv2.MetricValueStatus) {
		if ni := reflectx.ValueOf(fn).Type().NumIn(); ni != 1 {
			panic(fmtx.Errorf("callback function must have 1 input parameters, found %d", ni))
		}
		if no := reflectx.ValueOf(fn).Type().NumOut(); no != 0 {
			panic(fmtx.Errorf("callback function must have 0 output parameters, found %d", no))
		}

		cp := jsonpath.New("")
		if err := cp.Parse(fmtx.Sprintf("{%s}", jp)); err != nil {
			panic(err)
		}
		cr, err := cp.FindResults(r)
		if err != nil {
			// errors are expected if a path is not found
			return
		}
		for _, cv := range cr[0] {
			arg0t := reflectx.ValueOf(fn).Type().In(0)

			var args []reflectx.Value
			if cv.Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv}
			} else if cv.CanAddr() && cv.Addr().Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv.Addr()}
			} else {
				panic(fmtx.Errorf("callback function must accept value of type %q, found type %q", cv.Type(), arg0t))
			}

			reflectx.ValueOf(fn).Call(args)
		}
	})
}

// DieWith returns a new die after passing the current die to the callback function. The passed die is mutable.
func (d *MetricValueStatusDie) DieWith(fns ...func(d *MetricValueStatusDie)) *MetricValueStatusDie {
	nd := MetricValueStatusBlank.DieFeed(d.DieRelease()).DieImmutable(false)
	for _, fn := range fns {
		if fn != nil {
			fn(nd)
		}
	}
	return d.DieFeed(nd.DieRelease())
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *MetricValueStatusDie) DeepCopy() *MetricValueStatusDie {
	r := *d.r.DeepCopy()
	return &MetricValueStatusDie{
		mutable: d.mutable,
		r:       r,
	}
}

// value is the current value of the metric (as a quantity).
func (d *MetricValueStatusDie) Value(v *resource.Quantity) *MetricValueStatusDie {
	return d.DieStamp(func(r *autoscalingv2.MetricValueStatus) {
		r.Value = v
	})
}

// ValueString sets Value by parsing the string as a Quantity. Panics if the string is not parsable.
//
// value is the current value of the metric (as a quantity).
func (d *MetricValueStatusDie) ValueString(s string) *MetricValueStatusDie {
	q := resource.MustParse(s)
	return d.Value(&q)
}

// averageValue is the current value of the average of the
//
// metric across all relevant pods (as a quantity)
func (d *MetricValueStatusDie) AverageValue(v *resource.Quantity) *MetricValueStatusDie {
	return d.DieStamp(func(r *autoscalingv2.MetricValueStatus) {
		r.AverageValue = v
	})
}

// AverageValueString sets AverageValue by parsing the string as a Quantity. Panics if the string is not parsable.
//
// averageValue is the current value of the average of the
//
// metric across all relevant pods (as a quantity)
func (d *MetricValueStatusDie) AverageValueString(s string) *MetricValueStatusDie {
	q := resource.MustParse(s)
	return d.AverageValue(&q)
}

// currentAverageUtilization is the current value of the average of the
//
// resource metric across all relevant pods, represented as a percentage of
//
// the requested value of the resource for the pods.
func (d *MetricValueStatusDie) AverageUtilization(v *int32) *MetricValueStatusDie {
	return d.DieStamp(func(r *autoscalingv2.MetricValueStatus) {
		r.AverageUtilization = v
	})
}

var PodsMetricStatusBlank = (&PodsMetricStatusDie{}).DieFeed(autoscalingv2.PodsMetricStatus{})

type PodsMetricStatusDie struct {
	mutable bool
	r       autoscalingv2.PodsMetricStatus
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *PodsMetricStatusDie) DieImmutable(immutable bool) *PodsMetricStatusDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *PodsMetricStatusDie) DieFeed(r autoscalingv2.PodsMetricStatus) *PodsMetricStatusDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &PodsMetricStatusDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *PodsMetricStatusDie) DieFeedPtr(r *autoscalingv2.PodsMetricStatus) *PodsMetricStatusDie {
	if r == nil {
		r = &autoscalingv2.PodsMetricStatus{}
	}
	return d.DieFeed(*r)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *PodsMetricStatusDie) DieFeedJSON(j []byte) *PodsMetricStatusDie {
	r := autoscalingv2.PodsMetricStatus{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *PodsMetricStatusDie) DieFeedYAML(y []byte) *PodsMetricStatusDie {
	r := autoscalingv2.PodsMetricStatus{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *PodsMetricStatusDie) DieFeedYAMLFile(name string) *PodsMetricStatusDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *PodsMetricStatusDie) DieFeedRawExtension(raw runtime.RawExtension) *PodsMetricStatusDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *PodsMetricStatusDie) DieRelease() autoscalingv2.PodsMetricStatus {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *PodsMetricStatusDie) DieReleasePtr() *autoscalingv2.PodsMetricStatus {
	r := d.DieRelease()
	return &r
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *PodsMetricStatusDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *PodsMetricStatusDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *PodsMetricStatusDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *PodsMetricStatusDie) DieStamp(fn func(r *autoscalingv2.PodsMetricStatus)) *PodsMetricStatusDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// Experimental: DieStampAt uses a JSON path (http://goessner.net/articles/JsonPath/) expression to stamp portions of the resource. The callback is invoked with each JSON path match. Panics if the callback function does not accept a single argument of the same type or a pointer to that type as found on the resource at the target location.
//
// Future iterations will improve type coercion from the resource to the callback argument.
func (d *PodsMetricStatusDie) DieStampAt(jp string, fn interface{}) *PodsMetricStatusDie {
	return d.DieStamp(func(r *autoscalingv2.PodsMetricStatus) {
		if ni := reflectx.ValueOf(fn).Type().NumIn(); ni != 1 {
			panic(fmtx.Errorf("callback function must have 1 input parameters, found %d", ni))
		}
		if no := reflectx.ValueOf(fn).Type().NumOut(); no != 0 {
			panic(fmtx.Errorf("callback function must have 0 output parameters, found %d", no))
		}

		cp := jsonpath.New("")
		if err := cp.Parse(fmtx.Sprintf("{%s}", jp)); err != nil {
			panic(err)
		}
		cr, err := cp.FindResults(r)
		if err != nil {
			// errors are expected if a path is not found
			return
		}
		for _, cv := range cr[0] {
			arg0t := reflectx.ValueOf(fn).Type().In(0)

			var args []reflectx.Value
			if cv.Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv}
			} else if cv.CanAddr() && cv.Addr().Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv.Addr()}
			} else {
				panic(fmtx.Errorf("callback function must accept value of type %q, found type %q", cv.Type(), arg0t))
			}

			reflectx.ValueOf(fn).Call(args)
		}
	})
}

// DieWith returns a new die after passing the current die to the callback function. The passed die is mutable.
func (d *PodsMetricStatusDie) DieWith(fns ...func(d *PodsMetricStatusDie)) *PodsMetricStatusDie {
	nd := PodsMetricStatusBlank.DieFeed(d.DieRelease()).DieImmutable(false)
	for _, fn := range fns {
		if fn != nil {
			fn(nd)
		}
	}
	return d.DieFeed(nd.DieRelease())
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *PodsMetricStatusDie) DeepCopy() *PodsMetricStatusDie {
	r := *d.r.DeepCopy()
	return &PodsMetricStatusDie{
		mutable: d.mutable,
		r:       r,
	}
}

// metric identifies the target metric by name and selector
func (d *PodsMetricStatusDie) Metric(v autoscalingv2.MetricIdentifier) *PodsMetricStatusDie {
	return d.DieStamp(func(r *autoscalingv2.PodsMetricStatus) {
		r.Metric = v
	})
}

// current contains the current value for the given metric
func (d *PodsMetricStatusDie) Current(v autoscalingv2.MetricValueStatus) *PodsMetricStatusDie {
	return d.DieStamp(func(r *autoscalingv2.PodsMetricStatus) {
		r.Current = v
	})
}

var ResourceMetricStatusBlank = (&ResourceMetricStatusDie{}).DieFeed(autoscalingv2.ResourceMetricStatus{})

type ResourceMetricStatusDie struct {
	mutable bool
	r       autoscalingv2.ResourceMetricStatus
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *ResourceMetricStatusDie) DieImmutable(immutable bool) *ResourceMetricStatusDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *ResourceMetricStatusDie) DieFeed(r autoscalingv2.ResourceMetricStatus) *ResourceMetricStatusDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &ResourceMetricStatusDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *ResourceMetricStatusDie) DieFeedPtr(r *autoscalingv2.ResourceMetricStatus) *ResourceMetricStatusDie {
	if r == nil {
		r = &autoscalingv2.ResourceMetricStatus{}
	}
	return d.DieFeed(*r)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *ResourceMetricStatusDie) DieFeedJSON(j []byte) *ResourceMetricStatusDie {
	r := autoscalingv2.ResourceMetricStatus{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *ResourceMetricStatusDie) DieFeedYAML(y []byte) *ResourceMetricStatusDie {
	r := autoscalingv2.ResourceMetricStatus{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *ResourceMetricStatusDie) DieFeedYAMLFile(name string) *ResourceMetricStatusDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *ResourceMetricStatusDie) DieFeedRawExtension(raw runtime.RawExtension) *ResourceMetricStatusDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *ResourceMetricStatusDie) DieRelease() autoscalingv2.ResourceMetricStatus {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *ResourceMetricStatusDie) DieReleasePtr() *autoscalingv2.ResourceMetricStatus {
	r := d.DieRelease()
	return &r
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *ResourceMetricStatusDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *ResourceMetricStatusDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *ResourceMetricStatusDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *ResourceMetricStatusDie) DieStamp(fn func(r *autoscalingv2.ResourceMetricStatus)) *ResourceMetricStatusDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// Experimental: DieStampAt uses a JSON path (http://goessner.net/articles/JsonPath/) expression to stamp portions of the resource. The callback is invoked with each JSON path match. Panics if the callback function does not accept a single argument of the same type or a pointer to that type as found on the resource at the target location.
//
// Future iterations will improve type coercion from the resource to the callback argument.
func (d *ResourceMetricStatusDie) DieStampAt(jp string, fn interface{}) *ResourceMetricStatusDie {
	return d.DieStamp(func(r *autoscalingv2.ResourceMetricStatus) {
		if ni := reflectx.ValueOf(fn).Type().NumIn(); ni != 1 {
			panic(fmtx.Errorf("callback function must have 1 input parameters, found %d", ni))
		}
		if no := reflectx.ValueOf(fn).Type().NumOut(); no != 0 {
			panic(fmtx.Errorf("callback function must have 0 output parameters, found %d", no))
		}

		cp := jsonpath.New("")
		if err := cp.Parse(fmtx.Sprintf("{%s}", jp)); err != nil {
			panic(err)
		}
		cr, err := cp.FindResults(r)
		if err != nil {
			// errors are expected if a path is not found
			return
		}
		for _, cv := range cr[0] {
			arg0t := reflectx.ValueOf(fn).Type().In(0)

			var args []reflectx.Value
			if cv.Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv}
			} else if cv.CanAddr() && cv.Addr().Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv.Addr()}
			} else {
				panic(fmtx.Errorf("callback function must accept value of type %q, found type %q", cv.Type(), arg0t))
			}

			reflectx.ValueOf(fn).Call(args)
		}
	})
}

// DieWith returns a new die after passing the current die to the callback function. The passed die is mutable.
func (d *ResourceMetricStatusDie) DieWith(fns ...func(d *ResourceMetricStatusDie)) *ResourceMetricStatusDie {
	nd := ResourceMetricStatusBlank.DieFeed(d.DieRelease()).DieImmutable(false)
	for _, fn := range fns {
		if fn != nil {
			fn(nd)
		}
	}
	return d.DieFeed(nd.DieRelease())
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *ResourceMetricStatusDie) DeepCopy() *ResourceMetricStatusDie {
	r := *d.r.DeepCopy()
	return &ResourceMetricStatusDie{
		mutable: d.mutable,
		r:       r,
	}
}

// name is the name of the resource in question.
func (d *ResourceMetricStatusDie) Name(v corev1.ResourceName) *ResourceMetricStatusDie {
	return d.DieStamp(func(r *autoscalingv2.ResourceMetricStatus) {
		r.Name = v
	})
}

// current contains the current value for the given metric
func (d *ResourceMetricStatusDie) Current(v autoscalingv2.MetricValueStatus) *ResourceMetricStatusDie {
	return d.DieStamp(func(r *autoscalingv2.ResourceMetricStatus) {
		r.Current = v
	})
}

var ContainerResourceMetricStatusBlank = (&ContainerResourceMetricStatusDie{}).DieFeed(autoscalingv2.ContainerResourceMetricStatus{})

type ContainerResourceMetricStatusDie struct {
	mutable bool
	r       autoscalingv2.ContainerResourceMetricStatus
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *ContainerResourceMetricStatusDie) DieImmutable(immutable bool) *ContainerResourceMetricStatusDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *ContainerResourceMetricStatusDie) DieFeed(r autoscalingv2.ContainerResourceMetricStatus) *ContainerResourceMetricStatusDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &ContainerResourceMetricStatusDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *ContainerResourceMetricStatusDie) DieFeedPtr(r *autoscalingv2.ContainerResourceMetricStatus) *ContainerResourceMetricStatusDie {
	if r == nil {
		r = &autoscalingv2.ContainerResourceMetricStatus{}
	}
	return d.DieFeed(*r)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *ContainerResourceMetricStatusDie) DieFeedJSON(j []byte) *ContainerResourceMetricStatusDie {
	r := autoscalingv2.ContainerResourceMetricStatus{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *ContainerResourceMetricStatusDie) DieFeedYAML(y []byte) *ContainerResourceMetricStatusDie {
	r := autoscalingv2.ContainerResourceMetricStatus{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *ContainerResourceMetricStatusDie) DieFeedYAMLFile(name string) *ContainerResourceMetricStatusDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *ContainerResourceMetricStatusDie) DieFeedRawExtension(raw runtime.RawExtension) *ContainerResourceMetricStatusDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *ContainerResourceMetricStatusDie) DieRelease() autoscalingv2.ContainerResourceMetricStatus {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *ContainerResourceMetricStatusDie) DieReleasePtr() *autoscalingv2.ContainerResourceMetricStatus {
	r := d.DieRelease()
	return &r
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *ContainerResourceMetricStatusDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *ContainerResourceMetricStatusDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *ContainerResourceMetricStatusDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *ContainerResourceMetricStatusDie) DieStamp(fn func(r *autoscalingv2.ContainerResourceMetricStatus)) *ContainerResourceMetricStatusDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// Experimental: DieStampAt uses a JSON path (http://goessner.net/articles/JsonPath/) expression to stamp portions of the resource. The callback is invoked with each JSON path match. Panics if the callback function does not accept a single argument of the same type or a pointer to that type as found on the resource at the target location.
//
// Future iterations will improve type coercion from the resource to the callback argument.
func (d *ContainerResourceMetricStatusDie) DieStampAt(jp string, fn interface{}) *ContainerResourceMetricStatusDie {
	return d.DieStamp(func(r *autoscalingv2.ContainerResourceMetricStatus) {
		if ni := reflectx.ValueOf(fn).Type().NumIn(); ni != 1 {
			panic(fmtx.Errorf("callback function must have 1 input parameters, found %d", ni))
		}
		if no := reflectx.ValueOf(fn).Type().NumOut(); no != 0 {
			panic(fmtx.Errorf("callback function must have 0 output parameters, found %d", no))
		}

		cp := jsonpath.New("")
		if err := cp.Parse(fmtx.Sprintf("{%s}", jp)); err != nil {
			panic(err)
		}
		cr, err := cp.FindResults(r)
		if err != nil {
			// errors are expected if a path is not found
			return
		}
		for _, cv := range cr[0] {
			arg0t := reflectx.ValueOf(fn).Type().In(0)

			var args []reflectx.Value
			if cv.Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv}
			} else if cv.CanAddr() && cv.Addr().Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv.Addr()}
			} else {
				panic(fmtx.Errorf("callback function must accept value of type %q, found type %q", cv.Type(), arg0t))
			}

			reflectx.ValueOf(fn).Call(args)
		}
	})
}

// DieWith returns a new die after passing the current die to the callback function. The passed die is mutable.
func (d *ContainerResourceMetricStatusDie) DieWith(fns ...func(d *ContainerResourceMetricStatusDie)) *ContainerResourceMetricStatusDie {
	nd := ContainerResourceMetricStatusBlank.DieFeed(d.DieRelease()).DieImmutable(false)
	for _, fn := range fns {
		if fn != nil {
			fn(nd)
		}
	}
	return d.DieFeed(nd.DieRelease())
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *ContainerResourceMetricStatusDie) DeepCopy() *ContainerResourceMetricStatusDie {
	r := *d.r.DeepCopy()
	return &ContainerResourceMetricStatusDie{
		mutable: d.mutable,
		r:       r,
	}
}

// name is the name of the resource in question.
func (d *ContainerResourceMetricStatusDie) Name(v corev1.ResourceName) *ContainerResourceMetricStatusDie {
	return d.DieStamp(func(r *autoscalingv2.ContainerResourceMetricStatus) {
		r.Name = v
	})
}

// current contains the current value for the given metric
func (d *ContainerResourceMetricStatusDie) Current(v autoscalingv2.MetricValueStatus) *ContainerResourceMetricStatusDie {
	return d.DieStamp(func(r *autoscalingv2.ContainerResourceMetricStatus) {
		r.Current = v
	})
}

// container is the name of the container in the pods of the scaling target
func (d *ContainerResourceMetricStatusDie) Container(v string) *ContainerResourceMetricStatusDie {
	return d.DieStamp(func(r *autoscalingv2.ContainerResourceMetricStatus) {
		r.Container = v
	})
}

var ExternalMetricStatusBlank = (&ExternalMetricStatusDie{}).DieFeed(autoscalingv2.ExternalMetricStatus{})

type ExternalMetricStatusDie struct {
	mutable bool
	r       autoscalingv2.ExternalMetricStatus
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *ExternalMetricStatusDie) DieImmutable(immutable bool) *ExternalMetricStatusDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *ExternalMetricStatusDie) DieFeed(r autoscalingv2.ExternalMetricStatus) *ExternalMetricStatusDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &ExternalMetricStatusDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *ExternalMetricStatusDie) DieFeedPtr(r *autoscalingv2.ExternalMetricStatus) *ExternalMetricStatusDie {
	if r == nil {
		r = &autoscalingv2.ExternalMetricStatus{}
	}
	return d.DieFeed(*r)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *ExternalMetricStatusDie) DieFeedJSON(j []byte) *ExternalMetricStatusDie {
	r := autoscalingv2.ExternalMetricStatus{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *ExternalMetricStatusDie) DieFeedYAML(y []byte) *ExternalMetricStatusDie {
	r := autoscalingv2.ExternalMetricStatus{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *ExternalMetricStatusDie) DieFeedYAMLFile(name string) *ExternalMetricStatusDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *ExternalMetricStatusDie) DieFeedRawExtension(raw runtime.RawExtension) *ExternalMetricStatusDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *ExternalMetricStatusDie) DieRelease() autoscalingv2.ExternalMetricStatus {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *ExternalMetricStatusDie) DieReleasePtr() *autoscalingv2.ExternalMetricStatus {
	r := d.DieRelease()
	return &r
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *ExternalMetricStatusDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *ExternalMetricStatusDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *ExternalMetricStatusDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *ExternalMetricStatusDie) DieStamp(fn func(r *autoscalingv2.ExternalMetricStatus)) *ExternalMetricStatusDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// Experimental: DieStampAt uses a JSON path (http://goessner.net/articles/JsonPath/) expression to stamp portions of the resource. The callback is invoked with each JSON path match. Panics if the callback function does not accept a single argument of the same type or a pointer to that type as found on the resource at the target location.
//
// Future iterations will improve type coercion from the resource to the callback argument.
func (d *ExternalMetricStatusDie) DieStampAt(jp string, fn interface{}) *ExternalMetricStatusDie {
	return d.DieStamp(func(r *autoscalingv2.ExternalMetricStatus) {
		if ni := reflectx.ValueOf(fn).Type().NumIn(); ni != 1 {
			panic(fmtx.Errorf("callback function must have 1 input parameters, found %d", ni))
		}
		if no := reflectx.ValueOf(fn).Type().NumOut(); no != 0 {
			panic(fmtx.Errorf("callback function must have 0 output parameters, found %d", no))
		}

		cp := jsonpath.New("")
		if err := cp.Parse(fmtx.Sprintf("{%s}", jp)); err != nil {
			panic(err)
		}
		cr, err := cp.FindResults(r)
		if err != nil {
			// errors are expected if a path is not found
			return
		}
		for _, cv := range cr[0] {
			arg0t := reflectx.ValueOf(fn).Type().In(0)

			var args []reflectx.Value
			if cv.Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv}
			} else if cv.CanAddr() && cv.Addr().Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv.Addr()}
			} else {
				panic(fmtx.Errorf("callback function must accept value of type %q, found type %q", cv.Type(), arg0t))
			}

			reflectx.ValueOf(fn).Call(args)
		}
	})
}

// DieWith returns a new die after passing the current die to the callback function. The passed die is mutable.
func (d *ExternalMetricStatusDie) DieWith(fns ...func(d *ExternalMetricStatusDie)) *ExternalMetricStatusDie {
	nd := ExternalMetricStatusBlank.DieFeed(d.DieRelease()).DieImmutable(false)
	for _, fn := range fns {
		if fn != nil {
			fn(nd)
		}
	}
	return d.DieFeed(nd.DieRelease())
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *ExternalMetricStatusDie) DeepCopy() *ExternalMetricStatusDie {
	r := *d.r.DeepCopy()
	return &ExternalMetricStatusDie{
		mutable: d.mutable,
		r:       r,
	}
}

// metric identifies the target metric by name and selector
func (d *ExternalMetricStatusDie) Metric(v autoscalingv2.MetricIdentifier) *ExternalMetricStatusDie {
	return d.DieStamp(func(r *autoscalingv2.ExternalMetricStatus) {
		r.Metric = v
	})
}

// current contains the current value for the given metric
func (d *ExternalMetricStatusDie) Current(v autoscalingv2.MetricValueStatus) *ExternalMetricStatusDie {
	return d.DieStamp(func(r *autoscalingv2.ExternalMetricStatus) {
		r.Current = v
	})
}
