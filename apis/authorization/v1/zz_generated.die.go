//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright 2021-2022 the original author or authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by diegen. DO NOT EDIT.

package v1

import (
	fmtx "fmt"
	cmp "github.com/google/go-cmp/cmp"
	authorizationv1 "k8s.io/api/authorization/v1"
	apismetav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	unstructured "k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
	runtime "k8s.io/apimachinery/pkg/runtime"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	json "k8s.io/apimachinery/pkg/util/json"
	jsonpath "k8s.io/client-go/util/jsonpath"
	osx "os"
	metav1 "reconciler.io/dies/apis/meta/v1"
	patch "reconciler.io/dies/patch"
	reflectx "reflect"
	yaml "sigs.k8s.io/yaml"
)

var LocalSubjectAccessReviewBlank = (&LocalSubjectAccessReviewDie{}).DieFeed(authorizationv1.LocalSubjectAccessReview{})

type LocalSubjectAccessReviewDie struct {
	metav1.FrozenObjectMeta
	mutable bool
	r       authorizationv1.LocalSubjectAccessReview
	seal    authorizationv1.LocalSubjectAccessReview
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *LocalSubjectAccessReviewDie) DieImmutable(immutable bool) *LocalSubjectAccessReviewDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *LocalSubjectAccessReviewDie) DieFeed(r authorizationv1.LocalSubjectAccessReview) *LocalSubjectAccessReviewDie {
	if d.mutable {
		d.FrozenObjectMeta = metav1.FreezeObjectMeta(r.ObjectMeta)
		d.r = r
		return d
	}
	return &LocalSubjectAccessReviewDie{
		FrozenObjectMeta: metav1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
		seal:             d.seal,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *LocalSubjectAccessReviewDie) DieFeedPtr(r *authorizationv1.LocalSubjectAccessReview) *LocalSubjectAccessReviewDie {
	if r == nil {
		r = &authorizationv1.LocalSubjectAccessReview{}
	}
	return d.DieFeed(*r)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *LocalSubjectAccessReviewDie) DieFeedJSON(j []byte) *LocalSubjectAccessReviewDie {
	r := authorizationv1.LocalSubjectAccessReview{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *LocalSubjectAccessReviewDie) DieFeedYAML(y []byte) *LocalSubjectAccessReviewDie {
	r := authorizationv1.LocalSubjectAccessReview{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *LocalSubjectAccessReviewDie) DieFeedYAMLFile(name string) *LocalSubjectAccessReviewDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *LocalSubjectAccessReviewDie) DieFeedRawExtension(raw runtime.RawExtension) *LocalSubjectAccessReviewDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *LocalSubjectAccessReviewDie) DieRelease() authorizationv1.LocalSubjectAccessReview {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *LocalSubjectAccessReviewDie) DieReleasePtr() *authorizationv1.LocalSubjectAccessReview {
	r := d.DieRelease()
	return &r
}

// DieReleaseUnstructured returns the resource managed by the die as an unstructured object. Panics on error.
func (d *LocalSubjectAccessReviewDie) DieReleaseUnstructured() *unstructured.Unstructured {
	r := d.DieReleasePtr()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(r)
	if err != nil {
		panic(err)
	}
	return &unstructured.Unstructured{
		Object: u,
	}
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *LocalSubjectAccessReviewDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *LocalSubjectAccessReviewDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *LocalSubjectAccessReviewDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *LocalSubjectAccessReviewDie) DieStamp(fn func(r *authorizationv1.LocalSubjectAccessReview)) *LocalSubjectAccessReviewDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// Experimental: DieStampAt uses a JSON path (http://goessner.net/articles/JsonPath/) expression to stamp portions of the resource. The callback is invoked with each JSON path match. Panics if the callback function does not accept a single argument of the same type or a pointer to that type as found on the resource at the target location.
//
// Future iterations will improve type coercion from the resource to the callback argument.
func (d *LocalSubjectAccessReviewDie) DieStampAt(jp string, fn interface{}) *LocalSubjectAccessReviewDie {
	return d.DieStamp(func(r *authorizationv1.LocalSubjectAccessReview) {
		if ni := reflectx.ValueOf(fn).Type().NumIn(); ni != 1 {
			panic(fmtx.Errorf("callback function must have 1 input parameters, found %d", ni))
		}
		if no := reflectx.ValueOf(fn).Type().NumOut(); no != 0 {
			panic(fmtx.Errorf("callback function must have 0 output parameters, found %d", no))
		}

		cp := jsonpath.New("")
		if err := cp.Parse(fmtx.Sprintf("{%s}", jp)); err != nil {
			panic(err)
		}
		cr, err := cp.FindResults(r)
		if err != nil {
			// errors are expected if a path is not found
			return
		}
		for _, cv := range cr[0] {
			arg0t := reflectx.ValueOf(fn).Type().In(0)

			var args []reflectx.Value
			if cv.Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv}
			} else if cv.CanAddr() && cv.Addr().Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv.Addr()}
			} else {
				panic(fmtx.Errorf("callback function must accept value of type %q, found type %q", cv.Type(), arg0t))
			}

			reflectx.ValueOf(fn).Call(args)
		}
	})
}

// DieWith returns a new die after passing the current die to the callback function. The passed die is mutable.
func (d *LocalSubjectAccessReviewDie) DieWith(fns ...func(d *LocalSubjectAccessReviewDie)) *LocalSubjectAccessReviewDie {
	nd := LocalSubjectAccessReviewBlank.DieFeed(d.DieRelease()).DieImmutable(false)
	for _, fn := range fns {
		if fn != nil {
			fn(nd)
		}
	}
	return d.DieFeed(nd.DieRelease())
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *LocalSubjectAccessReviewDie) DeepCopy() *LocalSubjectAccessReviewDie {
	r := *d.r.DeepCopy()
	return &LocalSubjectAccessReviewDie{
		FrozenObjectMeta: metav1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
		seal:             d.seal,
	}
}

// DieSeal returns a new die for the current die's state that is sealed for comparison in future diff and patch operations.
func (d *LocalSubjectAccessReviewDie) DieSeal() *LocalSubjectAccessReviewDie {
	return d.DieSealFeed(d.r)
}

// DieSealFeed returns a new die for the current die's state that uses a specific resource for comparison in future diff and patch operations.
func (d *LocalSubjectAccessReviewDie) DieSealFeed(r authorizationv1.LocalSubjectAccessReview) *LocalSubjectAccessReviewDie {
	if !d.mutable {
		d = d.DeepCopy()
	}
	d.seal = *r.DeepCopy()
	return d
}

// DieSealFeedPtr returns a new die for the current die's state that uses a specific resource pointer for comparison in future diff and patch operations. If the resource is nil, the empty value is used instead.
func (d *LocalSubjectAccessReviewDie) DieSealFeedPtr(r *authorizationv1.LocalSubjectAccessReview) *LocalSubjectAccessReviewDie {
	if r == nil {
		r = &authorizationv1.LocalSubjectAccessReview{}
	}
	return d.DieSealFeed(*r)
}

// DieSealRelease returns the sealed resource managed by the die.
func (d *LocalSubjectAccessReviewDie) DieSealRelease() authorizationv1.LocalSubjectAccessReview {
	return *d.seal.DeepCopy()
}

// DieSealReleasePtr returns the sealed resource pointer managed by the die.
func (d *LocalSubjectAccessReviewDie) DieSealReleasePtr() *authorizationv1.LocalSubjectAccessReview {
	r := d.DieSealRelease()
	return &r
}

// DieDiff uses cmp.Diff to compare the current value of the die with the sealed value.
func (d *LocalSubjectAccessReviewDie) DieDiff(opts ...cmp.Option) string {
	return cmp.Diff(d.seal, d.r, opts...)
}

// DiePatch generates a patch between the current value of the die and the sealed value.
func (d *LocalSubjectAccessReviewDie) DiePatch(patchType types.PatchType) ([]byte, error) {
	return patch.Create(d.seal, d.r, patchType)
}

var _ runtime.Object = (*LocalSubjectAccessReviewDie)(nil)

func (d *LocalSubjectAccessReviewDie) DeepCopyObject() runtime.Object {
	return d.r.DeepCopy()
}

func (d *LocalSubjectAccessReviewDie) GetObjectKind() schema.ObjectKind {
	r := d.DieRelease()
	return r.GetObjectKind()
}

func (d *LocalSubjectAccessReviewDie) MarshalJSON() ([]byte, error) {
	return json.Marshal(d.r)
}

func (d *LocalSubjectAccessReviewDie) UnmarshalJSON(b []byte) error {
	if !d.mutable {
		return fmtx.Errorf("cannot unmarshal into immutable dies, create a mutable version first")
	}
	resource := &authorizationv1.LocalSubjectAccessReview{}
	err := json.Unmarshal(b, resource)
	*d = *d.DieFeed(*resource)
	return err
}

// DieDefaultTypeMetadata sets the APIVersion and Kind to "authorization.k8s.io/v1" and "LocalSubjectAccessReview" respectively.
func (d *LocalSubjectAccessReviewDie) DieDefaultTypeMetadata() *LocalSubjectAccessReviewDie {
	return d.DieStamp(func(r *authorizationv1.LocalSubjectAccessReview) {
		r.APIVersion = "authorization.k8s.io/v1"
		r.Kind = "LocalSubjectAccessReview"
	})
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (d *LocalSubjectAccessReviewDie) APIVersion(v string) *LocalSubjectAccessReviewDie {
	return d.DieStamp(func(r *authorizationv1.LocalSubjectAccessReview) {
		r.APIVersion = v
	})
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (d *LocalSubjectAccessReviewDie) Kind(v string) *LocalSubjectAccessReviewDie {
	return d.DieStamp(func(r *authorizationv1.LocalSubjectAccessReview) {
		r.Kind = v
	})
}

// TypeMetadata standard object's type metadata.
func (d *LocalSubjectAccessReviewDie) TypeMetadata(v apismetav1.TypeMeta) *LocalSubjectAccessReviewDie {
	return d.DieStamp(func(r *authorizationv1.LocalSubjectAccessReview) {
		r.TypeMeta = v
	})
}

// TypeMetadataDie stamps the resource's TypeMeta field with a mutable die.
func (d *LocalSubjectAccessReviewDie) TypeMetadataDie(fn func(d *metav1.TypeMetaDie)) *LocalSubjectAccessReviewDie {
	return d.DieStamp(func(r *authorizationv1.LocalSubjectAccessReview) {
		d := metav1.TypeMetaBlank.DieImmutable(false).DieFeed(r.TypeMeta)
		fn(d)
		r.TypeMeta = d.DieRelease()
	})
}

// Metadata standard object's metadata.
func (d *LocalSubjectAccessReviewDie) Metadata(v apismetav1.ObjectMeta) *LocalSubjectAccessReviewDie {
	return d.DieStamp(func(r *authorizationv1.LocalSubjectAccessReview) {
		r.ObjectMeta = v
	})
}

// MetadataDie stamps the resource's ObjectMeta field with a mutable die.
func (d *LocalSubjectAccessReviewDie) MetadataDie(fn func(d *metav1.ObjectMetaDie)) *LocalSubjectAccessReviewDie {
	return d.DieStamp(func(r *authorizationv1.LocalSubjectAccessReview) {
		d := metav1.ObjectMetaBlank.DieImmutable(false).DieFeed(r.ObjectMeta)
		fn(d)
		r.ObjectMeta = d.DieRelease()
	})
}

// Spec holds information about the request being evaluated.  spec.namespace must be equal to the namespace
//
// you made the request against.  If empty, it is defaulted.
func (d *LocalSubjectAccessReviewDie) Spec(v authorizationv1.SubjectAccessReviewSpec) *LocalSubjectAccessReviewDie {
	return d.DieStamp(func(r *authorizationv1.LocalSubjectAccessReview) {
		r.Spec = v
	})
}

// Status is filled in by the server and indicates whether the request is allowed or not
func (d *LocalSubjectAccessReviewDie) Status(v authorizationv1.SubjectAccessReviewStatus) *LocalSubjectAccessReviewDie {
	return d.DieStamp(func(r *authorizationv1.LocalSubjectAccessReview) {
		r.Status = v
	})
}

var SelfSubjectAccessReviewBlank = (&SelfSubjectAccessReviewDie{}).DieFeed(authorizationv1.SelfSubjectAccessReview{})

type SelfSubjectAccessReviewDie struct {
	metav1.FrozenObjectMeta
	mutable bool
	r       authorizationv1.SelfSubjectAccessReview
	seal    authorizationv1.SelfSubjectAccessReview
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *SelfSubjectAccessReviewDie) DieImmutable(immutable bool) *SelfSubjectAccessReviewDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *SelfSubjectAccessReviewDie) DieFeed(r authorizationv1.SelfSubjectAccessReview) *SelfSubjectAccessReviewDie {
	if d.mutable {
		d.FrozenObjectMeta = metav1.FreezeObjectMeta(r.ObjectMeta)
		d.r = r
		return d
	}
	return &SelfSubjectAccessReviewDie{
		FrozenObjectMeta: metav1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
		seal:             d.seal,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *SelfSubjectAccessReviewDie) DieFeedPtr(r *authorizationv1.SelfSubjectAccessReview) *SelfSubjectAccessReviewDie {
	if r == nil {
		r = &authorizationv1.SelfSubjectAccessReview{}
	}
	return d.DieFeed(*r)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *SelfSubjectAccessReviewDie) DieFeedJSON(j []byte) *SelfSubjectAccessReviewDie {
	r := authorizationv1.SelfSubjectAccessReview{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *SelfSubjectAccessReviewDie) DieFeedYAML(y []byte) *SelfSubjectAccessReviewDie {
	r := authorizationv1.SelfSubjectAccessReview{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *SelfSubjectAccessReviewDie) DieFeedYAMLFile(name string) *SelfSubjectAccessReviewDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *SelfSubjectAccessReviewDie) DieFeedRawExtension(raw runtime.RawExtension) *SelfSubjectAccessReviewDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *SelfSubjectAccessReviewDie) DieRelease() authorizationv1.SelfSubjectAccessReview {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *SelfSubjectAccessReviewDie) DieReleasePtr() *authorizationv1.SelfSubjectAccessReview {
	r := d.DieRelease()
	return &r
}

// DieReleaseUnstructured returns the resource managed by the die as an unstructured object. Panics on error.
func (d *SelfSubjectAccessReviewDie) DieReleaseUnstructured() *unstructured.Unstructured {
	r := d.DieReleasePtr()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(r)
	if err != nil {
		panic(err)
	}
	return &unstructured.Unstructured{
		Object: u,
	}
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *SelfSubjectAccessReviewDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *SelfSubjectAccessReviewDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *SelfSubjectAccessReviewDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *SelfSubjectAccessReviewDie) DieStamp(fn func(r *authorizationv1.SelfSubjectAccessReview)) *SelfSubjectAccessReviewDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// Experimental: DieStampAt uses a JSON path (http://goessner.net/articles/JsonPath/) expression to stamp portions of the resource. The callback is invoked with each JSON path match. Panics if the callback function does not accept a single argument of the same type or a pointer to that type as found on the resource at the target location.
//
// Future iterations will improve type coercion from the resource to the callback argument.
func (d *SelfSubjectAccessReviewDie) DieStampAt(jp string, fn interface{}) *SelfSubjectAccessReviewDie {
	return d.DieStamp(func(r *authorizationv1.SelfSubjectAccessReview) {
		if ni := reflectx.ValueOf(fn).Type().NumIn(); ni != 1 {
			panic(fmtx.Errorf("callback function must have 1 input parameters, found %d", ni))
		}
		if no := reflectx.ValueOf(fn).Type().NumOut(); no != 0 {
			panic(fmtx.Errorf("callback function must have 0 output parameters, found %d", no))
		}

		cp := jsonpath.New("")
		if err := cp.Parse(fmtx.Sprintf("{%s}", jp)); err != nil {
			panic(err)
		}
		cr, err := cp.FindResults(r)
		if err != nil {
			// errors are expected if a path is not found
			return
		}
		for _, cv := range cr[0] {
			arg0t := reflectx.ValueOf(fn).Type().In(0)

			var args []reflectx.Value
			if cv.Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv}
			} else if cv.CanAddr() && cv.Addr().Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv.Addr()}
			} else {
				panic(fmtx.Errorf("callback function must accept value of type %q, found type %q", cv.Type(), arg0t))
			}

			reflectx.ValueOf(fn).Call(args)
		}
	})
}

// DieWith returns a new die after passing the current die to the callback function. The passed die is mutable.
func (d *SelfSubjectAccessReviewDie) DieWith(fns ...func(d *SelfSubjectAccessReviewDie)) *SelfSubjectAccessReviewDie {
	nd := SelfSubjectAccessReviewBlank.DieFeed(d.DieRelease()).DieImmutable(false)
	for _, fn := range fns {
		if fn != nil {
			fn(nd)
		}
	}
	return d.DieFeed(nd.DieRelease())
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *SelfSubjectAccessReviewDie) DeepCopy() *SelfSubjectAccessReviewDie {
	r := *d.r.DeepCopy()
	return &SelfSubjectAccessReviewDie{
		FrozenObjectMeta: metav1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
		seal:             d.seal,
	}
}

// DieSeal returns a new die for the current die's state that is sealed for comparison in future diff and patch operations.
func (d *SelfSubjectAccessReviewDie) DieSeal() *SelfSubjectAccessReviewDie {
	return d.DieSealFeed(d.r)
}

// DieSealFeed returns a new die for the current die's state that uses a specific resource for comparison in future diff and patch operations.
func (d *SelfSubjectAccessReviewDie) DieSealFeed(r authorizationv1.SelfSubjectAccessReview) *SelfSubjectAccessReviewDie {
	if !d.mutable {
		d = d.DeepCopy()
	}
	d.seal = *r.DeepCopy()
	return d
}

// DieSealFeedPtr returns a new die for the current die's state that uses a specific resource pointer for comparison in future diff and patch operations. If the resource is nil, the empty value is used instead.
func (d *SelfSubjectAccessReviewDie) DieSealFeedPtr(r *authorizationv1.SelfSubjectAccessReview) *SelfSubjectAccessReviewDie {
	if r == nil {
		r = &authorizationv1.SelfSubjectAccessReview{}
	}
	return d.DieSealFeed(*r)
}

// DieSealRelease returns the sealed resource managed by the die.
func (d *SelfSubjectAccessReviewDie) DieSealRelease() authorizationv1.SelfSubjectAccessReview {
	return *d.seal.DeepCopy()
}

// DieSealReleasePtr returns the sealed resource pointer managed by the die.
func (d *SelfSubjectAccessReviewDie) DieSealReleasePtr() *authorizationv1.SelfSubjectAccessReview {
	r := d.DieSealRelease()
	return &r
}

// DieDiff uses cmp.Diff to compare the current value of the die with the sealed value.
func (d *SelfSubjectAccessReviewDie) DieDiff(opts ...cmp.Option) string {
	return cmp.Diff(d.seal, d.r, opts...)
}

// DiePatch generates a patch between the current value of the die and the sealed value.
func (d *SelfSubjectAccessReviewDie) DiePatch(patchType types.PatchType) ([]byte, error) {
	return patch.Create(d.seal, d.r, patchType)
}

var _ runtime.Object = (*SelfSubjectAccessReviewDie)(nil)

func (d *SelfSubjectAccessReviewDie) DeepCopyObject() runtime.Object {
	return d.r.DeepCopy()
}

func (d *SelfSubjectAccessReviewDie) GetObjectKind() schema.ObjectKind {
	r := d.DieRelease()
	return r.GetObjectKind()
}

func (d *SelfSubjectAccessReviewDie) MarshalJSON() ([]byte, error) {
	return json.Marshal(d.r)
}

func (d *SelfSubjectAccessReviewDie) UnmarshalJSON(b []byte) error {
	if !d.mutable {
		return fmtx.Errorf("cannot unmarshal into immutable dies, create a mutable version first")
	}
	resource := &authorizationv1.SelfSubjectAccessReview{}
	err := json.Unmarshal(b, resource)
	*d = *d.DieFeed(*resource)
	return err
}

// DieDefaultTypeMetadata sets the APIVersion and Kind to "authorization.k8s.io/v1" and "SelfSubjectAccessReview" respectively.
func (d *SelfSubjectAccessReviewDie) DieDefaultTypeMetadata() *SelfSubjectAccessReviewDie {
	return d.DieStamp(func(r *authorizationv1.SelfSubjectAccessReview) {
		r.APIVersion = "authorization.k8s.io/v1"
		r.Kind = "SelfSubjectAccessReview"
	})
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (d *SelfSubjectAccessReviewDie) APIVersion(v string) *SelfSubjectAccessReviewDie {
	return d.DieStamp(func(r *authorizationv1.SelfSubjectAccessReview) {
		r.APIVersion = v
	})
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (d *SelfSubjectAccessReviewDie) Kind(v string) *SelfSubjectAccessReviewDie {
	return d.DieStamp(func(r *authorizationv1.SelfSubjectAccessReview) {
		r.Kind = v
	})
}

// TypeMetadata standard object's type metadata.
func (d *SelfSubjectAccessReviewDie) TypeMetadata(v apismetav1.TypeMeta) *SelfSubjectAccessReviewDie {
	return d.DieStamp(func(r *authorizationv1.SelfSubjectAccessReview) {
		r.TypeMeta = v
	})
}

// TypeMetadataDie stamps the resource's TypeMeta field with a mutable die.
func (d *SelfSubjectAccessReviewDie) TypeMetadataDie(fn func(d *metav1.TypeMetaDie)) *SelfSubjectAccessReviewDie {
	return d.DieStamp(func(r *authorizationv1.SelfSubjectAccessReview) {
		d := metav1.TypeMetaBlank.DieImmutable(false).DieFeed(r.TypeMeta)
		fn(d)
		r.TypeMeta = d.DieRelease()
	})
}

// Metadata standard object's metadata.
func (d *SelfSubjectAccessReviewDie) Metadata(v apismetav1.ObjectMeta) *SelfSubjectAccessReviewDie {
	return d.DieStamp(func(r *authorizationv1.SelfSubjectAccessReview) {
		r.ObjectMeta = v
	})
}

// MetadataDie stamps the resource's ObjectMeta field with a mutable die.
func (d *SelfSubjectAccessReviewDie) MetadataDie(fn func(d *metav1.ObjectMetaDie)) *SelfSubjectAccessReviewDie {
	return d.DieStamp(func(r *authorizationv1.SelfSubjectAccessReview) {
		d := metav1.ObjectMetaBlank.DieImmutable(false).DieFeed(r.ObjectMeta)
		fn(d)
		r.ObjectMeta = d.DieRelease()
	})
}

// SpecDie stamps the resource's spec field with a mutable die.
func (d *SelfSubjectAccessReviewDie) SpecDie(fn func(d *SelfSubjectAccessReviewSpecDie)) *SelfSubjectAccessReviewDie {
	return d.DieStamp(func(r *authorizationv1.SelfSubjectAccessReview) {
		d := SelfSubjectAccessReviewSpecBlank.DieImmutable(false).DieFeed(r.Spec)
		fn(d)
		r.Spec = d.DieRelease()
	})
}

// StatusDie stamps the resource's status field with a mutable die.
func (d *SelfSubjectAccessReviewDie) StatusDie(fn func(d *SubjectAccessReviewStatusDie)) *SelfSubjectAccessReviewDie {
	return d.DieStamp(func(r *authorizationv1.SelfSubjectAccessReview) {
		d := SubjectAccessReviewStatusBlank.DieImmutable(false).DieFeed(r.Status)
		fn(d)
		r.Status = d.DieRelease()
	})
}

// Spec holds information about the request being evaluated.  user and groups must be empty
func (d *SelfSubjectAccessReviewDie) Spec(v authorizationv1.SelfSubjectAccessReviewSpec) *SelfSubjectAccessReviewDie {
	return d.DieStamp(func(r *authorizationv1.SelfSubjectAccessReview) {
		r.Spec = v
	})
}

// Status is filled in by the server and indicates whether the request is allowed or not
func (d *SelfSubjectAccessReviewDie) Status(v authorizationv1.SubjectAccessReviewStatus) *SelfSubjectAccessReviewDie {
	return d.DieStamp(func(r *authorizationv1.SelfSubjectAccessReview) {
		r.Status = v
	})
}

var SelfSubjectAccessReviewSpecBlank = (&SelfSubjectAccessReviewSpecDie{}).DieFeed(authorizationv1.SelfSubjectAccessReviewSpec{})

type SelfSubjectAccessReviewSpecDie struct {
	mutable bool
	r       authorizationv1.SelfSubjectAccessReviewSpec
	seal    authorizationv1.SelfSubjectAccessReviewSpec
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *SelfSubjectAccessReviewSpecDie) DieImmutable(immutable bool) *SelfSubjectAccessReviewSpecDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *SelfSubjectAccessReviewSpecDie) DieFeed(r authorizationv1.SelfSubjectAccessReviewSpec) *SelfSubjectAccessReviewSpecDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &SelfSubjectAccessReviewSpecDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *SelfSubjectAccessReviewSpecDie) DieFeedPtr(r *authorizationv1.SelfSubjectAccessReviewSpec) *SelfSubjectAccessReviewSpecDie {
	if r == nil {
		r = &authorizationv1.SelfSubjectAccessReviewSpec{}
	}
	return d.DieFeed(*r)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *SelfSubjectAccessReviewSpecDie) DieFeedJSON(j []byte) *SelfSubjectAccessReviewSpecDie {
	r := authorizationv1.SelfSubjectAccessReviewSpec{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *SelfSubjectAccessReviewSpecDie) DieFeedYAML(y []byte) *SelfSubjectAccessReviewSpecDie {
	r := authorizationv1.SelfSubjectAccessReviewSpec{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *SelfSubjectAccessReviewSpecDie) DieFeedYAMLFile(name string) *SelfSubjectAccessReviewSpecDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *SelfSubjectAccessReviewSpecDie) DieFeedRawExtension(raw runtime.RawExtension) *SelfSubjectAccessReviewSpecDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *SelfSubjectAccessReviewSpecDie) DieRelease() authorizationv1.SelfSubjectAccessReviewSpec {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *SelfSubjectAccessReviewSpecDie) DieReleasePtr() *authorizationv1.SelfSubjectAccessReviewSpec {
	r := d.DieRelease()
	return &r
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *SelfSubjectAccessReviewSpecDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *SelfSubjectAccessReviewSpecDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *SelfSubjectAccessReviewSpecDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *SelfSubjectAccessReviewSpecDie) DieStamp(fn func(r *authorizationv1.SelfSubjectAccessReviewSpec)) *SelfSubjectAccessReviewSpecDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// Experimental: DieStampAt uses a JSON path (http://goessner.net/articles/JsonPath/) expression to stamp portions of the resource. The callback is invoked with each JSON path match. Panics if the callback function does not accept a single argument of the same type or a pointer to that type as found on the resource at the target location.
//
// Future iterations will improve type coercion from the resource to the callback argument.
func (d *SelfSubjectAccessReviewSpecDie) DieStampAt(jp string, fn interface{}) *SelfSubjectAccessReviewSpecDie {
	return d.DieStamp(func(r *authorizationv1.SelfSubjectAccessReviewSpec) {
		if ni := reflectx.ValueOf(fn).Type().NumIn(); ni != 1 {
			panic(fmtx.Errorf("callback function must have 1 input parameters, found %d", ni))
		}
		if no := reflectx.ValueOf(fn).Type().NumOut(); no != 0 {
			panic(fmtx.Errorf("callback function must have 0 output parameters, found %d", no))
		}

		cp := jsonpath.New("")
		if err := cp.Parse(fmtx.Sprintf("{%s}", jp)); err != nil {
			panic(err)
		}
		cr, err := cp.FindResults(r)
		if err != nil {
			// errors are expected if a path is not found
			return
		}
		for _, cv := range cr[0] {
			arg0t := reflectx.ValueOf(fn).Type().In(0)

			var args []reflectx.Value
			if cv.Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv}
			} else if cv.CanAddr() && cv.Addr().Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv.Addr()}
			} else {
				panic(fmtx.Errorf("callback function must accept value of type %q, found type %q", cv.Type(), arg0t))
			}

			reflectx.ValueOf(fn).Call(args)
		}
	})
}

// DieWith returns a new die after passing the current die to the callback function. The passed die is mutable.
func (d *SelfSubjectAccessReviewSpecDie) DieWith(fns ...func(d *SelfSubjectAccessReviewSpecDie)) *SelfSubjectAccessReviewSpecDie {
	nd := SelfSubjectAccessReviewSpecBlank.DieFeed(d.DieRelease()).DieImmutable(false)
	for _, fn := range fns {
		if fn != nil {
			fn(nd)
		}
	}
	return d.DieFeed(nd.DieRelease())
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *SelfSubjectAccessReviewSpecDie) DeepCopy() *SelfSubjectAccessReviewSpecDie {
	r := *d.r.DeepCopy()
	return &SelfSubjectAccessReviewSpecDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieSeal returns a new die for the current die's state that is sealed for comparison in future diff and patch operations.
func (d *SelfSubjectAccessReviewSpecDie) DieSeal() *SelfSubjectAccessReviewSpecDie {
	return d.DieSealFeed(d.r)
}

// DieSealFeed returns a new die for the current die's state that uses a specific resource for comparison in future diff and patch operations.
func (d *SelfSubjectAccessReviewSpecDie) DieSealFeed(r authorizationv1.SelfSubjectAccessReviewSpec) *SelfSubjectAccessReviewSpecDie {
	if !d.mutable {
		d = d.DeepCopy()
	}
	d.seal = *r.DeepCopy()
	return d
}

// DieSealFeedPtr returns a new die for the current die's state that uses a specific resource pointer for comparison in future diff and patch operations. If the resource is nil, the empty value is used instead.
func (d *SelfSubjectAccessReviewSpecDie) DieSealFeedPtr(r *authorizationv1.SelfSubjectAccessReviewSpec) *SelfSubjectAccessReviewSpecDie {
	if r == nil {
		r = &authorizationv1.SelfSubjectAccessReviewSpec{}
	}
	return d.DieSealFeed(*r)
}

// DieSealRelease returns the sealed resource managed by the die.
func (d *SelfSubjectAccessReviewSpecDie) DieSealRelease() authorizationv1.SelfSubjectAccessReviewSpec {
	return *d.seal.DeepCopy()
}

// DieSealReleasePtr returns the sealed resource pointer managed by the die.
func (d *SelfSubjectAccessReviewSpecDie) DieSealReleasePtr() *authorizationv1.SelfSubjectAccessReviewSpec {
	r := d.DieSealRelease()
	return &r
}

// DieDiff uses cmp.Diff to compare the current value of the die with the sealed value.
func (d *SelfSubjectAccessReviewSpecDie) DieDiff(opts ...cmp.Option) string {
	return cmp.Diff(d.seal, d.r, opts...)
}

// DiePatch generates a patch between the current value of the die and the sealed value.
func (d *SelfSubjectAccessReviewSpecDie) DiePatch(patchType types.PatchType) ([]byte, error) {
	return patch.Create(d.seal, d.r, patchType)
}

// ResourceAttributesDie mutates ResourceAttributes as a die.
//
// ResourceAuthorizationAttributes describes information for a resource access request
func (d *SelfSubjectAccessReviewSpecDie) ResourceAttributesDie(fn func(d *ResourceAttributesDie)) *SelfSubjectAccessReviewSpecDie {
	return d.DieStamp(func(r *authorizationv1.SelfSubjectAccessReviewSpec) {
		d := ResourceAttributesBlank.DieImmutable(false).DieFeedPtr(r.ResourceAttributes)
		fn(d)
		r.ResourceAttributes = d.DieReleasePtr()
	})
}

// NonResourceAttributesDie mutates NonResourceAttributes as a die.
//
// NonResourceAttributes describes information for a non-resource access request
func (d *SelfSubjectAccessReviewSpecDie) NonResourceAttributesDie(fn func(d *NonResourceAttributesDie)) *SelfSubjectAccessReviewSpecDie {
	return d.DieStamp(func(r *authorizationv1.SelfSubjectAccessReviewSpec) {
		d := NonResourceAttributesBlank.DieImmutable(false).DieFeedPtr(r.NonResourceAttributes)
		fn(d)
		r.NonResourceAttributes = d.DieReleasePtr()
	})
}

// ResourceAuthorizationAttributes describes information for a resource access request
func (d *SelfSubjectAccessReviewSpecDie) ResourceAttributes(v *authorizationv1.ResourceAttributes) *SelfSubjectAccessReviewSpecDie {
	return d.DieStamp(func(r *authorizationv1.SelfSubjectAccessReviewSpec) {
		r.ResourceAttributes = v
	})
}

// NonResourceAttributes describes information for a non-resource access request
func (d *SelfSubjectAccessReviewSpecDie) NonResourceAttributes(v *authorizationv1.NonResourceAttributes) *SelfSubjectAccessReviewSpecDie {
	return d.DieStamp(func(r *authorizationv1.SelfSubjectAccessReviewSpec) {
		r.NonResourceAttributes = v
	})
}

var SelfSubjectRulesReviewBlank = (&SelfSubjectRulesReviewDie{}).DieFeed(authorizationv1.SelfSubjectRulesReview{})

type SelfSubjectRulesReviewDie struct {
	metav1.FrozenObjectMeta
	mutable bool
	r       authorizationv1.SelfSubjectRulesReview
	seal    authorizationv1.SelfSubjectRulesReview
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *SelfSubjectRulesReviewDie) DieImmutable(immutable bool) *SelfSubjectRulesReviewDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *SelfSubjectRulesReviewDie) DieFeed(r authorizationv1.SelfSubjectRulesReview) *SelfSubjectRulesReviewDie {
	if d.mutable {
		d.FrozenObjectMeta = metav1.FreezeObjectMeta(r.ObjectMeta)
		d.r = r
		return d
	}
	return &SelfSubjectRulesReviewDie{
		FrozenObjectMeta: metav1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
		seal:             d.seal,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *SelfSubjectRulesReviewDie) DieFeedPtr(r *authorizationv1.SelfSubjectRulesReview) *SelfSubjectRulesReviewDie {
	if r == nil {
		r = &authorizationv1.SelfSubjectRulesReview{}
	}
	return d.DieFeed(*r)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *SelfSubjectRulesReviewDie) DieFeedJSON(j []byte) *SelfSubjectRulesReviewDie {
	r := authorizationv1.SelfSubjectRulesReview{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *SelfSubjectRulesReviewDie) DieFeedYAML(y []byte) *SelfSubjectRulesReviewDie {
	r := authorizationv1.SelfSubjectRulesReview{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *SelfSubjectRulesReviewDie) DieFeedYAMLFile(name string) *SelfSubjectRulesReviewDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *SelfSubjectRulesReviewDie) DieFeedRawExtension(raw runtime.RawExtension) *SelfSubjectRulesReviewDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *SelfSubjectRulesReviewDie) DieRelease() authorizationv1.SelfSubjectRulesReview {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *SelfSubjectRulesReviewDie) DieReleasePtr() *authorizationv1.SelfSubjectRulesReview {
	r := d.DieRelease()
	return &r
}

// DieReleaseUnstructured returns the resource managed by the die as an unstructured object. Panics on error.
func (d *SelfSubjectRulesReviewDie) DieReleaseUnstructured() *unstructured.Unstructured {
	r := d.DieReleasePtr()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(r)
	if err != nil {
		panic(err)
	}
	return &unstructured.Unstructured{
		Object: u,
	}
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *SelfSubjectRulesReviewDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *SelfSubjectRulesReviewDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *SelfSubjectRulesReviewDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *SelfSubjectRulesReviewDie) DieStamp(fn func(r *authorizationv1.SelfSubjectRulesReview)) *SelfSubjectRulesReviewDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// Experimental: DieStampAt uses a JSON path (http://goessner.net/articles/JsonPath/) expression to stamp portions of the resource. The callback is invoked with each JSON path match. Panics if the callback function does not accept a single argument of the same type or a pointer to that type as found on the resource at the target location.
//
// Future iterations will improve type coercion from the resource to the callback argument.
func (d *SelfSubjectRulesReviewDie) DieStampAt(jp string, fn interface{}) *SelfSubjectRulesReviewDie {
	return d.DieStamp(func(r *authorizationv1.SelfSubjectRulesReview) {
		if ni := reflectx.ValueOf(fn).Type().NumIn(); ni != 1 {
			panic(fmtx.Errorf("callback function must have 1 input parameters, found %d", ni))
		}
		if no := reflectx.ValueOf(fn).Type().NumOut(); no != 0 {
			panic(fmtx.Errorf("callback function must have 0 output parameters, found %d", no))
		}

		cp := jsonpath.New("")
		if err := cp.Parse(fmtx.Sprintf("{%s}", jp)); err != nil {
			panic(err)
		}
		cr, err := cp.FindResults(r)
		if err != nil {
			// errors are expected if a path is not found
			return
		}
		for _, cv := range cr[0] {
			arg0t := reflectx.ValueOf(fn).Type().In(0)

			var args []reflectx.Value
			if cv.Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv}
			} else if cv.CanAddr() && cv.Addr().Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv.Addr()}
			} else {
				panic(fmtx.Errorf("callback function must accept value of type %q, found type %q", cv.Type(), arg0t))
			}

			reflectx.ValueOf(fn).Call(args)
		}
	})
}

// DieWith returns a new die after passing the current die to the callback function. The passed die is mutable.
func (d *SelfSubjectRulesReviewDie) DieWith(fns ...func(d *SelfSubjectRulesReviewDie)) *SelfSubjectRulesReviewDie {
	nd := SelfSubjectRulesReviewBlank.DieFeed(d.DieRelease()).DieImmutable(false)
	for _, fn := range fns {
		if fn != nil {
			fn(nd)
		}
	}
	return d.DieFeed(nd.DieRelease())
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *SelfSubjectRulesReviewDie) DeepCopy() *SelfSubjectRulesReviewDie {
	r := *d.r.DeepCopy()
	return &SelfSubjectRulesReviewDie{
		FrozenObjectMeta: metav1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
		seal:             d.seal,
	}
}

// DieSeal returns a new die for the current die's state that is sealed for comparison in future diff and patch operations.
func (d *SelfSubjectRulesReviewDie) DieSeal() *SelfSubjectRulesReviewDie {
	return d.DieSealFeed(d.r)
}

// DieSealFeed returns a new die for the current die's state that uses a specific resource for comparison in future diff and patch operations.
func (d *SelfSubjectRulesReviewDie) DieSealFeed(r authorizationv1.SelfSubjectRulesReview) *SelfSubjectRulesReviewDie {
	if !d.mutable {
		d = d.DeepCopy()
	}
	d.seal = *r.DeepCopy()
	return d
}

// DieSealFeedPtr returns a new die for the current die's state that uses a specific resource pointer for comparison in future diff and patch operations. If the resource is nil, the empty value is used instead.
func (d *SelfSubjectRulesReviewDie) DieSealFeedPtr(r *authorizationv1.SelfSubjectRulesReview) *SelfSubjectRulesReviewDie {
	if r == nil {
		r = &authorizationv1.SelfSubjectRulesReview{}
	}
	return d.DieSealFeed(*r)
}

// DieSealRelease returns the sealed resource managed by the die.
func (d *SelfSubjectRulesReviewDie) DieSealRelease() authorizationv1.SelfSubjectRulesReview {
	return *d.seal.DeepCopy()
}

// DieSealReleasePtr returns the sealed resource pointer managed by the die.
func (d *SelfSubjectRulesReviewDie) DieSealReleasePtr() *authorizationv1.SelfSubjectRulesReview {
	r := d.DieSealRelease()
	return &r
}

// DieDiff uses cmp.Diff to compare the current value of the die with the sealed value.
func (d *SelfSubjectRulesReviewDie) DieDiff(opts ...cmp.Option) string {
	return cmp.Diff(d.seal, d.r, opts...)
}

// DiePatch generates a patch between the current value of the die and the sealed value.
func (d *SelfSubjectRulesReviewDie) DiePatch(patchType types.PatchType) ([]byte, error) {
	return patch.Create(d.seal, d.r, patchType)
}

var _ runtime.Object = (*SelfSubjectRulesReviewDie)(nil)

func (d *SelfSubjectRulesReviewDie) DeepCopyObject() runtime.Object {
	return d.r.DeepCopy()
}

func (d *SelfSubjectRulesReviewDie) GetObjectKind() schema.ObjectKind {
	r := d.DieRelease()
	return r.GetObjectKind()
}

func (d *SelfSubjectRulesReviewDie) MarshalJSON() ([]byte, error) {
	return json.Marshal(d.r)
}

func (d *SelfSubjectRulesReviewDie) UnmarshalJSON(b []byte) error {
	if !d.mutable {
		return fmtx.Errorf("cannot unmarshal into immutable dies, create a mutable version first")
	}
	resource := &authorizationv1.SelfSubjectRulesReview{}
	err := json.Unmarshal(b, resource)
	*d = *d.DieFeed(*resource)
	return err
}

// DieDefaultTypeMetadata sets the APIVersion and Kind to "authorization.k8s.io/v1" and "SelfSubjectRulesReview" respectively.
func (d *SelfSubjectRulesReviewDie) DieDefaultTypeMetadata() *SelfSubjectRulesReviewDie {
	return d.DieStamp(func(r *authorizationv1.SelfSubjectRulesReview) {
		r.APIVersion = "authorization.k8s.io/v1"
		r.Kind = "SelfSubjectRulesReview"
	})
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (d *SelfSubjectRulesReviewDie) APIVersion(v string) *SelfSubjectRulesReviewDie {
	return d.DieStamp(func(r *authorizationv1.SelfSubjectRulesReview) {
		r.APIVersion = v
	})
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (d *SelfSubjectRulesReviewDie) Kind(v string) *SelfSubjectRulesReviewDie {
	return d.DieStamp(func(r *authorizationv1.SelfSubjectRulesReview) {
		r.Kind = v
	})
}

// TypeMetadata standard object's type metadata.
func (d *SelfSubjectRulesReviewDie) TypeMetadata(v apismetav1.TypeMeta) *SelfSubjectRulesReviewDie {
	return d.DieStamp(func(r *authorizationv1.SelfSubjectRulesReview) {
		r.TypeMeta = v
	})
}

// TypeMetadataDie stamps the resource's TypeMeta field with a mutable die.
func (d *SelfSubjectRulesReviewDie) TypeMetadataDie(fn func(d *metav1.TypeMetaDie)) *SelfSubjectRulesReviewDie {
	return d.DieStamp(func(r *authorizationv1.SelfSubjectRulesReview) {
		d := metav1.TypeMetaBlank.DieImmutable(false).DieFeed(r.TypeMeta)
		fn(d)
		r.TypeMeta = d.DieRelease()
	})
}

// Metadata standard object's metadata.
func (d *SelfSubjectRulesReviewDie) Metadata(v apismetav1.ObjectMeta) *SelfSubjectRulesReviewDie {
	return d.DieStamp(func(r *authorizationv1.SelfSubjectRulesReview) {
		r.ObjectMeta = v
	})
}

// MetadataDie stamps the resource's ObjectMeta field with a mutable die.
func (d *SelfSubjectRulesReviewDie) MetadataDie(fn func(d *metav1.ObjectMetaDie)) *SelfSubjectRulesReviewDie {
	return d.DieStamp(func(r *authorizationv1.SelfSubjectRulesReview) {
		d := metav1.ObjectMetaBlank.DieImmutable(false).DieFeed(r.ObjectMeta)
		fn(d)
		r.ObjectMeta = d.DieRelease()
	})
}

// SpecDie stamps the resource's spec field with a mutable die.
func (d *SelfSubjectRulesReviewDie) SpecDie(fn func(d *SelfSubjectRulesReviewSpecDie)) *SelfSubjectRulesReviewDie {
	return d.DieStamp(func(r *authorizationv1.SelfSubjectRulesReview) {
		d := SelfSubjectRulesReviewSpecBlank.DieImmutable(false).DieFeed(r.Spec)
		fn(d)
		r.Spec = d.DieRelease()
	})
}

// StatusDie stamps the resource's status field with a mutable die.
func (d *SelfSubjectRulesReviewDie) StatusDie(fn func(d *SubjectRulesReviewStatusDie)) *SelfSubjectRulesReviewDie {
	return d.DieStamp(func(r *authorizationv1.SelfSubjectRulesReview) {
		d := SubjectRulesReviewStatusBlank.DieImmutable(false).DieFeed(r.Status)
		fn(d)
		r.Status = d.DieRelease()
	})
}

// Spec holds information about the request being evaluated.
func (d *SelfSubjectRulesReviewDie) Spec(v authorizationv1.SelfSubjectRulesReviewSpec) *SelfSubjectRulesReviewDie {
	return d.DieStamp(func(r *authorizationv1.SelfSubjectRulesReview) {
		r.Spec = v
	})
}

// Status is filled in by the server and indicates the set of actions a user can perform.
func (d *SelfSubjectRulesReviewDie) Status(v authorizationv1.SubjectRulesReviewStatus) *SelfSubjectRulesReviewDie {
	return d.DieStamp(func(r *authorizationv1.SelfSubjectRulesReview) {
		r.Status = v
	})
}

var SelfSubjectRulesReviewSpecBlank = (&SelfSubjectRulesReviewSpecDie{}).DieFeed(authorizationv1.SelfSubjectRulesReviewSpec{})

type SelfSubjectRulesReviewSpecDie struct {
	mutable bool
	r       authorizationv1.SelfSubjectRulesReviewSpec
	seal    authorizationv1.SelfSubjectRulesReviewSpec
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *SelfSubjectRulesReviewSpecDie) DieImmutable(immutable bool) *SelfSubjectRulesReviewSpecDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *SelfSubjectRulesReviewSpecDie) DieFeed(r authorizationv1.SelfSubjectRulesReviewSpec) *SelfSubjectRulesReviewSpecDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &SelfSubjectRulesReviewSpecDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *SelfSubjectRulesReviewSpecDie) DieFeedPtr(r *authorizationv1.SelfSubjectRulesReviewSpec) *SelfSubjectRulesReviewSpecDie {
	if r == nil {
		r = &authorizationv1.SelfSubjectRulesReviewSpec{}
	}
	return d.DieFeed(*r)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *SelfSubjectRulesReviewSpecDie) DieFeedJSON(j []byte) *SelfSubjectRulesReviewSpecDie {
	r := authorizationv1.SelfSubjectRulesReviewSpec{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *SelfSubjectRulesReviewSpecDie) DieFeedYAML(y []byte) *SelfSubjectRulesReviewSpecDie {
	r := authorizationv1.SelfSubjectRulesReviewSpec{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *SelfSubjectRulesReviewSpecDie) DieFeedYAMLFile(name string) *SelfSubjectRulesReviewSpecDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *SelfSubjectRulesReviewSpecDie) DieFeedRawExtension(raw runtime.RawExtension) *SelfSubjectRulesReviewSpecDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *SelfSubjectRulesReviewSpecDie) DieRelease() authorizationv1.SelfSubjectRulesReviewSpec {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *SelfSubjectRulesReviewSpecDie) DieReleasePtr() *authorizationv1.SelfSubjectRulesReviewSpec {
	r := d.DieRelease()
	return &r
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *SelfSubjectRulesReviewSpecDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *SelfSubjectRulesReviewSpecDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *SelfSubjectRulesReviewSpecDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *SelfSubjectRulesReviewSpecDie) DieStamp(fn func(r *authorizationv1.SelfSubjectRulesReviewSpec)) *SelfSubjectRulesReviewSpecDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// Experimental: DieStampAt uses a JSON path (http://goessner.net/articles/JsonPath/) expression to stamp portions of the resource. The callback is invoked with each JSON path match. Panics if the callback function does not accept a single argument of the same type or a pointer to that type as found on the resource at the target location.
//
// Future iterations will improve type coercion from the resource to the callback argument.
func (d *SelfSubjectRulesReviewSpecDie) DieStampAt(jp string, fn interface{}) *SelfSubjectRulesReviewSpecDie {
	return d.DieStamp(func(r *authorizationv1.SelfSubjectRulesReviewSpec) {
		if ni := reflectx.ValueOf(fn).Type().NumIn(); ni != 1 {
			panic(fmtx.Errorf("callback function must have 1 input parameters, found %d", ni))
		}
		if no := reflectx.ValueOf(fn).Type().NumOut(); no != 0 {
			panic(fmtx.Errorf("callback function must have 0 output parameters, found %d", no))
		}

		cp := jsonpath.New("")
		if err := cp.Parse(fmtx.Sprintf("{%s}", jp)); err != nil {
			panic(err)
		}
		cr, err := cp.FindResults(r)
		if err != nil {
			// errors are expected if a path is not found
			return
		}
		for _, cv := range cr[0] {
			arg0t := reflectx.ValueOf(fn).Type().In(0)

			var args []reflectx.Value
			if cv.Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv}
			} else if cv.CanAddr() && cv.Addr().Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv.Addr()}
			} else {
				panic(fmtx.Errorf("callback function must accept value of type %q, found type %q", cv.Type(), arg0t))
			}

			reflectx.ValueOf(fn).Call(args)
		}
	})
}

// DieWith returns a new die after passing the current die to the callback function. The passed die is mutable.
func (d *SelfSubjectRulesReviewSpecDie) DieWith(fns ...func(d *SelfSubjectRulesReviewSpecDie)) *SelfSubjectRulesReviewSpecDie {
	nd := SelfSubjectRulesReviewSpecBlank.DieFeed(d.DieRelease()).DieImmutable(false)
	for _, fn := range fns {
		if fn != nil {
			fn(nd)
		}
	}
	return d.DieFeed(nd.DieRelease())
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *SelfSubjectRulesReviewSpecDie) DeepCopy() *SelfSubjectRulesReviewSpecDie {
	r := *d.r.DeepCopy()
	return &SelfSubjectRulesReviewSpecDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieSeal returns a new die for the current die's state that is sealed for comparison in future diff and patch operations.
func (d *SelfSubjectRulesReviewSpecDie) DieSeal() *SelfSubjectRulesReviewSpecDie {
	return d.DieSealFeed(d.r)
}

// DieSealFeed returns a new die for the current die's state that uses a specific resource for comparison in future diff and patch operations.
func (d *SelfSubjectRulesReviewSpecDie) DieSealFeed(r authorizationv1.SelfSubjectRulesReviewSpec) *SelfSubjectRulesReviewSpecDie {
	if !d.mutable {
		d = d.DeepCopy()
	}
	d.seal = *r.DeepCopy()
	return d
}

// DieSealFeedPtr returns a new die for the current die's state that uses a specific resource pointer for comparison in future diff and patch operations. If the resource is nil, the empty value is used instead.
func (d *SelfSubjectRulesReviewSpecDie) DieSealFeedPtr(r *authorizationv1.SelfSubjectRulesReviewSpec) *SelfSubjectRulesReviewSpecDie {
	if r == nil {
		r = &authorizationv1.SelfSubjectRulesReviewSpec{}
	}
	return d.DieSealFeed(*r)
}

// DieSealRelease returns the sealed resource managed by the die.
func (d *SelfSubjectRulesReviewSpecDie) DieSealRelease() authorizationv1.SelfSubjectRulesReviewSpec {
	return *d.seal.DeepCopy()
}

// DieSealReleasePtr returns the sealed resource pointer managed by the die.
func (d *SelfSubjectRulesReviewSpecDie) DieSealReleasePtr() *authorizationv1.SelfSubjectRulesReviewSpec {
	r := d.DieSealRelease()
	return &r
}

// DieDiff uses cmp.Diff to compare the current value of the die with the sealed value.
func (d *SelfSubjectRulesReviewSpecDie) DieDiff(opts ...cmp.Option) string {
	return cmp.Diff(d.seal, d.r, opts...)
}

// DiePatch generates a patch between the current value of the die and the sealed value.
func (d *SelfSubjectRulesReviewSpecDie) DiePatch(patchType types.PatchType) ([]byte, error) {
	return patch.Create(d.seal, d.r, patchType)
}

// Namespace to evaluate rules for. Required.
func (d *SelfSubjectRulesReviewSpecDie) Namespace(v string) *SelfSubjectRulesReviewSpecDie {
	return d.DieStamp(func(r *authorizationv1.SelfSubjectRulesReviewSpec) {
		r.Namespace = v
	})
}

var SubjectRulesReviewStatusBlank = (&SubjectRulesReviewStatusDie{}).DieFeed(authorizationv1.SubjectRulesReviewStatus{})

type SubjectRulesReviewStatusDie struct {
	mutable bool
	r       authorizationv1.SubjectRulesReviewStatus
	seal    authorizationv1.SubjectRulesReviewStatus
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *SubjectRulesReviewStatusDie) DieImmutable(immutable bool) *SubjectRulesReviewStatusDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *SubjectRulesReviewStatusDie) DieFeed(r authorizationv1.SubjectRulesReviewStatus) *SubjectRulesReviewStatusDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &SubjectRulesReviewStatusDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *SubjectRulesReviewStatusDie) DieFeedPtr(r *authorizationv1.SubjectRulesReviewStatus) *SubjectRulesReviewStatusDie {
	if r == nil {
		r = &authorizationv1.SubjectRulesReviewStatus{}
	}
	return d.DieFeed(*r)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *SubjectRulesReviewStatusDie) DieFeedJSON(j []byte) *SubjectRulesReviewStatusDie {
	r := authorizationv1.SubjectRulesReviewStatus{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *SubjectRulesReviewStatusDie) DieFeedYAML(y []byte) *SubjectRulesReviewStatusDie {
	r := authorizationv1.SubjectRulesReviewStatus{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *SubjectRulesReviewStatusDie) DieFeedYAMLFile(name string) *SubjectRulesReviewStatusDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *SubjectRulesReviewStatusDie) DieFeedRawExtension(raw runtime.RawExtension) *SubjectRulesReviewStatusDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *SubjectRulesReviewStatusDie) DieRelease() authorizationv1.SubjectRulesReviewStatus {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *SubjectRulesReviewStatusDie) DieReleasePtr() *authorizationv1.SubjectRulesReviewStatus {
	r := d.DieRelease()
	return &r
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *SubjectRulesReviewStatusDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *SubjectRulesReviewStatusDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *SubjectRulesReviewStatusDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *SubjectRulesReviewStatusDie) DieStamp(fn func(r *authorizationv1.SubjectRulesReviewStatus)) *SubjectRulesReviewStatusDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// Experimental: DieStampAt uses a JSON path (http://goessner.net/articles/JsonPath/) expression to stamp portions of the resource. The callback is invoked with each JSON path match. Panics if the callback function does not accept a single argument of the same type or a pointer to that type as found on the resource at the target location.
//
// Future iterations will improve type coercion from the resource to the callback argument.
func (d *SubjectRulesReviewStatusDie) DieStampAt(jp string, fn interface{}) *SubjectRulesReviewStatusDie {
	return d.DieStamp(func(r *authorizationv1.SubjectRulesReviewStatus) {
		if ni := reflectx.ValueOf(fn).Type().NumIn(); ni != 1 {
			panic(fmtx.Errorf("callback function must have 1 input parameters, found %d", ni))
		}
		if no := reflectx.ValueOf(fn).Type().NumOut(); no != 0 {
			panic(fmtx.Errorf("callback function must have 0 output parameters, found %d", no))
		}

		cp := jsonpath.New("")
		if err := cp.Parse(fmtx.Sprintf("{%s}", jp)); err != nil {
			panic(err)
		}
		cr, err := cp.FindResults(r)
		if err != nil {
			// errors are expected if a path is not found
			return
		}
		for _, cv := range cr[0] {
			arg0t := reflectx.ValueOf(fn).Type().In(0)

			var args []reflectx.Value
			if cv.Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv}
			} else if cv.CanAddr() && cv.Addr().Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv.Addr()}
			} else {
				panic(fmtx.Errorf("callback function must accept value of type %q, found type %q", cv.Type(), arg0t))
			}

			reflectx.ValueOf(fn).Call(args)
		}
	})
}

// DieWith returns a new die after passing the current die to the callback function. The passed die is mutable.
func (d *SubjectRulesReviewStatusDie) DieWith(fns ...func(d *SubjectRulesReviewStatusDie)) *SubjectRulesReviewStatusDie {
	nd := SubjectRulesReviewStatusBlank.DieFeed(d.DieRelease()).DieImmutable(false)
	for _, fn := range fns {
		if fn != nil {
			fn(nd)
		}
	}
	return d.DieFeed(nd.DieRelease())
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *SubjectRulesReviewStatusDie) DeepCopy() *SubjectRulesReviewStatusDie {
	r := *d.r.DeepCopy()
	return &SubjectRulesReviewStatusDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieSeal returns a new die for the current die's state that is sealed for comparison in future diff and patch operations.
func (d *SubjectRulesReviewStatusDie) DieSeal() *SubjectRulesReviewStatusDie {
	return d.DieSealFeed(d.r)
}

// DieSealFeed returns a new die for the current die's state that uses a specific resource for comparison in future diff and patch operations.
func (d *SubjectRulesReviewStatusDie) DieSealFeed(r authorizationv1.SubjectRulesReviewStatus) *SubjectRulesReviewStatusDie {
	if !d.mutable {
		d = d.DeepCopy()
	}
	d.seal = *r.DeepCopy()
	return d
}

// DieSealFeedPtr returns a new die for the current die's state that uses a specific resource pointer for comparison in future diff and patch operations. If the resource is nil, the empty value is used instead.
func (d *SubjectRulesReviewStatusDie) DieSealFeedPtr(r *authorizationv1.SubjectRulesReviewStatus) *SubjectRulesReviewStatusDie {
	if r == nil {
		r = &authorizationv1.SubjectRulesReviewStatus{}
	}
	return d.DieSealFeed(*r)
}

// DieSealRelease returns the sealed resource managed by the die.
func (d *SubjectRulesReviewStatusDie) DieSealRelease() authorizationv1.SubjectRulesReviewStatus {
	return *d.seal.DeepCopy()
}

// DieSealReleasePtr returns the sealed resource pointer managed by the die.
func (d *SubjectRulesReviewStatusDie) DieSealReleasePtr() *authorizationv1.SubjectRulesReviewStatus {
	r := d.DieSealRelease()
	return &r
}

// DieDiff uses cmp.Diff to compare the current value of the die with the sealed value.
func (d *SubjectRulesReviewStatusDie) DieDiff(opts ...cmp.Option) string {
	return cmp.Diff(d.seal, d.r, opts...)
}

// DiePatch generates a patch between the current value of the die and the sealed value.
func (d *SubjectRulesReviewStatusDie) DiePatch(patchType types.PatchType) ([]byte, error) {
	return patch.Create(d.seal, d.r, patchType)
}

// ResourceRulesDie replaces ResourceRules by collecting the released value from each die passed.
//
// ResourceRules is the list of actions the subject is allowed to perform on resources.
//
// The list ordering isn't significant, may contain duplicates, and possibly be incomplete.
func (d *SubjectRulesReviewStatusDie) ResourceRulesDie(v ...*ResourceRuleDie) *SubjectRulesReviewStatusDie {
	return d.DieStamp(func(r *authorizationv1.SubjectRulesReviewStatus) {
		r.ResourceRules = make([]authorizationv1.ResourceRule, len(v))
		for i := range v {
			r.ResourceRules[i] = v[i].DieRelease()
		}
	})
}

// NonResourceRulesDie replaces NonResourceRules by collecting the released value from each die passed.
//
// NonResourceRules is the list of actions the subject is allowed to perform on non-resources.
//
// The list ordering isn't significant, may contain duplicates, and possibly be incomplete.
func (d *SubjectRulesReviewStatusDie) NonResourceRulesDie(v ...*NonResourceRuleDie) *SubjectRulesReviewStatusDie {
	return d.DieStamp(func(r *authorizationv1.SubjectRulesReviewStatus) {
		r.NonResourceRules = make([]authorizationv1.NonResourceRule, len(v))
		for i := range v {
			r.NonResourceRules[i] = v[i].DieRelease()
		}
	})
}

// ResourceRules is the list of actions the subject is allowed to perform on resources.
//
// The list ordering isn't significant, may contain duplicates, and possibly be incomplete.
func (d *SubjectRulesReviewStatusDie) ResourceRules(v ...authorizationv1.ResourceRule) *SubjectRulesReviewStatusDie {
	return d.DieStamp(func(r *authorizationv1.SubjectRulesReviewStatus) {
		r.ResourceRules = v
	})
}

// NonResourceRules is the list of actions the subject is allowed to perform on non-resources.
//
// The list ordering isn't significant, may contain duplicates, and possibly be incomplete.
func (d *SubjectRulesReviewStatusDie) NonResourceRules(v ...authorizationv1.NonResourceRule) *SubjectRulesReviewStatusDie {
	return d.DieStamp(func(r *authorizationv1.SubjectRulesReviewStatus) {
		r.NonResourceRules = v
	})
}

// Incomplete is true when the rules returned by this call are incomplete. This is most commonly
//
// encountered when an authorizer, such as an external authorizer, doesn't support rules evaluation.
func (d *SubjectRulesReviewStatusDie) Incomplete(v bool) *SubjectRulesReviewStatusDie {
	return d.DieStamp(func(r *authorizationv1.SubjectRulesReviewStatus) {
		r.Incomplete = v
	})
}

// EvaluationError can appear in combination with Rules. It indicates an error occurred during
//
// rule evaluation, such as an authorizer that doesn't support rule evaluation, and that
//
// ResourceRules and/or NonResourceRules may be incomplete.
func (d *SubjectRulesReviewStatusDie) EvaluationError(v string) *SubjectRulesReviewStatusDie {
	return d.DieStamp(func(r *authorizationv1.SubjectRulesReviewStatus) {
		r.EvaluationError = v
	})
}

var ResourceRuleBlank = (&ResourceRuleDie{}).DieFeed(authorizationv1.ResourceRule{})

type ResourceRuleDie struct {
	mutable bool
	r       authorizationv1.ResourceRule
	seal    authorizationv1.ResourceRule
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *ResourceRuleDie) DieImmutable(immutable bool) *ResourceRuleDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *ResourceRuleDie) DieFeed(r authorizationv1.ResourceRule) *ResourceRuleDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &ResourceRuleDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *ResourceRuleDie) DieFeedPtr(r *authorizationv1.ResourceRule) *ResourceRuleDie {
	if r == nil {
		r = &authorizationv1.ResourceRule{}
	}
	return d.DieFeed(*r)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *ResourceRuleDie) DieFeedJSON(j []byte) *ResourceRuleDie {
	r := authorizationv1.ResourceRule{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *ResourceRuleDie) DieFeedYAML(y []byte) *ResourceRuleDie {
	r := authorizationv1.ResourceRule{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *ResourceRuleDie) DieFeedYAMLFile(name string) *ResourceRuleDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *ResourceRuleDie) DieFeedRawExtension(raw runtime.RawExtension) *ResourceRuleDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *ResourceRuleDie) DieRelease() authorizationv1.ResourceRule {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *ResourceRuleDie) DieReleasePtr() *authorizationv1.ResourceRule {
	r := d.DieRelease()
	return &r
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *ResourceRuleDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *ResourceRuleDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *ResourceRuleDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *ResourceRuleDie) DieStamp(fn func(r *authorizationv1.ResourceRule)) *ResourceRuleDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// Experimental: DieStampAt uses a JSON path (http://goessner.net/articles/JsonPath/) expression to stamp portions of the resource. The callback is invoked with each JSON path match. Panics if the callback function does not accept a single argument of the same type or a pointer to that type as found on the resource at the target location.
//
// Future iterations will improve type coercion from the resource to the callback argument.
func (d *ResourceRuleDie) DieStampAt(jp string, fn interface{}) *ResourceRuleDie {
	return d.DieStamp(func(r *authorizationv1.ResourceRule) {
		if ni := reflectx.ValueOf(fn).Type().NumIn(); ni != 1 {
			panic(fmtx.Errorf("callback function must have 1 input parameters, found %d", ni))
		}
		if no := reflectx.ValueOf(fn).Type().NumOut(); no != 0 {
			panic(fmtx.Errorf("callback function must have 0 output parameters, found %d", no))
		}

		cp := jsonpath.New("")
		if err := cp.Parse(fmtx.Sprintf("{%s}", jp)); err != nil {
			panic(err)
		}
		cr, err := cp.FindResults(r)
		if err != nil {
			// errors are expected if a path is not found
			return
		}
		for _, cv := range cr[0] {
			arg0t := reflectx.ValueOf(fn).Type().In(0)

			var args []reflectx.Value
			if cv.Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv}
			} else if cv.CanAddr() && cv.Addr().Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv.Addr()}
			} else {
				panic(fmtx.Errorf("callback function must accept value of type %q, found type %q", cv.Type(), arg0t))
			}

			reflectx.ValueOf(fn).Call(args)
		}
	})
}

// DieWith returns a new die after passing the current die to the callback function. The passed die is mutable.
func (d *ResourceRuleDie) DieWith(fns ...func(d *ResourceRuleDie)) *ResourceRuleDie {
	nd := ResourceRuleBlank.DieFeed(d.DieRelease()).DieImmutable(false)
	for _, fn := range fns {
		if fn != nil {
			fn(nd)
		}
	}
	return d.DieFeed(nd.DieRelease())
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *ResourceRuleDie) DeepCopy() *ResourceRuleDie {
	r := *d.r.DeepCopy()
	return &ResourceRuleDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieSeal returns a new die for the current die's state that is sealed for comparison in future diff and patch operations.
func (d *ResourceRuleDie) DieSeal() *ResourceRuleDie {
	return d.DieSealFeed(d.r)
}

// DieSealFeed returns a new die for the current die's state that uses a specific resource for comparison in future diff and patch operations.
func (d *ResourceRuleDie) DieSealFeed(r authorizationv1.ResourceRule) *ResourceRuleDie {
	if !d.mutable {
		d = d.DeepCopy()
	}
	d.seal = *r.DeepCopy()
	return d
}

// DieSealFeedPtr returns a new die for the current die's state that uses a specific resource pointer for comparison in future diff and patch operations. If the resource is nil, the empty value is used instead.
func (d *ResourceRuleDie) DieSealFeedPtr(r *authorizationv1.ResourceRule) *ResourceRuleDie {
	if r == nil {
		r = &authorizationv1.ResourceRule{}
	}
	return d.DieSealFeed(*r)
}

// DieSealRelease returns the sealed resource managed by the die.
func (d *ResourceRuleDie) DieSealRelease() authorizationv1.ResourceRule {
	return *d.seal.DeepCopy()
}

// DieSealReleasePtr returns the sealed resource pointer managed by the die.
func (d *ResourceRuleDie) DieSealReleasePtr() *authorizationv1.ResourceRule {
	r := d.DieSealRelease()
	return &r
}

// DieDiff uses cmp.Diff to compare the current value of the die with the sealed value.
func (d *ResourceRuleDie) DieDiff(opts ...cmp.Option) string {
	return cmp.Diff(d.seal, d.r, opts...)
}

// DiePatch generates a patch between the current value of the die and the sealed value.
func (d *ResourceRuleDie) DiePatch(patchType types.PatchType) ([]byte, error) {
	return patch.Create(d.seal, d.r, patchType)
}

// Verb is a list of kubernetes resource API verbs, like: get, list, watch, create, update, delete, proxy.  "*" means all.
func (d *ResourceRuleDie) Verbs(v ...string) *ResourceRuleDie {
	return d.DieStamp(func(r *authorizationv1.ResourceRule) {
		r.Verbs = v
	})
}

// APIGroups is the name of the APIGroup that contains the resources.  If multiple API groups are specified, any action requested against one of
//
// the enumerated resources in any API group will be allowed.  "*" means all.
func (d *ResourceRuleDie) APIGroups(v ...string) *ResourceRuleDie {
	return d.DieStamp(func(r *authorizationv1.ResourceRule) {
		r.APIGroups = v
	})
}

// Resources is a list of resources this rule applies to.  "*" means all in the specified apiGroups.
//
// "*/foo" represents the subresource 'foo' for all resources in the specified apiGroups.
func (d *ResourceRuleDie) Resources(v ...string) *ResourceRuleDie {
	return d.DieStamp(func(r *authorizationv1.ResourceRule) {
		r.Resources = v
	})
}

// ResourceNames is an optional white list of names that the rule applies to.  An empty set means that everything is allowed.  "*" means all.
func (d *ResourceRuleDie) ResourceNames(v ...string) *ResourceRuleDie {
	return d.DieStamp(func(r *authorizationv1.ResourceRule) {
		r.ResourceNames = v
	})
}

var NonResourceRuleBlank = (&NonResourceRuleDie{}).DieFeed(authorizationv1.NonResourceRule{})

type NonResourceRuleDie struct {
	mutable bool
	r       authorizationv1.NonResourceRule
	seal    authorizationv1.NonResourceRule
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *NonResourceRuleDie) DieImmutable(immutable bool) *NonResourceRuleDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *NonResourceRuleDie) DieFeed(r authorizationv1.NonResourceRule) *NonResourceRuleDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &NonResourceRuleDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *NonResourceRuleDie) DieFeedPtr(r *authorizationv1.NonResourceRule) *NonResourceRuleDie {
	if r == nil {
		r = &authorizationv1.NonResourceRule{}
	}
	return d.DieFeed(*r)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *NonResourceRuleDie) DieFeedJSON(j []byte) *NonResourceRuleDie {
	r := authorizationv1.NonResourceRule{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *NonResourceRuleDie) DieFeedYAML(y []byte) *NonResourceRuleDie {
	r := authorizationv1.NonResourceRule{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *NonResourceRuleDie) DieFeedYAMLFile(name string) *NonResourceRuleDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *NonResourceRuleDie) DieFeedRawExtension(raw runtime.RawExtension) *NonResourceRuleDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *NonResourceRuleDie) DieRelease() authorizationv1.NonResourceRule {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *NonResourceRuleDie) DieReleasePtr() *authorizationv1.NonResourceRule {
	r := d.DieRelease()
	return &r
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *NonResourceRuleDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *NonResourceRuleDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *NonResourceRuleDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *NonResourceRuleDie) DieStamp(fn func(r *authorizationv1.NonResourceRule)) *NonResourceRuleDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// Experimental: DieStampAt uses a JSON path (http://goessner.net/articles/JsonPath/) expression to stamp portions of the resource. The callback is invoked with each JSON path match. Panics if the callback function does not accept a single argument of the same type or a pointer to that type as found on the resource at the target location.
//
// Future iterations will improve type coercion from the resource to the callback argument.
func (d *NonResourceRuleDie) DieStampAt(jp string, fn interface{}) *NonResourceRuleDie {
	return d.DieStamp(func(r *authorizationv1.NonResourceRule) {
		if ni := reflectx.ValueOf(fn).Type().NumIn(); ni != 1 {
			panic(fmtx.Errorf("callback function must have 1 input parameters, found %d", ni))
		}
		if no := reflectx.ValueOf(fn).Type().NumOut(); no != 0 {
			panic(fmtx.Errorf("callback function must have 0 output parameters, found %d", no))
		}

		cp := jsonpath.New("")
		if err := cp.Parse(fmtx.Sprintf("{%s}", jp)); err != nil {
			panic(err)
		}
		cr, err := cp.FindResults(r)
		if err != nil {
			// errors are expected if a path is not found
			return
		}
		for _, cv := range cr[0] {
			arg0t := reflectx.ValueOf(fn).Type().In(0)

			var args []reflectx.Value
			if cv.Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv}
			} else if cv.CanAddr() && cv.Addr().Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv.Addr()}
			} else {
				panic(fmtx.Errorf("callback function must accept value of type %q, found type %q", cv.Type(), arg0t))
			}

			reflectx.ValueOf(fn).Call(args)
		}
	})
}

// DieWith returns a new die after passing the current die to the callback function. The passed die is mutable.
func (d *NonResourceRuleDie) DieWith(fns ...func(d *NonResourceRuleDie)) *NonResourceRuleDie {
	nd := NonResourceRuleBlank.DieFeed(d.DieRelease()).DieImmutable(false)
	for _, fn := range fns {
		if fn != nil {
			fn(nd)
		}
	}
	return d.DieFeed(nd.DieRelease())
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *NonResourceRuleDie) DeepCopy() *NonResourceRuleDie {
	r := *d.r.DeepCopy()
	return &NonResourceRuleDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieSeal returns a new die for the current die's state that is sealed for comparison in future diff and patch operations.
func (d *NonResourceRuleDie) DieSeal() *NonResourceRuleDie {
	return d.DieSealFeed(d.r)
}

// DieSealFeed returns a new die for the current die's state that uses a specific resource for comparison in future diff and patch operations.
func (d *NonResourceRuleDie) DieSealFeed(r authorizationv1.NonResourceRule) *NonResourceRuleDie {
	if !d.mutable {
		d = d.DeepCopy()
	}
	d.seal = *r.DeepCopy()
	return d
}

// DieSealFeedPtr returns a new die for the current die's state that uses a specific resource pointer for comparison in future diff and patch operations. If the resource is nil, the empty value is used instead.
func (d *NonResourceRuleDie) DieSealFeedPtr(r *authorizationv1.NonResourceRule) *NonResourceRuleDie {
	if r == nil {
		r = &authorizationv1.NonResourceRule{}
	}
	return d.DieSealFeed(*r)
}

// DieSealRelease returns the sealed resource managed by the die.
func (d *NonResourceRuleDie) DieSealRelease() authorizationv1.NonResourceRule {
	return *d.seal.DeepCopy()
}

// DieSealReleasePtr returns the sealed resource pointer managed by the die.
func (d *NonResourceRuleDie) DieSealReleasePtr() *authorizationv1.NonResourceRule {
	r := d.DieSealRelease()
	return &r
}

// DieDiff uses cmp.Diff to compare the current value of the die with the sealed value.
func (d *NonResourceRuleDie) DieDiff(opts ...cmp.Option) string {
	return cmp.Diff(d.seal, d.r, opts...)
}

// DiePatch generates a patch between the current value of the die and the sealed value.
func (d *NonResourceRuleDie) DiePatch(patchType types.PatchType) ([]byte, error) {
	return patch.Create(d.seal, d.r, patchType)
}

// Verb is a list of kubernetes non-resource API verbs, like: get, post, put, delete, patch, head, options.  "*" means all.
func (d *NonResourceRuleDie) Verbs(v ...string) *NonResourceRuleDie {
	return d.DieStamp(func(r *authorizationv1.NonResourceRule) {
		r.Verbs = v
	})
}

// NonResourceURLs is a set of partial urls that a user should have access to.  *s are allowed, but only as the full,
//
// final step in the path.  "*" means all.
func (d *NonResourceRuleDie) NonResourceURLs(v ...string) *NonResourceRuleDie {
	return d.DieStamp(func(r *authorizationv1.NonResourceRule) {
		r.NonResourceURLs = v
	})
}

var SubjectAccessReviewBlank = (&SubjectAccessReviewDie{}).DieFeed(authorizationv1.SubjectAccessReview{})

type SubjectAccessReviewDie struct {
	metav1.FrozenObjectMeta
	mutable bool
	r       authorizationv1.SubjectAccessReview
	seal    authorizationv1.SubjectAccessReview
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *SubjectAccessReviewDie) DieImmutable(immutable bool) *SubjectAccessReviewDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *SubjectAccessReviewDie) DieFeed(r authorizationv1.SubjectAccessReview) *SubjectAccessReviewDie {
	if d.mutable {
		d.FrozenObjectMeta = metav1.FreezeObjectMeta(r.ObjectMeta)
		d.r = r
		return d
	}
	return &SubjectAccessReviewDie{
		FrozenObjectMeta: metav1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
		seal:             d.seal,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *SubjectAccessReviewDie) DieFeedPtr(r *authorizationv1.SubjectAccessReview) *SubjectAccessReviewDie {
	if r == nil {
		r = &authorizationv1.SubjectAccessReview{}
	}
	return d.DieFeed(*r)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *SubjectAccessReviewDie) DieFeedJSON(j []byte) *SubjectAccessReviewDie {
	r := authorizationv1.SubjectAccessReview{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *SubjectAccessReviewDie) DieFeedYAML(y []byte) *SubjectAccessReviewDie {
	r := authorizationv1.SubjectAccessReview{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *SubjectAccessReviewDie) DieFeedYAMLFile(name string) *SubjectAccessReviewDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *SubjectAccessReviewDie) DieFeedRawExtension(raw runtime.RawExtension) *SubjectAccessReviewDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *SubjectAccessReviewDie) DieRelease() authorizationv1.SubjectAccessReview {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *SubjectAccessReviewDie) DieReleasePtr() *authorizationv1.SubjectAccessReview {
	r := d.DieRelease()
	return &r
}

// DieReleaseUnstructured returns the resource managed by the die as an unstructured object. Panics on error.
func (d *SubjectAccessReviewDie) DieReleaseUnstructured() *unstructured.Unstructured {
	r := d.DieReleasePtr()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(r)
	if err != nil {
		panic(err)
	}
	return &unstructured.Unstructured{
		Object: u,
	}
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *SubjectAccessReviewDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *SubjectAccessReviewDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *SubjectAccessReviewDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *SubjectAccessReviewDie) DieStamp(fn func(r *authorizationv1.SubjectAccessReview)) *SubjectAccessReviewDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// Experimental: DieStampAt uses a JSON path (http://goessner.net/articles/JsonPath/) expression to stamp portions of the resource. The callback is invoked with each JSON path match. Panics if the callback function does not accept a single argument of the same type or a pointer to that type as found on the resource at the target location.
//
// Future iterations will improve type coercion from the resource to the callback argument.
func (d *SubjectAccessReviewDie) DieStampAt(jp string, fn interface{}) *SubjectAccessReviewDie {
	return d.DieStamp(func(r *authorizationv1.SubjectAccessReview) {
		if ni := reflectx.ValueOf(fn).Type().NumIn(); ni != 1 {
			panic(fmtx.Errorf("callback function must have 1 input parameters, found %d", ni))
		}
		if no := reflectx.ValueOf(fn).Type().NumOut(); no != 0 {
			panic(fmtx.Errorf("callback function must have 0 output parameters, found %d", no))
		}

		cp := jsonpath.New("")
		if err := cp.Parse(fmtx.Sprintf("{%s}", jp)); err != nil {
			panic(err)
		}
		cr, err := cp.FindResults(r)
		if err != nil {
			// errors are expected if a path is not found
			return
		}
		for _, cv := range cr[0] {
			arg0t := reflectx.ValueOf(fn).Type().In(0)

			var args []reflectx.Value
			if cv.Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv}
			} else if cv.CanAddr() && cv.Addr().Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv.Addr()}
			} else {
				panic(fmtx.Errorf("callback function must accept value of type %q, found type %q", cv.Type(), arg0t))
			}

			reflectx.ValueOf(fn).Call(args)
		}
	})
}

// DieWith returns a new die after passing the current die to the callback function. The passed die is mutable.
func (d *SubjectAccessReviewDie) DieWith(fns ...func(d *SubjectAccessReviewDie)) *SubjectAccessReviewDie {
	nd := SubjectAccessReviewBlank.DieFeed(d.DieRelease()).DieImmutable(false)
	for _, fn := range fns {
		if fn != nil {
			fn(nd)
		}
	}
	return d.DieFeed(nd.DieRelease())
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *SubjectAccessReviewDie) DeepCopy() *SubjectAccessReviewDie {
	r := *d.r.DeepCopy()
	return &SubjectAccessReviewDie{
		FrozenObjectMeta: metav1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
		seal:             d.seal,
	}
}

// DieSeal returns a new die for the current die's state that is sealed for comparison in future diff and patch operations.
func (d *SubjectAccessReviewDie) DieSeal() *SubjectAccessReviewDie {
	return d.DieSealFeed(d.r)
}

// DieSealFeed returns a new die for the current die's state that uses a specific resource for comparison in future diff and patch operations.
func (d *SubjectAccessReviewDie) DieSealFeed(r authorizationv1.SubjectAccessReview) *SubjectAccessReviewDie {
	if !d.mutable {
		d = d.DeepCopy()
	}
	d.seal = *r.DeepCopy()
	return d
}

// DieSealFeedPtr returns a new die for the current die's state that uses a specific resource pointer for comparison in future diff and patch operations. If the resource is nil, the empty value is used instead.
func (d *SubjectAccessReviewDie) DieSealFeedPtr(r *authorizationv1.SubjectAccessReview) *SubjectAccessReviewDie {
	if r == nil {
		r = &authorizationv1.SubjectAccessReview{}
	}
	return d.DieSealFeed(*r)
}

// DieSealRelease returns the sealed resource managed by the die.
func (d *SubjectAccessReviewDie) DieSealRelease() authorizationv1.SubjectAccessReview {
	return *d.seal.DeepCopy()
}

// DieSealReleasePtr returns the sealed resource pointer managed by the die.
func (d *SubjectAccessReviewDie) DieSealReleasePtr() *authorizationv1.SubjectAccessReview {
	r := d.DieSealRelease()
	return &r
}

// DieDiff uses cmp.Diff to compare the current value of the die with the sealed value.
func (d *SubjectAccessReviewDie) DieDiff(opts ...cmp.Option) string {
	return cmp.Diff(d.seal, d.r, opts...)
}

// DiePatch generates a patch between the current value of the die and the sealed value.
func (d *SubjectAccessReviewDie) DiePatch(patchType types.PatchType) ([]byte, error) {
	return patch.Create(d.seal, d.r, patchType)
}

var _ runtime.Object = (*SubjectAccessReviewDie)(nil)

func (d *SubjectAccessReviewDie) DeepCopyObject() runtime.Object {
	return d.r.DeepCopy()
}

func (d *SubjectAccessReviewDie) GetObjectKind() schema.ObjectKind {
	r := d.DieRelease()
	return r.GetObjectKind()
}

func (d *SubjectAccessReviewDie) MarshalJSON() ([]byte, error) {
	return json.Marshal(d.r)
}

func (d *SubjectAccessReviewDie) UnmarshalJSON(b []byte) error {
	if !d.mutable {
		return fmtx.Errorf("cannot unmarshal into immutable dies, create a mutable version first")
	}
	resource := &authorizationv1.SubjectAccessReview{}
	err := json.Unmarshal(b, resource)
	*d = *d.DieFeed(*resource)
	return err
}

// DieDefaultTypeMetadata sets the APIVersion and Kind to "authorization.k8s.io/v1" and "SubjectAccessReview" respectively.
func (d *SubjectAccessReviewDie) DieDefaultTypeMetadata() *SubjectAccessReviewDie {
	return d.DieStamp(func(r *authorizationv1.SubjectAccessReview) {
		r.APIVersion = "authorization.k8s.io/v1"
		r.Kind = "SubjectAccessReview"
	})
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (d *SubjectAccessReviewDie) APIVersion(v string) *SubjectAccessReviewDie {
	return d.DieStamp(func(r *authorizationv1.SubjectAccessReview) {
		r.APIVersion = v
	})
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (d *SubjectAccessReviewDie) Kind(v string) *SubjectAccessReviewDie {
	return d.DieStamp(func(r *authorizationv1.SubjectAccessReview) {
		r.Kind = v
	})
}

// TypeMetadata standard object's type metadata.
func (d *SubjectAccessReviewDie) TypeMetadata(v apismetav1.TypeMeta) *SubjectAccessReviewDie {
	return d.DieStamp(func(r *authorizationv1.SubjectAccessReview) {
		r.TypeMeta = v
	})
}

// TypeMetadataDie stamps the resource's TypeMeta field with a mutable die.
func (d *SubjectAccessReviewDie) TypeMetadataDie(fn func(d *metav1.TypeMetaDie)) *SubjectAccessReviewDie {
	return d.DieStamp(func(r *authorizationv1.SubjectAccessReview) {
		d := metav1.TypeMetaBlank.DieImmutable(false).DieFeed(r.TypeMeta)
		fn(d)
		r.TypeMeta = d.DieRelease()
	})
}

// Metadata standard object's metadata.
func (d *SubjectAccessReviewDie) Metadata(v apismetav1.ObjectMeta) *SubjectAccessReviewDie {
	return d.DieStamp(func(r *authorizationv1.SubjectAccessReview) {
		r.ObjectMeta = v
	})
}

// MetadataDie stamps the resource's ObjectMeta field with a mutable die.
func (d *SubjectAccessReviewDie) MetadataDie(fn func(d *metav1.ObjectMetaDie)) *SubjectAccessReviewDie {
	return d.DieStamp(func(r *authorizationv1.SubjectAccessReview) {
		d := metav1.ObjectMetaBlank.DieImmutable(false).DieFeed(r.ObjectMeta)
		fn(d)
		r.ObjectMeta = d.DieRelease()
	})
}

// SpecDie stamps the resource's spec field with a mutable die.
func (d *SubjectAccessReviewDie) SpecDie(fn func(d *SubjectAccessReviewSpecDie)) *SubjectAccessReviewDie {
	return d.DieStamp(func(r *authorizationv1.SubjectAccessReview) {
		d := SubjectAccessReviewSpecBlank.DieImmutable(false).DieFeed(r.Spec)
		fn(d)
		r.Spec = d.DieRelease()
	})
}

// StatusDie stamps the resource's status field with a mutable die.
func (d *SubjectAccessReviewDie) StatusDie(fn func(d *SubjectAccessReviewStatusDie)) *SubjectAccessReviewDie {
	return d.DieStamp(func(r *authorizationv1.SubjectAccessReview) {
		d := SubjectAccessReviewStatusBlank.DieImmutable(false).DieFeed(r.Status)
		fn(d)
		r.Status = d.DieRelease()
	})
}

// Spec holds information about the request being evaluated
func (d *SubjectAccessReviewDie) Spec(v authorizationv1.SubjectAccessReviewSpec) *SubjectAccessReviewDie {
	return d.DieStamp(func(r *authorizationv1.SubjectAccessReview) {
		r.Spec = v
	})
}

// Status is filled in by the server and indicates whether the request is allowed or not
func (d *SubjectAccessReviewDie) Status(v authorizationv1.SubjectAccessReviewStatus) *SubjectAccessReviewDie {
	return d.DieStamp(func(r *authorizationv1.SubjectAccessReview) {
		r.Status = v
	})
}

var SubjectAccessReviewSpecBlank = (&SubjectAccessReviewSpecDie{}).DieFeed(authorizationv1.SubjectAccessReviewSpec{})

type SubjectAccessReviewSpecDie struct {
	mutable bool
	r       authorizationv1.SubjectAccessReviewSpec
	seal    authorizationv1.SubjectAccessReviewSpec
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *SubjectAccessReviewSpecDie) DieImmutable(immutable bool) *SubjectAccessReviewSpecDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *SubjectAccessReviewSpecDie) DieFeed(r authorizationv1.SubjectAccessReviewSpec) *SubjectAccessReviewSpecDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &SubjectAccessReviewSpecDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *SubjectAccessReviewSpecDie) DieFeedPtr(r *authorizationv1.SubjectAccessReviewSpec) *SubjectAccessReviewSpecDie {
	if r == nil {
		r = &authorizationv1.SubjectAccessReviewSpec{}
	}
	return d.DieFeed(*r)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *SubjectAccessReviewSpecDie) DieFeedJSON(j []byte) *SubjectAccessReviewSpecDie {
	r := authorizationv1.SubjectAccessReviewSpec{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *SubjectAccessReviewSpecDie) DieFeedYAML(y []byte) *SubjectAccessReviewSpecDie {
	r := authorizationv1.SubjectAccessReviewSpec{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *SubjectAccessReviewSpecDie) DieFeedYAMLFile(name string) *SubjectAccessReviewSpecDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *SubjectAccessReviewSpecDie) DieFeedRawExtension(raw runtime.RawExtension) *SubjectAccessReviewSpecDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *SubjectAccessReviewSpecDie) DieRelease() authorizationv1.SubjectAccessReviewSpec {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *SubjectAccessReviewSpecDie) DieReleasePtr() *authorizationv1.SubjectAccessReviewSpec {
	r := d.DieRelease()
	return &r
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *SubjectAccessReviewSpecDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *SubjectAccessReviewSpecDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *SubjectAccessReviewSpecDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *SubjectAccessReviewSpecDie) DieStamp(fn func(r *authorizationv1.SubjectAccessReviewSpec)) *SubjectAccessReviewSpecDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// Experimental: DieStampAt uses a JSON path (http://goessner.net/articles/JsonPath/) expression to stamp portions of the resource. The callback is invoked with each JSON path match. Panics if the callback function does not accept a single argument of the same type or a pointer to that type as found on the resource at the target location.
//
// Future iterations will improve type coercion from the resource to the callback argument.
func (d *SubjectAccessReviewSpecDie) DieStampAt(jp string, fn interface{}) *SubjectAccessReviewSpecDie {
	return d.DieStamp(func(r *authorizationv1.SubjectAccessReviewSpec) {
		if ni := reflectx.ValueOf(fn).Type().NumIn(); ni != 1 {
			panic(fmtx.Errorf("callback function must have 1 input parameters, found %d", ni))
		}
		if no := reflectx.ValueOf(fn).Type().NumOut(); no != 0 {
			panic(fmtx.Errorf("callback function must have 0 output parameters, found %d", no))
		}

		cp := jsonpath.New("")
		if err := cp.Parse(fmtx.Sprintf("{%s}", jp)); err != nil {
			panic(err)
		}
		cr, err := cp.FindResults(r)
		if err != nil {
			// errors are expected if a path is not found
			return
		}
		for _, cv := range cr[0] {
			arg0t := reflectx.ValueOf(fn).Type().In(0)

			var args []reflectx.Value
			if cv.Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv}
			} else if cv.CanAddr() && cv.Addr().Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv.Addr()}
			} else {
				panic(fmtx.Errorf("callback function must accept value of type %q, found type %q", cv.Type(), arg0t))
			}

			reflectx.ValueOf(fn).Call(args)
		}
	})
}

// DieWith returns a new die after passing the current die to the callback function. The passed die is mutable.
func (d *SubjectAccessReviewSpecDie) DieWith(fns ...func(d *SubjectAccessReviewSpecDie)) *SubjectAccessReviewSpecDie {
	nd := SubjectAccessReviewSpecBlank.DieFeed(d.DieRelease()).DieImmutable(false)
	for _, fn := range fns {
		if fn != nil {
			fn(nd)
		}
	}
	return d.DieFeed(nd.DieRelease())
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *SubjectAccessReviewSpecDie) DeepCopy() *SubjectAccessReviewSpecDie {
	r := *d.r.DeepCopy()
	return &SubjectAccessReviewSpecDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieSeal returns a new die for the current die's state that is sealed for comparison in future diff and patch operations.
func (d *SubjectAccessReviewSpecDie) DieSeal() *SubjectAccessReviewSpecDie {
	return d.DieSealFeed(d.r)
}

// DieSealFeed returns a new die for the current die's state that uses a specific resource for comparison in future diff and patch operations.
func (d *SubjectAccessReviewSpecDie) DieSealFeed(r authorizationv1.SubjectAccessReviewSpec) *SubjectAccessReviewSpecDie {
	if !d.mutable {
		d = d.DeepCopy()
	}
	d.seal = *r.DeepCopy()
	return d
}

// DieSealFeedPtr returns a new die for the current die's state that uses a specific resource pointer for comparison in future diff and patch operations. If the resource is nil, the empty value is used instead.
func (d *SubjectAccessReviewSpecDie) DieSealFeedPtr(r *authorizationv1.SubjectAccessReviewSpec) *SubjectAccessReviewSpecDie {
	if r == nil {
		r = &authorizationv1.SubjectAccessReviewSpec{}
	}
	return d.DieSealFeed(*r)
}

// DieSealRelease returns the sealed resource managed by the die.
func (d *SubjectAccessReviewSpecDie) DieSealRelease() authorizationv1.SubjectAccessReviewSpec {
	return *d.seal.DeepCopy()
}

// DieSealReleasePtr returns the sealed resource pointer managed by the die.
func (d *SubjectAccessReviewSpecDie) DieSealReleasePtr() *authorizationv1.SubjectAccessReviewSpec {
	r := d.DieSealRelease()
	return &r
}

// DieDiff uses cmp.Diff to compare the current value of the die with the sealed value.
func (d *SubjectAccessReviewSpecDie) DieDiff(opts ...cmp.Option) string {
	return cmp.Diff(d.seal, d.r, opts...)
}

// DiePatch generates a patch between the current value of the die and the sealed value.
func (d *SubjectAccessReviewSpecDie) DiePatch(patchType types.PatchType) ([]byte, error) {
	return patch.Create(d.seal, d.r, patchType)
}

// ResourceAttributesDie mutates ResourceAttributes as a die.
//
// ResourceAuthorizationAttributes describes information for a resource access request
func (d *SubjectAccessReviewSpecDie) ResourceAttributesDie(fn func(d *ResourceAttributesDie)) *SubjectAccessReviewSpecDie {
	return d.DieStamp(func(r *authorizationv1.SubjectAccessReviewSpec) {
		d := ResourceAttributesBlank.DieImmutable(false).DieFeedPtr(r.ResourceAttributes)
		fn(d)
		r.ResourceAttributes = d.DieReleasePtr()
	})
}

// NonResourceAttributesDie mutates NonResourceAttributes as a die.
//
// NonResourceAttributes describes information for a non-resource access request
func (d *SubjectAccessReviewSpecDie) NonResourceAttributesDie(fn func(d *NonResourceAttributesDie)) *SubjectAccessReviewSpecDie {
	return d.DieStamp(func(r *authorizationv1.SubjectAccessReviewSpec) {
		d := NonResourceAttributesBlank.DieImmutable(false).DieFeedPtr(r.NonResourceAttributes)
		fn(d)
		r.NonResourceAttributes = d.DieReleasePtr()
	})
}

// ResourceAuthorizationAttributes describes information for a resource access request
func (d *SubjectAccessReviewSpecDie) ResourceAttributes(v *authorizationv1.ResourceAttributes) *SubjectAccessReviewSpecDie {
	return d.DieStamp(func(r *authorizationv1.SubjectAccessReviewSpec) {
		r.ResourceAttributes = v
	})
}

// NonResourceAttributes describes information for a non-resource access request
func (d *SubjectAccessReviewSpecDie) NonResourceAttributes(v *authorizationv1.NonResourceAttributes) *SubjectAccessReviewSpecDie {
	return d.DieStamp(func(r *authorizationv1.SubjectAccessReviewSpec) {
		r.NonResourceAttributes = v
	})
}

// User is the user you're testing for.
//
// If you specify "User" but not "Groups", then is it interpreted as "What if User were not a member of any groups
func (d *SubjectAccessReviewSpecDie) User(v string) *SubjectAccessReviewSpecDie {
	return d.DieStamp(func(r *authorizationv1.SubjectAccessReviewSpec) {
		r.User = v
	})
}

// Groups is the groups you're testing for.
func (d *SubjectAccessReviewSpecDie) Groups(v ...string) *SubjectAccessReviewSpecDie {
	return d.DieStamp(func(r *authorizationv1.SubjectAccessReviewSpec) {
		r.Groups = v
	})
}

// UID information about the requesting user.
func (d *SubjectAccessReviewSpecDie) UID(v string) *SubjectAccessReviewSpecDie {
	return d.DieStamp(func(r *authorizationv1.SubjectAccessReviewSpec) {
		r.UID = v
	})
}

var ResourceAttributesBlank = (&ResourceAttributesDie{}).DieFeed(authorizationv1.ResourceAttributes{})

type ResourceAttributesDie struct {
	mutable bool
	r       authorizationv1.ResourceAttributes
	seal    authorizationv1.ResourceAttributes
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *ResourceAttributesDie) DieImmutable(immutable bool) *ResourceAttributesDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *ResourceAttributesDie) DieFeed(r authorizationv1.ResourceAttributes) *ResourceAttributesDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &ResourceAttributesDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *ResourceAttributesDie) DieFeedPtr(r *authorizationv1.ResourceAttributes) *ResourceAttributesDie {
	if r == nil {
		r = &authorizationv1.ResourceAttributes{}
	}
	return d.DieFeed(*r)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *ResourceAttributesDie) DieFeedJSON(j []byte) *ResourceAttributesDie {
	r := authorizationv1.ResourceAttributes{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *ResourceAttributesDie) DieFeedYAML(y []byte) *ResourceAttributesDie {
	r := authorizationv1.ResourceAttributes{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *ResourceAttributesDie) DieFeedYAMLFile(name string) *ResourceAttributesDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *ResourceAttributesDie) DieFeedRawExtension(raw runtime.RawExtension) *ResourceAttributesDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *ResourceAttributesDie) DieRelease() authorizationv1.ResourceAttributes {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *ResourceAttributesDie) DieReleasePtr() *authorizationv1.ResourceAttributes {
	r := d.DieRelease()
	return &r
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *ResourceAttributesDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *ResourceAttributesDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *ResourceAttributesDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *ResourceAttributesDie) DieStamp(fn func(r *authorizationv1.ResourceAttributes)) *ResourceAttributesDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// Experimental: DieStampAt uses a JSON path (http://goessner.net/articles/JsonPath/) expression to stamp portions of the resource. The callback is invoked with each JSON path match. Panics if the callback function does not accept a single argument of the same type or a pointer to that type as found on the resource at the target location.
//
// Future iterations will improve type coercion from the resource to the callback argument.
func (d *ResourceAttributesDie) DieStampAt(jp string, fn interface{}) *ResourceAttributesDie {
	return d.DieStamp(func(r *authorizationv1.ResourceAttributes) {
		if ni := reflectx.ValueOf(fn).Type().NumIn(); ni != 1 {
			panic(fmtx.Errorf("callback function must have 1 input parameters, found %d", ni))
		}
		if no := reflectx.ValueOf(fn).Type().NumOut(); no != 0 {
			panic(fmtx.Errorf("callback function must have 0 output parameters, found %d", no))
		}

		cp := jsonpath.New("")
		if err := cp.Parse(fmtx.Sprintf("{%s}", jp)); err != nil {
			panic(err)
		}
		cr, err := cp.FindResults(r)
		if err != nil {
			// errors are expected if a path is not found
			return
		}
		for _, cv := range cr[0] {
			arg0t := reflectx.ValueOf(fn).Type().In(0)

			var args []reflectx.Value
			if cv.Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv}
			} else if cv.CanAddr() && cv.Addr().Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv.Addr()}
			} else {
				panic(fmtx.Errorf("callback function must accept value of type %q, found type %q", cv.Type(), arg0t))
			}

			reflectx.ValueOf(fn).Call(args)
		}
	})
}

// DieWith returns a new die after passing the current die to the callback function. The passed die is mutable.
func (d *ResourceAttributesDie) DieWith(fns ...func(d *ResourceAttributesDie)) *ResourceAttributesDie {
	nd := ResourceAttributesBlank.DieFeed(d.DieRelease()).DieImmutable(false)
	for _, fn := range fns {
		if fn != nil {
			fn(nd)
		}
	}
	return d.DieFeed(nd.DieRelease())
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *ResourceAttributesDie) DeepCopy() *ResourceAttributesDie {
	r := *d.r.DeepCopy()
	return &ResourceAttributesDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieSeal returns a new die for the current die's state that is sealed for comparison in future diff and patch operations.
func (d *ResourceAttributesDie) DieSeal() *ResourceAttributesDie {
	return d.DieSealFeed(d.r)
}

// DieSealFeed returns a new die for the current die's state that uses a specific resource for comparison in future diff and patch operations.
func (d *ResourceAttributesDie) DieSealFeed(r authorizationv1.ResourceAttributes) *ResourceAttributesDie {
	if !d.mutable {
		d = d.DeepCopy()
	}
	d.seal = *r.DeepCopy()
	return d
}

// DieSealFeedPtr returns a new die for the current die's state that uses a specific resource pointer for comparison in future diff and patch operations. If the resource is nil, the empty value is used instead.
func (d *ResourceAttributesDie) DieSealFeedPtr(r *authorizationv1.ResourceAttributes) *ResourceAttributesDie {
	if r == nil {
		r = &authorizationv1.ResourceAttributes{}
	}
	return d.DieSealFeed(*r)
}

// DieSealRelease returns the sealed resource managed by the die.
func (d *ResourceAttributesDie) DieSealRelease() authorizationv1.ResourceAttributes {
	return *d.seal.DeepCopy()
}

// DieSealReleasePtr returns the sealed resource pointer managed by the die.
func (d *ResourceAttributesDie) DieSealReleasePtr() *authorizationv1.ResourceAttributes {
	r := d.DieSealRelease()
	return &r
}

// DieDiff uses cmp.Diff to compare the current value of the die with the sealed value.
func (d *ResourceAttributesDie) DieDiff(opts ...cmp.Option) string {
	return cmp.Diff(d.seal, d.r, opts...)
}

// DiePatch generates a patch between the current value of the die and the sealed value.
func (d *ResourceAttributesDie) DiePatch(patchType types.PatchType) ([]byte, error) {
	return patch.Create(d.seal, d.r, patchType)
}

// FieldSelectorDie mutates FieldSelector as a die.
//
// fieldSelector describes the limitation on access based on field.  It can only limit access, not broaden it.
//
// This field  is alpha-level. To use this field, you must enable the
//
// `AuthorizeWithSelectors` feature gate (disabled by default).
func (d *ResourceAttributesDie) FieldSelectorDie(fn func(d *FieldSelectorAttributesDie)) *ResourceAttributesDie {
	return d.DieStamp(func(r *authorizationv1.ResourceAttributes) {
		d := FieldSelectorAttributesBlank.DieImmutable(false).DieFeedPtr(r.FieldSelector)
		fn(d)
		r.FieldSelector = d.DieReleasePtr()
	})
}

// LabelSelectorDie mutates LabelSelector as a die.
//
// labelSelector describes the limitation on access based on labels.  It can only limit access, not broaden it.
//
// This field  is alpha-level. To use this field, you must enable the
//
// `AuthorizeWithSelectors` feature gate (disabled by default).
func (d *ResourceAttributesDie) LabelSelectorDie(fn func(d *LabelSelectorAttributesDie)) *ResourceAttributesDie {
	return d.DieStamp(func(r *authorizationv1.ResourceAttributes) {
		d := LabelSelectorAttributesBlank.DieImmutable(false).DieFeedPtr(r.LabelSelector)
		fn(d)
		r.LabelSelector = d.DieReleasePtr()
	})
}

// Namespace is the namespace of the action being requested.  Currently, there is no distinction between no namespace and all namespaces
//
// "" (empty) is defaulted for LocalSubjectAccessReviews
//
// "" (empty) is empty for cluster-scoped resources
//
// "" (empty) means "all" for namespace scoped resources from a SubjectAccessReview or SelfSubjectAccessReview
func (d *ResourceAttributesDie) Namespace(v string) *ResourceAttributesDie {
	return d.DieStamp(func(r *authorizationv1.ResourceAttributes) {
		r.Namespace = v
	})
}

// Verb is a kubernetes resource API verb, like: get, list, watch, create, update, delete, proxy.  "*" means all.
func (d *ResourceAttributesDie) Verb(v string) *ResourceAttributesDie {
	return d.DieStamp(func(r *authorizationv1.ResourceAttributes) {
		r.Verb = v
	})
}

// Group is the API Group of the Resource.  "*" means all.
func (d *ResourceAttributesDie) Group(v string) *ResourceAttributesDie {
	return d.DieStamp(func(r *authorizationv1.ResourceAttributes) {
		r.Group = v
	})
}

// Version is the API Version of the Resource.  "*" means all.
func (d *ResourceAttributesDie) Version(v string) *ResourceAttributesDie {
	return d.DieStamp(func(r *authorizationv1.ResourceAttributes) {
		r.Version = v
	})
}

// Resource is one of the existing resource types.  "*" means all.
func (d *ResourceAttributesDie) Resource(v string) *ResourceAttributesDie {
	return d.DieStamp(func(r *authorizationv1.ResourceAttributes) {
		r.Resource = v
	})
}

// Subresource is one of the existing resource types.  "" means none.
func (d *ResourceAttributesDie) Subresource(v string) *ResourceAttributesDie {
	return d.DieStamp(func(r *authorizationv1.ResourceAttributes) {
		r.Subresource = v
	})
}

// Name is the name of the resource being requested for a "get" or deleted for a "delete". "" (empty) means all.
func (d *ResourceAttributesDie) Name(v string) *ResourceAttributesDie {
	return d.DieStamp(func(r *authorizationv1.ResourceAttributes) {
		r.Name = v
	})
}

// fieldSelector describes the limitation on access based on field.  It can only limit access, not broaden it.
//
// This field  is alpha-level. To use this field, you must enable the
//
// `AuthorizeWithSelectors` feature gate (disabled by default).
func (d *ResourceAttributesDie) FieldSelector(v *authorizationv1.FieldSelectorAttributes) *ResourceAttributesDie {
	return d.DieStamp(func(r *authorizationv1.ResourceAttributes) {
		r.FieldSelector = v
	})
}

// labelSelector describes the limitation on access based on labels.  It can only limit access, not broaden it.
//
// This field  is alpha-level. To use this field, you must enable the
//
// `AuthorizeWithSelectors` feature gate (disabled by default).
func (d *ResourceAttributesDie) LabelSelector(v *authorizationv1.LabelSelectorAttributes) *ResourceAttributesDie {
	return d.DieStamp(func(r *authorizationv1.ResourceAttributes) {
		r.LabelSelector = v
	})
}

var NonResourceAttributesBlank = (&NonResourceAttributesDie{}).DieFeed(authorizationv1.NonResourceAttributes{})

type NonResourceAttributesDie struct {
	mutable bool
	r       authorizationv1.NonResourceAttributes
	seal    authorizationv1.NonResourceAttributes
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *NonResourceAttributesDie) DieImmutable(immutable bool) *NonResourceAttributesDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *NonResourceAttributesDie) DieFeed(r authorizationv1.NonResourceAttributes) *NonResourceAttributesDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &NonResourceAttributesDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *NonResourceAttributesDie) DieFeedPtr(r *authorizationv1.NonResourceAttributes) *NonResourceAttributesDie {
	if r == nil {
		r = &authorizationv1.NonResourceAttributes{}
	}
	return d.DieFeed(*r)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *NonResourceAttributesDie) DieFeedJSON(j []byte) *NonResourceAttributesDie {
	r := authorizationv1.NonResourceAttributes{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *NonResourceAttributesDie) DieFeedYAML(y []byte) *NonResourceAttributesDie {
	r := authorizationv1.NonResourceAttributes{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *NonResourceAttributesDie) DieFeedYAMLFile(name string) *NonResourceAttributesDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *NonResourceAttributesDie) DieFeedRawExtension(raw runtime.RawExtension) *NonResourceAttributesDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *NonResourceAttributesDie) DieRelease() authorizationv1.NonResourceAttributes {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *NonResourceAttributesDie) DieReleasePtr() *authorizationv1.NonResourceAttributes {
	r := d.DieRelease()
	return &r
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *NonResourceAttributesDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *NonResourceAttributesDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *NonResourceAttributesDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *NonResourceAttributesDie) DieStamp(fn func(r *authorizationv1.NonResourceAttributes)) *NonResourceAttributesDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// Experimental: DieStampAt uses a JSON path (http://goessner.net/articles/JsonPath/) expression to stamp portions of the resource. The callback is invoked with each JSON path match. Panics if the callback function does not accept a single argument of the same type or a pointer to that type as found on the resource at the target location.
//
// Future iterations will improve type coercion from the resource to the callback argument.
func (d *NonResourceAttributesDie) DieStampAt(jp string, fn interface{}) *NonResourceAttributesDie {
	return d.DieStamp(func(r *authorizationv1.NonResourceAttributes) {
		if ni := reflectx.ValueOf(fn).Type().NumIn(); ni != 1 {
			panic(fmtx.Errorf("callback function must have 1 input parameters, found %d", ni))
		}
		if no := reflectx.ValueOf(fn).Type().NumOut(); no != 0 {
			panic(fmtx.Errorf("callback function must have 0 output parameters, found %d", no))
		}

		cp := jsonpath.New("")
		if err := cp.Parse(fmtx.Sprintf("{%s}", jp)); err != nil {
			panic(err)
		}
		cr, err := cp.FindResults(r)
		if err != nil {
			// errors are expected if a path is not found
			return
		}
		for _, cv := range cr[0] {
			arg0t := reflectx.ValueOf(fn).Type().In(0)

			var args []reflectx.Value
			if cv.Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv}
			} else if cv.CanAddr() && cv.Addr().Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv.Addr()}
			} else {
				panic(fmtx.Errorf("callback function must accept value of type %q, found type %q", cv.Type(), arg0t))
			}

			reflectx.ValueOf(fn).Call(args)
		}
	})
}

// DieWith returns a new die after passing the current die to the callback function. The passed die is mutable.
func (d *NonResourceAttributesDie) DieWith(fns ...func(d *NonResourceAttributesDie)) *NonResourceAttributesDie {
	nd := NonResourceAttributesBlank.DieFeed(d.DieRelease()).DieImmutable(false)
	for _, fn := range fns {
		if fn != nil {
			fn(nd)
		}
	}
	return d.DieFeed(nd.DieRelease())
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *NonResourceAttributesDie) DeepCopy() *NonResourceAttributesDie {
	r := *d.r.DeepCopy()
	return &NonResourceAttributesDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieSeal returns a new die for the current die's state that is sealed for comparison in future diff and patch operations.
func (d *NonResourceAttributesDie) DieSeal() *NonResourceAttributesDie {
	return d.DieSealFeed(d.r)
}

// DieSealFeed returns a new die for the current die's state that uses a specific resource for comparison in future diff and patch operations.
func (d *NonResourceAttributesDie) DieSealFeed(r authorizationv1.NonResourceAttributes) *NonResourceAttributesDie {
	if !d.mutable {
		d = d.DeepCopy()
	}
	d.seal = *r.DeepCopy()
	return d
}

// DieSealFeedPtr returns a new die for the current die's state that uses a specific resource pointer for comparison in future diff and patch operations. If the resource is nil, the empty value is used instead.
func (d *NonResourceAttributesDie) DieSealFeedPtr(r *authorizationv1.NonResourceAttributes) *NonResourceAttributesDie {
	if r == nil {
		r = &authorizationv1.NonResourceAttributes{}
	}
	return d.DieSealFeed(*r)
}

// DieSealRelease returns the sealed resource managed by the die.
func (d *NonResourceAttributesDie) DieSealRelease() authorizationv1.NonResourceAttributes {
	return *d.seal.DeepCopy()
}

// DieSealReleasePtr returns the sealed resource pointer managed by the die.
func (d *NonResourceAttributesDie) DieSealReleasePtr() *authorizationv1.NonResourceAttributes {
	r := d.DieSealRelease()
	return &r
}

// DieDiff uses cmp.Diff to compare the current value of the die with the sealed value.
func (d *NonResourceAttributesDie) DieDiff(opts ...cmp.Option) string {
	return cmp.Diff(d.seal, d.r, opts...)
}

// DiePatch generates a patch between the current value of the die and the sealed value.
func (d *NonResourceAttributesDie) DiePatch(patchType types.PatchType) ([]byte, error) {
	return patch.Create(d.seal, d.r, patchType)
}

// Path is the URL path of the request
func (d *NonResourceAttributesDie) Path(v string) *NonResourceAttributesDie {
	return d.DieStamp(func(r *authorizationv1.NonResourceAttributes) {
		r.Path = v
	})
}

// Verb is the standard HTTP verb
func (d *NonResourceAttributesDie) Verb(v string) *NonResourceAttributesDie {
	return d.DieStamp(func(r *authorizationv1.NonResourceAttributes) {
		r.Verb = v
	})
}

var SubjectAccessReviewStatusBlank = (&SubjectAccessReviewStatusDie{}).DieFeed(authorizationv1.SubjectAccessReviewStatus{})

type SubjectAccessReviewStatusDie struct {
	mutable bool
	r       authorizationv1.SubjectAccessReviewStatus
	seal    authorizationv1.SubjectAccessReviewStatus
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *SubjectAccessReviewStatusDie) DieImmutable(immutable bool) *SubjectAccessReviewStatusDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *SubjectAccessReviewStatusDie) DieFeed(r authorizationv1.SubjectAccessReviewStatus) *SubjectAccessReviewStatusDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &SubjectAccessReviewStatusDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *SubjectAccessReviewStatusDie) DieFeedPtr(r *authorizationv1.SubjectAccessReviewStatus) *SubjectAccessReviewStatusDie {
	if r == nil {
		r = &authorizationv1.SubjectAccessReviewStatus{}
	}
	return d.DieFeed(*r)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *SubjectAccessReviewStatusDie) DieFeedJSON(j []byte) *SubjectAccessReviewStatusDie {
	r := authorizationv1.SubjectAccessReviewStatus{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *SubjectAccessReviewStatusDie) DieFeedYAML(y []byte) *SubjectAccessReviewStatusDie {
	r := authorizationv1.SubjectAccessReviewStatus{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *SubjectAccessReviewStatusDie) DieFeedYAMLFile(name string) *SubjectAccessReviewStatusDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *SubjectAccessReviewStatusDie) DieFeedRawExtension(raw runtime.RawExtension) *SubjectAccessReviewStatusDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *SubjectAccessReviewStatusDie) DieRelease() authorizationv1.SubjectAccessReviewStatus {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *SubjectAccessReviewStatusDie) DieReleasePtr() *authorizationv1.SubjectAccessReviewStatus {
	r := d.DieRelease()
	return &r
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *SubjectAccessReviewStatusDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *SubjectAccessReviewStatusDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *SubjectAccessReviewStatusDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *SubjectAccessReviewStatusDie) DieStamp(fn func(r *authorizationv1.SubjectAccessReviewStatus)) *SubjectAccessReviewStatusDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// Experimental: DieStampAt uses a JSON path (http://goessner.net/articles/JsonPath/) expression to stamp portions of the resource. The callback is invoked with each JSON path match. Panics if the callback function does not accept a single argument of the same type or a pointer to that type as found on the resource at the target location.
//
// Future iterations will improve type coercion from the resource to the callback argument.
func (d *SubjectAccessReviewStatusDie) DieStampAt(jp string, fn interface{}) *SubjectAccessReviewStatusDie {
	return d.DieStamp(func(r *authorizationv1.SubjectAccessReviewStatus) {
		if ni := reflectx.ValueOf(fn).Type().NumIn(); ni != 1 {
			panic(fmtx.Errorf("callback function must have 1 input parameters, found %d", ni))
		}
		if no := reflectx.ValueOf(fn).Type().NumOut(); no != 0 {
			panic(fmtx.Errorf("callback function must have 0 output parameters, found %d", no))
		}

		cp := jsonpath.New("")
		if err := cp.Parse(fmtx.Sprintf("{%s}", jp)); err != nil {
			panic(err)
		}
		cr, err := cp.FindResults(r)
		if err != nil {
			// errors are expected if a path is not found
			return
		}
		for _, cv := range cr[0] {
			arg0t := reflectx.ValueOf(fn).Type().In(0)

			var args []reflectx.Value
			if cv.Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv}
			} else if cv.CanAddr() && cv.Addr().Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv.Addr()}
			} else {
				panic(fmtx.Errorf("callback function must accept value of type %q, found type %q", cv.Type(), arg0t))
			}

			reflectx.ValueOf(fn).Call(args)
		}
	})
}

// DieWith returns a new die after passing the current die to the callback function. The passed die is mutable.
func (d *SubjectAccessReviewStatusDie) DieWith(fns ...func(d *SubjectAccessReviewStatusDie)) *SubjectAccessReviewStatusDie {
	nd := SubjectAccessReviewStatusBlank.DieFeed(d.DieRelease()).DieImmutable(false)
	for _, fn := range fns {
		if fn != nil {
			fn(nd)
		}
	}
	return d.DieFeed(nd.DieRelease())
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *SubjectAccessReviewStatusDie) DeepCopy() *SubjectAccessReviewStatusDie {
	r := *d.r.DeepCopy()
	return &SubjectAccessReviewStatusDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieSeal returns a new die for the current die's state that is sealed for comparison in future diff and patch operations.
func (d *SubjectAccessReviewStatusDie) DieSeal() *SubjectAccessReviewStatusDie {
	return d.DieSealFeed(d.r)
}

// DieSealFeed returns a new die for the current die's state that uses a specific resource for comparison in future diff and patch operations.
func (d *SubjectAccessReviewStatusDie) DieSealFeed(r authorizationv1.SubjectAccessReviewStatus) *SubjectAccessReviewStatusDie {
	if !d.mutable {
		d = d.DeepCopy()
	}
	d.seal = *r.DeepCopy()
	return d
}

// DieSealFeedPtr returns a new die for the current die's state that uses a specific resource pointer for comparison in future diff and patch operations. If the resource is nil, the empty value is used instead.
func (d *SubjectAccessReviewStatusDie) DieSealFeedPtr(r *authorizationv1.SubjectAccessReviewStatus) *SubjectAccessReviewStatusDie {
	if r == nil {
		r = &authorizationv1.SubjectAccessReviewStatus{}
	}
	return d.DieSealFeed(*r)
}

// DieSealRelease returns the sealed resource managed by the die.
func (d *SubjectAccessReviewStatusDie) DieSealRelease() authorizationv1.SubjectAccessReviewStatus {
	return *d.seal.DeepCopy()
}

// DieSealReleasePtr returns the sealed resource pointer managed by the die.
func (d *SubjectAccessReviewStatusDie) DieSealReleasePtr() *authorizationv1.SubjectAccessReviewStatus {
	r := d.DieSealRelease()
	return &r
}

// DieDiff uses cmp.Diff to compare the current value of the die with the sealed value.
func (d *SubjectAccessReviewStatusDie) DieDiff(opts ...cmp.Option) string {
	return cmp.Diff(d.seal, d.r, opts...)
}

// DiePatch generates a patch between the current value of the die and the sealed value.
func (d *SubjectAccessReviewStatusDie) DiePatch(patchType types.PatchType) ([]byte, error) {
	return patch.Create(d.seal, d.r, patchType)
}

// Allowed is required. True if the action would be allowed, false otherwise.
func (d *SubjectAccessReviewStatusDie) Allowed(v bool) *SubjectAccessReviewStatusDie {
	return d.DieStamp(func(r *authorizationv1.SubjectAccessReviewStatus) {
		r.Allowed = v
	})
}

// Denied is optional. True if the action would be denied, otherwise
//
// false. If both allowed is false and denied is false, then the
//
// authorizer has no opinion on whether to authorize the action. Denied
//
// may not be true if Allowed is true.
func (d *SubjectAccessReviewStatusDie) Denied(v bool) *SubjectAccessReviewStatusDie {
	return d.DieStamp(func(r *authorizationv1.SubjectAccessReviewStatus) {
		r.Denied = v
	})
}

// Reason is optional.  It indicates why a request was allowed or denied.
func (d *SubjectAccessReviewStatusDie) Reason(v string) *SubjectAccessReviewStatusDie {
	return d.DieStamp(func(r *authorizationv1.SubjectAccessReviewStatus) {
		r.Reason = v
	})
}

// EvaluationError is an indication that some error occurred during the authorization check.
//
// It is entirely possible to get an error and be able to continue determine authorization status in spite of it.
//
// For instance, RBAC can be missing a role, but enough roles are still present and bound to reason about the request.
func (d *SubjectAccessReviewStatusDie) EvaluationError(v string) *SubjectAccessReviewStatusDie {
	return d.DieStamp(func(r *authorizationv1.SubjectAccessReviewStatus) {
		r.EvaluationError = v
	})
}

var FieldSelectorAttributesBlank = (&FieldSelectorAttributesDie{}).DieFeed(authorizationv1.FieldSelectorAttributes{})

type FieldSelectorAttributesDie struct {
	mutable bool
	r       authorizationv1.FieldSelectorAttributes
	seal    authorizationv1.FieldSelectorAttributes
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *FieldSelectorAttributesDie) DieImmutable(immutable bool) *FieldSelectorAttributesDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *FieldSelectorAttributesDie) DieFeed(r authorizationv1.FieldSelectorAttributes) *FieldSelectorAttributesDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &FieldSelectorAttributesDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *FieldSelectorAttributesDie) DieFeedPtr(r *authorizationv1.FieldSelectorAttributes) *FieldSelectorAttributesDie {
	if r == nil {
		r = &authorizationv1.FieldSelectorAttributes{}
	}
	return d.DieFeed(*r)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *FieldSelectorAttributesDie) DieFeedJSON(j []byte) *FieldSelectorAttributesDie {
	r := authorizationv1.FieldSelectorAttributes{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *FieldSelectorAttributesDie) DieFeedYAML(y []byte) *FieldSelectorAttributesDie {
	r := authorizationv1.FieldSelectorAttributes{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *FieldSelectorAttributesDie) DieFeedYAMLFile(name string) *FieldSelectorAttributesDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *FieldSelectorAttributesDie) DieFeedRawExtension(raw runtime.RawExtension) *FieldSelectorAttributesDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *FieldSelectorAttributesDie) DieRelease() authorizationv1.FieldSelectorAttributes {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *FieldSelectorAttributesDie) DieReleasePtr() *authorizationv1.FieldSelectorAttributes {
	r := d.DieRelease()
	return &r
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *FieldSelectorAttributesDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *FieldSelectorAttributesDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *FieldSelectorAttributesDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *FieldSelectorAttributesDie) DieStamp(fn func(r *authorizationv1.FieldSelectorAttributes)) *FieldSelectorAttributesDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// Experimental: DieStampAt uses a JSON path (http://goessner.net/articles/JsonPath/) expression to stamp portions of the resource. The callback is invoked with each JSON path match. Panics if the callback function does not accept a single argument of the same type or a pointer to that type as found on the resource at the target location.
//
// Future iterations will improve type coercion from the resource to the callback argument.
func (d *FieldSelectorAttributesDie) DieStampAt(jp string, fn interface{}) *FieldSelectorAttributesDie {
	return d.DieStamp(func(r *authorizationv1.FieldSelectorAttributes) {
		if ni := reflectx.ValueOf(fn).Type().NumIn(); ni != 1 {
			panic(fmtx.Errorf("callback function must have 1 input parameters, found %d", ni))
		}
		if no := reflectx.ValueOf(fn).Type().NumOut(); no != 0 {
			panic(fmtx.Errorf("callback function must have 0 output parameters, found %d", no))
		}

		cp := jsonpath.New("")
		if err := cp.Parse(fmtx.Sprintf("{%s}", jp)); err != nil {
			panic(err)
		}
		cr, err := cp.FindResults(r)
		if err != nil {
			// errors are expected if a path is not found
			return
		}
		for _, cv := range cr[0] {
			arg0t := reflectx.ValueOf(fn).Type().In(0)

			var args []reflectx.Value
			if cv.Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv}
			} else if cv.CanAddr() && cv.Addr().Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv.Addr()}
			} else {
				panic(fmtx.Errorf("callback function must accept value of type %q, found type %q", cv.Type(), arg0t))
			}

			reflectx.ValueOf(fn).Call(args)
		}
	})
}

// DieWith returns a new die after passing the current die to the callback function. The passed die is mutable.
func (d *FieldSelectorAttributesDie) DieWith(fns ...func(d *FieldSelectorAttributesDie)) *FieldSelectorAttributesDie {
	nd := FieldSelectorAttributesBlank.DieFeed(d.DieRelease()).DieImmutable(false)
	for _, fn := range fns {
		if fn != nil {
			fn(nd)
		}
	}
	return d.DieFeed(nd.DieRelease())
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *FieldSelectorAttributesDie) DeepCopy() *FieldSelectorAttributesDie {
	r := *d.r.DeepCopy()
	return &FieldSelectorAttributesDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieSeal returns a new die for the current die's state that is sealed for comparison in future diff and patch operations.
func (d *FieldSelectorAttributesDie) DieSeal() *FieldSelectorAttributesDie {
	return d.DieSealFeed(d.r)
}

// DieSealFeed returns a new die for the current die's state that uses a specific resource for comparison in future diff and patch operations.
func (d *FieldSelectorAttributesDie) DieSealFeed(r authorizationv1.FieldSelectorAttributes) *FieldSelectorAttributesDie {
	if !d.mutable {
		d = d.DeepCopy()
	}
	d.seal = *r.DeepCopy()
	return d
}

// DieSealFeedPtr returns a new die for the current die's state that uses a specific resource pointer for comparison in future diff and patch operations. If the resource is nil, the empty value is used instead.
func (d *FieldSelectorAttributesDie) DieSealFeedPtr(r *authorizationv1.FieldSelectorAttributes) *FieldSelectorAttributesDie {
	if r == nil {
		r = &authorizationv1.FieldSelectorAttributes{}
	}
	return d.DieSealFeed(*r)
}

// DieSealRelease returns the sealed resource managed by the die.
func (d *FieldSelectorAttributesDie) DieSealRelease() authorizationv1.FieldSelectorAttributes {
	return *d.seal.DeepCopy()
}

// DieSealReleasePtr returns the sealed resource pointer managed by the die.
func (d *FieldSelectorAttributesDie) DieSealReleasePtr() *authorizationv1.FieldSelectorAttributes {
	r := d.DieSealRelease()
	return &r
}

// DieDiff uses cmp.Diff to compare the current value of the die with the sealed value.
func (d *FieldSelectorAttributesDie) DieDiff(opts ...cmp.Option) string {
	return cmp.Diff(d.seal, d.r, opts...)
}

// DiePatch generates a patch between the current value of the die and the sealed value.
func (d *FieldSelectorAttributesDie) DiePatch(patchType types.PatchType) ([]byte, error) {
	return patch.Create(d.seal, d.r, patchType)
}

// RequirementsDie replaces Requirements by collecting the released value from each die passed.
//
// requirements is the parsed interpretation of a field selector.
//
// All requirements must be met for a resource instance to match the selector.
//
// Webhook implementations should handle requirements, but how to handle them is up to the webhook.
//
// # Since requirements can only limit the request, it is safe to authorize as unlimited request if the requirements
//
// are not understood.
func (d *FieldSelectorAttributesDie) RequirementsDie(v ...*metav1.FieldSelectorRequirementDie) *FieldSelectorAttributesDie {
	return d.DieStamp(func(r *authorizationv1.FieldSelectorAttributes) {
		r.Requirements = make([]apismetav1.FieldSelectorRequirement, len(v))
		for i := range v {
			r.Requirements[i] = v[i].DieRelease()
		}
	})
}

// rawSelector is the serialization of a field selector that would be included in a query parameter.
//
// Webhook implementations are encouraged to ignore rawSelector.
//
// The kube-apiserver's *SubjectAccessReview will parse the rawSelector as long as the requirements are not present.
func (d *FieldSelectorAttributesDie) RawSelector(v string) *FieldSelectorAttributesDie {
	return d.DieStamp(func(r *authorizationv1.FieldSelectorAttributes) {
		r.RawSelector = v
	})
}

// requirements is the parsed interpretation of a field selector.
//
// All requirements must be met for a resource instance to match the selector.
//
// Webhook implementations should handle requirements, but how to handle them is up to the webhook.
//
// # Since requirements can only limit the request, it is safe to authorize as unlimited request if the requirements
//
// are not understood.
func (d *FieldSelectorAttributesDie) Requirements(v ...apismetav1.FieldSelectorRequirement) *FieldSelectorAttributesDie {
	return d.DieStamp(func(r *authorizationv1.FieldSelectorAttributes) {
		r.Requirements = v
	})
}

var LabelSelectorAttributesBlank = (&LabelSelectorAttributesDie{}).DieFeed(authorizationv1.LabelSelectorAttributes{})

type LabelSelectorAttributesDie struct {
	mutable bool
	r       authorizationv1.LabelSelectorAttributes
	seal    authorizationv1.LabelSelectorAttributes
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *LabelSelectorAttributesDie) DieImmutable(immutable bool) *LabelSelectorAttributesDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *LabelSelectorAttributesDie) DieFeed(r authorizationv1.LabelSelectorAttributes) *LabelSelectorAttributesDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &LabelSelectorAttributesDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *LabelSelectorAttributesDie) DieFeedPtr(r *authorizationv1.LabelSelectorAttributes) *LabelSelectorAttributesDie {
	if r == nil {
		r = &authorizationv1.LabelSelectorAttributes{}
	}
	return d.DieFeed(*r)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *LabelSelectorAttributesDie) DieFeedJSON(j []byte) *LabelSelectorAttributesDie {
	r := authorizationv1.LabelSelectorAttributes{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *LabelSelectorAttributesDie) DieFeedYAML(y []byte) *LabelSelectorAttributesDie {
	r := authorizationv1.LabelSelectorAttributes{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *LabelSelectorAttributesDie) DieFeedYAMLFile(name string) *LabelSelectorAttributesDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *LabelSelectorAttributesDie) DieFeedRawExtension(raw runtime.RawExtension) *LabelSelectorAttributesDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *LabelSelectorAttributesDie) DieRelease() authorizationv1.LabelSelectorAttributes {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *LabelSelectorAttributesDie) DieReleasePtr() *authorizationv1.LabelSelectorAttributes {
	r := d.DieRelease()
	return &r
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *LabelSelectorAttributesDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *LabelSelectorAttributesDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *LabelSelectorAttributesDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *LabelSelectorAttributesDie) DieStamp(fn func(r *authorizationv1.LabelSelectorAttributes)) *LabelSelectorAttributesDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// Experimental: DieStampAt uses a JSON path (http://goessner.net/articles/JsonPath/) expression to stamp portions of the resource. The callback is invoked with each JSON path match. Panics if the callback function does not accept a single argument of the same type or a pointer to that type as found on the resource at the target location.
//
// Future iterations will improve type coercion from the resource to the callback argument.
func (d *LabelSelectorAttributesDie) DieStampAt(jp string, fn interface{}) *LabelSelectorAttributesDie {
	return d.DieStamp(func(r *authorizationv1.LabelSelectorAttributes) {
		if ni := reflectx.ValueOf(fn).Type().NumIn(); ni != 1 {
			panic(fmtx.Errorf("callback function must have 1 input parameters, found %d", ni))
		}
		if no := reflectx.ValueOf(fn).Type().NumOut(); no != 0 {
			panic(fmtx.Errorf("callback function must have 0 output parameters, found %d", no))
		}

		cp := jsonpath.New("")
		if err := cp.Parse(fmtx.Sprintf("{%s}", jp)); err != nil {
			panic(err)
		}
		cr, err := cp.FindResults(r)
		if err != nil {
			// errors are expected if a path is not found
			return
		}
		for _, cv := range cr[0] {
			arg0t := reflectx.ValueOf(fn).Type().In(0)

			var args []reflectx.Value
			if cv.Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv}
			} else if cv.CanAddr() && cv.Addr().Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv.Addr()}
			} else {
				panic(fmtx.Errorf("callback function must accept value of type %q, found type %q", cv.Type(), arg0t))
			}

			reflectx.ValueOf(fn).Call(args)
		}
	})
}

// DieWith returns a new die after passing the current die to the callback function. The passed die is mutable.
func (d *LabelSelectorAttributesDie) DieWith(fns ...func(d *LabelSelectorAttributesDie)) *LabelSelectorAttributesDie {
	nd := LabelSelectorAttributesBlank.DieFeed(d.DieRelease()).DieImmutable(false)
	for _, fn := range fns {
		if fn != nil {
			fn(nd)
		}
	}
	return d.DieFeed(nd.DieRelease())
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *LabelSelectorAttributesDie) DeepCopy() *LabelSelectorAttributesDie {
	r := *d.r.DeepCopy()
	return &LabelSelectorAttributesDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieSeal returns a new die for the current die's state that is sealed for comparison in future diff and patch operations.
func (d *LabelSelectorAttributesDie) DieSeal() *LabelSelectorAttributesDie {
	return d.DieSealFeed(d.r)
}

// DieSealFeed returns a new die for the current die's state that uses a specific resource for comparison in future diff and patch operations.
func (d *LabelSelectorAttributesDie) DieSealFeed(r authorizationv1.LabelSelectorAttributes) *LabelSelectorAttributesDie {
	if !d.mutable {
		d = d.DeepCopy()
	}
	d.seal = *r.DeepCopy()
	return d
}

// DieSealFeedPtr returns a new die for the current die's state that uses a specific resource pointer for comparison in future diff and patch operations. If the resource is nil, the empty value is used instead.
func (d *LabelSelectorAttributesDie) DieSealFeedPtr(r *authorizationv1.LabelSelectorAttributes) *LabelSelectorAttributesDie {
	if r == nil {
		r = &authorizationv1.LabelSelectorAttributes{}
	}
	return d.DieSealFeed(*r)
}

// DieSealRelease returns the sealed resource managed by the die.
func (d *LabelSelectorAttributesDie) DieSealRelease() authorizationv1.LabelSelectorAttributes {
	return *d.seal.DeepCopy()
}

// DieSealReleasePtr returns the sealed resource pointer managed by the die.
func (d *LabelSelectorAttributesDie) DieSealReleasePtr() *authorizationv1.LabelSelectorAttributes {
	r := d.DieSealRelease()
	return &r
}

// DieDiff uses cmp.Diff to compare the current value of the die with the sealed value.
func (d *LabelSelectorAttributesDie) DieDiff(opts ...cmp.Option) string {
	return cmp.Diff(d.seal, d.r, opts...)
}

// DiePatch generates a patch between the current value of the die and the sealed value.
func (d *LabelSelectorAttributesDie) DiePatch(patchType types.PatchType) ([]byte, error) {
	return patch.Create(d.seal, d.r, patchType)
}

// RequirementsDie replaces Requirements by collecting the released value from each die passed.
//
// requirements is the parsed interpretation of a label selector.
//
// All requirements must be met for a resource instance to match the selector.
//
// Webhook implementations should handle requirements, but how to handle them is up to the webhook.
//
// # Since requirements can only limit the request, it is safe to authorize as unlimited request if the requirements
//
// are not understood.
func (d *LabelSelectorAttributesDie) RequirementsDie(v ...*metav1.LabelSelectorRequirementDie) *LabelSelectorAttributesDie {
	return d.DieStamp(func(r *authorizationv1.LabelSelectorAttributes) {
		r.Requirements = make([]apismetav1.LabelSelectorRequirement, len(v))
		for i := range v {
			r.Requirements[i] = v[i].DieRelease()
		}
	})
}

// rawSelector is the serialization of a field selector that would be included in a query parameter.
//
// Webhook implementations are encouraged to ignore rawSelector.
//
// The kube-apiserver's *SubjectAccessReview will parse the rawSelector as long as the requirements are not present.
func (d *LabelSelectorAttributesDie) RawSelector(v string) *LabelSelectorAttributesDie {
	return d.DieStamp(func(r *authorizationv1.LabelSelectorAttributes) {
		r.RawSelector = v
	})
}

// requirements is the parsed interpretation of a label selector.
//
// All requirements must be met for a resource instance to match the selector.
//
// Webhook implementations should handle requirements, but how to handle them is up to the webhook.
//
// # Since requirements can only limit the request, it is safe to authorize as unlimited request if the requirements
//
// are not understood.
func (d *LabelSelectorAttributesDie) Requirements(v ...apismetav1.LabelSelectorRequirement) *LabelSelectorAttributesDie {
	return d.DieStamp(func(r *authorizationv1.LabelSelectorAttributes) {
		r.Requirements = v
	})
}
