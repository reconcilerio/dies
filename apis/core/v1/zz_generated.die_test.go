//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright 2021-2022 the original author or authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by diegen. DO NOT EDIT.

package v1

import (
	testing "dies.dev/testing"
	testingx "testing"
)

func TestBindingDie_MissingMethods(t *testingx.T) {
	die := BindingBlank
	ignore := []string{"TypeMeta", "ObjectMeta"}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for BindingDie: %s", diff.List())
	}
}

func TestObjectReferenceDie_MissingMethods(t *testingx.T) {
	die := ObjectReferenceBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for ObjectReferenceDie: %s", diff.List())
	}
}

func TestLocalObjectReferenceDie_MissingMethods(t *testingx.T) {
	die := LocalObjectReferenceBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for LocalObjectReferenceDie: %s", diff.List())
	}
}

func TestTypedLocalObjectReferenceDie_MissingMethods(t *testingx.T) {
	die := TypedLocalObjectReferenceBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for TypedLocalObjectReferenceDie: %s", diff.List())
	}
}

func TestTypedObjectReferenceDie_MissingMethods(t *testingx.T) {
	die := TypedObjectReferenceBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for TypedObjectReferenceDie: %s", diff.List())
	}
}

func TestSecretReferenceDie_MissingMethods(t *testingx.T) {
	die := SecretReferenceBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for SecretReferenceDie: %s", diff.List())
	}
}

func TestTopologySelectorTermDie_MissingMethods(t *testingx.T) {
	die := TopologySelectorTermBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for TopologySelectorTermDie: %s", diff.List())
	}
}

func TestTopologySelectorLabelRequirementDie_MissingMethods(t *testingx.T) {
	die := TopologySelectorLabelRequirementBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for TopologySelectorLabelRequirementDie: %s", diff.List())
	}
}

func TestComponentStatusDie_MissingMethods(t *testingx.T) {
	die := ComponentStatusBlank
	ignore := []string{"TypeMeta", "ObjectMeta"}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for ComponentStatusDie: %s", diff.List())
	}
}

func TestConfigMapDie_MissingMethods(t *testingx.T) {
	die := ConfigMapBlank
	ignore := []string{"BinaryData", "Data", "TypeMeta", "ObjectMeta"}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for ConfigMapDie: %s", diff.List())
	}
}

func TestContainerDie_MissingMethods(t *testingx.T) {
	die := ContainerBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for ContainerDie: %s", diff.List())
	}
}

func TestContainerPortDie_MissingMethods(t *testingx.T) {
	die := ContainerPortBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for ContainerPortDie: %s", diff.List())
	}
}

func TestEnvFromSourceDie_MissingMethods(t *testingx.T) {
	die := EnvFromSourceBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for EnvFromSourceDie: %s", diff.List())
	}
}

func TestConfigMapEnvSourceDie_MissingMethods(t *testingx.T) {
	die := ConfigMapEnvSourceBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for ConfigMapEnvSourceDie: %s", diff.List())
	}
}

func TestSecretEnvSourceDie_MissingMethods(t *testingx.T) {
	die := SecretEnvSourceBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for SecretEnvSourceDie: %s", diff.List())
	}
}

func TestEnvVarDie_MissingMethods(t *testingx.T) {
	die := EnvVarBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for EnvVarDie: %s", diff.List())
	}
}

func TestEnvVarSourceDie_MissingMethods(t *testingx.T) {
	die := EnvVarSourceBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for EnvVarSourceDie: %s", diff.List())
	}
}

func TestObjectFieldSelectorDie_MissingMethods(t *testingx.T) {
	die := ObjectFieldSelectorBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for ObjectFieldSelectorDie: %s", diff.List())
	}
}

func TestResourceFieldSelectorDie_MissingMethods(t *testingx.T) {
	die := ResourceFieldSelectorBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for ResourceFieldSelectorDie: %s", diff.List())
	}
}

func TestConfigMapKeySelectorDie_MissingMethods(t *testingx.T) {
	die := ConfigMapKeySelectorBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for ConfigMapKeySelectorDie: %s", diff.List())
	}
}

func TestSecretKeySelectorDie_MissingMethods(t *testingx.T) {
	die := SecretKeySelectorBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for SecretKeySelectorDie: %s", diff.List())
	}
}

func TestResourceRequirementsDie_MissingMethods(t *testingx.T) {
	die := ResourceRequirementsBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for ResourceRequirementsDie: %s", diff.List())
	}
}

func TestResourceClaimDie_MissingMethods(t *testingx.T) {
	die := ResourceClaimBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for ResourceClaimDie: %s", diff.List())
	}
}

func TestContainerResizePolicyDie_MissingMethods(t *testingx.T) {
	die := ContainerResizePolicyBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for ContainerResizePolicyDie: %s", diff.List())
	}
}

func TestVolumeMountDie_MissingMethods(t *testingx.T) {
	die := VolumeMountBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for VolumeMountDie: %s", diff.List())
	}
}

func TestVolumeDeviceDie_MissingMethods(t *testingx.T) {
	die := VolumeDeviceBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for VolumeDeviceDie: %s", diff.List())
	}
}

func TestProbeDie_MissingMethods(t *testingx.T) {
	die := ProbeBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for ProbeDie: %s", diff.List())
	}
}

func TestLifecycleDie_MissingMethods(t *testingx.T) {
	die := LifecycleBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for LifecycleDie: %s", diff.List())
	}
}

func TestLifecycleHandlerDie_MissingMethods(t *testingx.T) {
	die := LifecycleHandlerBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for LifecycleHandlerDie: %s", diff.List())
	}
}

func TestProbeHandlerDie_MissingMethods(t *testingx.T) {
	die := ProbeHandlerBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for ProbeHandlerDie: %s", diff.List())
	}
}

func TestExecActionDie_MissingMethods(t *testingx.T) {
	die := ExecActionBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for ExecActionDie: %s", diff.List())
	}
}

func TestHTTPGetActionDie_MissingMethods(t *testingx.T) {
	die := HTTPGetActionBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for HTTPGetActionDie: %s", diff.List())
	}
}

func TestHTTPHeaderDie_MissingMethods(t *testingx.T) {
	die := HTTPHeaderBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for HTTPHeaderDie: %s", diff.List())
	}
}

func TestTCPSocketActionDie_MissingMethods(t *testingx.T) {
	die := TCPSocketActionBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for TCPSocketActionDie: %s", diff.List())
	}
}

func TestGRPCActionDie_MissingMethods(t *testingx.T) {
	die := GRPCActionBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for GRPCActionDie: %s", diff.List())
	}
}

func TestSleepActionDie_MissingMethods(t *testingx.T) {
	die := SleepActionBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for SleepActionDie: %s", diff.List())
	}
}

func TestSecurityContextDie_MissingMethods(t *testingx.T) {
	die := SecurityContextBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for SecurityContextDie: %s", diff.List())
	}
}

func TestCapabilitiesDie_MissingMethods(t *testingx.T) {
	die := CapabilitiesBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for CapabilitiesDie: %s", diff.List())
	}
}

func TestSELinuxOptionsDie_MissingMethods(t *testingx.T) {
	die := SELinuxOptionsBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for SELinuxOptionsDie: %s", diff.List())
	}
}

func TestWindowsSecurityContextOptionsDie_MissingMethods(t *testingx.T) {
	die := WindowsSecurityContextOptionsBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for WindowsSecurityContextOptionsDie: %s", diff.List())
	}
}

func TestSeccompProfileDie_MissingMethods(t *testingx.T) {
	die := SeccompProfileBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for SeccompProfileDie: %s", diff.List())
	}
}

func TestContainerStatusDie_MissingMethods(t *testingx.T) {
	die := ContainerStatusBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for ContainerStatusDie: %s", diff.List())
	}
}

func TestContainerStateDie_MissingMethods(t *testingx.T) {
	die := ContainerStateBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for ContainerStateDie: %s", diff.List())
	}
}

func TestContainerStateWaitingDie_MissingMethods(t *testingx.T) {
	die := ContainerStateWaitingBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for ContainerStateWaitingDie: %s", diff.List())
	}
}

func TestContainerStateRunningDie_MissingMethods(t *testingx.T) {
	die := ContainerStateRunningBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for ContainerStateRunningDie: %s", diff.List())
	}
}

func TestContainerStateTerminatedDie_MissingMethods(t *testingx.T) {
	die := ContainerStateTerminatedBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for ContainerStateTerminatedDie: %s", diff.List())
	}
}

func TestEndpointsDie_MissingMethods(t *testingx.T) {
	die := EndpointsBlank
	ignore := []string{"TypeMeta", "ObjectMeta"}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for EndpointsDie: %s", diff.List())
	}
}

func TestEndpointSubsetDie_MissingMethods(t *testingx.T) {
	die := EndpointSubsetBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for EndpointSubsetDie: %s", diff.List())
	}
}

func TestEndpointAddressDie_MissingMethods(t *testingx.T) {
	die := EndpointAddressBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for EndpointAddressDie: %s", diff.List())
	}
}

func TestEndpointPortDie_MissingMethods(t *testingx.T) {
	die := EndpointPortBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for EndpointPortDie: %s", diff.List())
	}
}

func TestEventDie_MissingMethods(t *testingx.T) {
	die := EventBlank
	ignore := []string{"TypeMeta", "ObjectMeta"}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for EventDie: %s", diff.List())
	}
}

func TestEventSourceDie_MissingMethods(t *testingx.T) {
	die := EventSourceBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for EventSourceDie: %s", diff.List())
	}
}

func TestEventSeriesDie_MissingMethods(t *testingx.T) {
	die := EventSeriesBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for EventSeriesDie: %s", diff.List())
	}
}

func TestLimitRangeDie_MissingMethods(t *testingx.T) {
	die := LimitRangeBlank
	ignore := []string{"TypeMeta", "ObjectMeta"}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for LimitRangeDie: %s", diff.List())
	}
}

func TestLimitRangeSpecDie_MissingMethods(t *testingx.T) {
	die := LimitRangeSpecBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for LimitRangeSpecDie: %s", diff.List())
	}
}

func TestLimitRangeItemDie_MissingMethods(t *testingx.T) {
	die := LimitRangeItemBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for LimitRangeItemDie: %s", diff.List())
	}
}

func TestNamespaceDie_MissingMethods(t *testingx.T) {
	die := NamespaceBlank
	ignore := []string{"TypeMeta", "ObjectMeta"}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for NamespaceDie: %s", diff.List())
	}
}

func TestNamespaceSpecDie_MissingMethods(t *testingx.T) {
	die := NamespaceSpecBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for NamespaceSpecDie: %s", diff.List())
	}
}

func TestNamespaceStatusDie_MissingMethods(t *testingx.T) {
	die := NamespaceStatusBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for NamespaceStatusDie: %s", diff.List())
	}
}

func TestNodeDie_MissingMethods(t *testingx.T) {
	die := NodeBlank
	ignore := []string{"TypeMeta", "ObjectMeta"}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for NodeDie: %s", diff.List())
	}
}

func TestNodeSpecDie_MissingMethods(t *testingx.T) {
	die := NodeSpecBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for NodeSpecDie: %s", diff.List())
	}
}

func TestTaintDie_MissingMethods(t *testingx.T) {
	die := TaintBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for TaintDie: %s", diff.List())
	}
}

func TestNodeConfigSourceDie_MissingMethods(t *testingx.T) {
	die := NodeConfigSourceBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for NodeConfigSourceDie: %s", diff.List())
	}
}

func TestConfigMapNodeConfigSourceDie_MissingMethods(t *testingx.T) {
	die := ConfigMapNodeConfigSourceBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for ConfigMapNodeConfigSourceDie: %s", diff.List())
	}
}

func TestNodeStatusDie_MissingMethods(t *testingx.T) {
	die := NodeStatusBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for NodeStatusDie: %s", diff.List())
	}
}

func TestNodeAddressDie_MissingMethods(t *testingx.T) {
	die := NodeAddressBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for NodeAddressDie: %s", diff.List())
	}
}

func TestNodeDaemonEndpointsDie_MissingMethods(t *testingx.T) {
	die := NodeDaemonEndpointsBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for NodeDaemonEndpointsDie: %s", diff.List())
	}
}

func TestDaemonEndpointDie_MissingMethods(t *testingx.T) {
	die := DaemonEndpointBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for DaemonEndpointDie: %s", diff.List())
	}
}

func TestNodeSystemInfoDie_MissingMethods(t *testingx.T) {
	die := NodeSystemInfoBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for NodeSystemInfoDie: %s", diff.List())
	}
}

func TestContainerImageDie_MissingMethods(t *testingx.T) {
	die := ContainerImageBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for ContainerImageDie: %s", diff.List())
	}
}

func TestAttachedVolumeDie_MissingMethods(t *testingx.T) {
	die := AttachedVolumeBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for AttachedVolumeDie: %s", diff.List())
	}
}

func TestNodeConfigStatusDie_MissingMethods(t *testingx.T) {
	die := NodeConfigStatusBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for NodeConfigStatusDie: %s", diff.List())
	}
}

func TestPersistentVolumeDie_MissingMethods(t *testingx.T) {
	die := PersistentVolumeBlank
	ignore := []string{"TypeMeta", "ObjectMeta"}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for PersistentVolumeDie: %s", diff.List())
	}
}

func TestPersistentVolumeSpecDie_MissingMethods(t *testingx.T) {
	die := PersistentVolumeSpecBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for PersistentVolumeSpecDie: %s", diff.List())
	}
}

func TestPersistentVolumeStatusDie_MissingMethods(t *testingx.T) {
	die := PersistentVolumeStatusBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for PersistentVolumeStatusDie: %s", diff.List())
	}
}

func TestGlusterfsPersistentVolumeSourceDie_MissingMethods(t *testingx.T) {
	die := GlusterfsPersistentVolumeSourceBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for GlusterfsPersistentVolumeSourceDie: %s", diff.List())
	}
}

func TestRBDPersistentVolumeSourceDie_MissingMethods(t *testingx.T) {
	die := RBDPersistentVolumeSourceBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for RBDPersistentVolumeSourceDie: %s", diff.List())
	}
}

func TestISCSIPersistentVolumeSourceDie_MissingMethods(t *testingx.T) {
	die := ISCSIPersistentVolumeSourceBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for ISCSIPersistentVolumeSourceDie: %s", diff.List())
	}
}

func TestCinderPersistentVolumeSourceDie_MissingMethods(t *testingx.T) {
	die := CinderPersistentVolumeSourceBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for CinderPersistentVolumeSourceDie: %s", diff.List())
	}
}

func TestCephFSPersistentVolumeSourceDie_MissingMethods(t *testingx.T) {
	die := CephFSPersistentVolumeSourceBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for CephFSPersistentVolumeSourceDie: %s", diff.List())
	}
}

func TestFlexPersistentVolumeSourceDie_MissingMethods(t *testingx.T) {
	die := FlexPersistentVolumeSourceBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for FlexPersistentVolumeSourceDie: %s", diff.List())
	}
}

func TestAzureFilePersistentVolumeSourceDie_MissingMethods(t *testingx.T) {
	die := AzureFilePersistentVolumeSourceBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for AzureFilePersistentVolumeSourceDie: %s", diff.List())
	}
}

func TestScaleIOPersistentVolumeSourceDie_MissingMethods(t *testingx.T) {
	die := ScaleIOPersistentVolumeSourceBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for ScaleIOPersistentVolumeSourceDie: %s", diff.List())
	}
}

func TestLocalVolumeSourceDie_MissingMethods(t *testingx.T) {
	die := LocalVolumeSourceBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for LocalVolumeSourceDie: %s", diff.List())
	}
}

func TestStorageOSPersistentVolumeSourceDie_MissingMethods(t *testingx.T) {
	die := StorageOSPersistentVolumeSourceBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for StorageOSPersistentVolumeSourceDie: %s", diff.List())
	}
}

func TestCSIPersistentVolumeSourceDie_MissingMethods(t *testingx.T) {
	die := CSIPersistentVolumeSourceBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for CSIPersistentVolumeSourceDie: %s", diff.List())
	}
}

func TestVolumeNodeAffinityDie_MissingMethods(t *testingx.T) {
	die := VolumeNodeAffinityBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for VolumeNodeAffinityDie: %s", diff.List())
	}
}

func TestNodeSelectorDie_MissingMethods(t *testingx.T) {
	die := NodeSelectorBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for NodeSelectorDie: %s", diff.List())
	}
}

func TestNodeSelectorTermDie_MissingMethods(t *testingx.T) {
	die := NodeSelectorTermBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for NodeSelectorTermDie: %s", diff.List())
	}
}

func TestNodeSelectorRequirementDie_MissingMethods(t *testingx.T) {
	die := NodeSelectorRequirementBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for NodeSelectorRequirementDie: %s", diff.List())
	}
}

func TestPersistentVolumeClaimDie_MissingMethods(t *testingx.T) {
	die := PersistentVolumeClaimBlank
	ignore := []string{"TypeMeta", "ObjectMeta"}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for PersistentVolumeClaimDie: %s", diff.List())
	}
}

func TestPersistentVolumeClaimSpecDie_MissingMethods(t *testingx.T) {
	die := PersistentVolumeClaimSpecBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for PersistentVolumeClaimSpecDie: %s", diff.List())
	}
}

func TestVolumeResourceRequirementsDie_MissingMethods(t *testingx.T) {
	die := VolumeResourceRequirementsBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for VolumeResourceRequirementsDie: %s", diff.List())
	}
}

func TestPersistentVolumeClaimStatusDie_MissingMethods(t *testingx.T) {
	die := PersistentVolumeClaimStatusBlank
	ignore := []string{"AllocatedResourceStatuses"}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for PersistentVolumeClaimStatusDie: %s", diff.List())
	}
}

func TestModifyVolumeStatusDie_MissingMethods(t *testingx.T) {
	die := ModifyVolumeStatusBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for ModifyVolumeStatusDie: %s", diff.List())
	}
}

func TestPersistentVolumeClaimTemplateDie_MissingMethods(t *testingx.T) {
	die := PersistentVolumeClaimTemplateBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for PersistentVolumeClaimTemplateDie: %s", diff.List())
	}
}

func TestPodDie_MissingMethods(t *testingx.T) {
	die := PodBlank
	ignore := []string{"TypeMeta", "ObjectMeta"}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for PodDie: %s", diff.List())
	}
}

func TestPodSpecDie_MissingMethods(t *testingx.T) {
	die := PodSpecBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for PodSpecDie: %s", diff.List())
	}
}

func TestPodSchedulingGateDie_MissingMethods(t *testingx.T) {
	die := PodSchedulingGateBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for PodSchedulingGateDie: %s", diff.List())
	}
}

func TestPodResourceClaimDie_MissingMethods(t *testingx.T) {
	die := PodResourceClaimBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for PodResourceClaimDie: %s", diff.List())
	}
}

func TestClaimSourceDie_MissingMethods(t *testingx.T) {
	die := ClaimSourceBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for ClaimSourceDie: %s", diff.List())
	}
}

func TestPodSecurityContextDie_MissingMethods(t *testingx.T) {
	die := PodSecurityContextBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for PodSecurityContextDie: %s", diff.List())
	}
}

func TestSysctlDie_MissingMethods(t *testingx.T) {
	die := SysctlBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for SysctlDie: %s", diff.List())
	}
}

func TestTolerationDie_MissingMethods(t *testingx.T) {
	die := TolerationBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for TolerationDie: %s", diff.List())
	}
}

func TestHostAliasDie_MissingMethods(t *testingx.T) {
	die := HostAliasBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for HostAliasDie: %s", diff.List())
	}
}

func TestPodDNSConfigDie_MissingMethods(t *testingx.T) {
	die := PodDNSConfigBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for PodDNSConfigDie: %s", diff.List())
	}
}

func TestPodDNSConfigOptionDie_MissingMethods(t *testingx.T) {
	die := PodDNSConfigOptionBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for PodDNSConfigOptionDie: %s", diff.List())
	}
}

func TestPodReadinessGateDie_MissingMethods(t *testingx.T) {
	die := PodReadinessGateBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for PodReadinessGateDie: %s", diff.List())
	}
}

func TestTopologySpreadConstraintDie_MissingMethods(t *testingx.T) {
	die := TopologySpreadConstraintBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for TopologySpreadConstraintDie: %s", diff.List())
	}
}

func TestPodOSDie_MissingMethods(t *testingx.T) {
	die := PodOSBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for PodOSDie: %s", diff.List())
	}
}

func TestPodStatusDie_MissingMethods(t *testingx.T) {
	die := PodStatusBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for PodStatusDie: %s", diff.List())
	}
}

func TestPodTemplateDie_MissingMethods(t *testingx.T) {
	die := PodTemplateBlank
	ignore := []string{"TypeMeta", "ObjectMeta"}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for PodTemplateDie: %s", diff.List())
	}
}

func TestPodTemplateSpecDie_MissingMethods(t *testingx.T) {
	die := PodTemplateSpecBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for PodTemplateSpecDie: %s", diff.List())
	}
}

func TestReplicationControllerDie_MissingMethods(t *testingx.T) {
	die := ReplicationControllerBlank
	ignore := []string{"TypeMeta", "ObjectMeta"}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for ReplicationControllerDie: %s", diff.List())
	}
}

func TestReplicationControllerSpecDie_MissingMethods(t *testingx.T) {
	die := ReplicationControllerSpecBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for ReplicationControllerSpecDie: %s", diff.List())
	}
}

func TestReplicationControllerStatusDie_MissingMethods(t *testingx.T) {
	die := ReplicationControllerStatusBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for ReplicationControllerStatusDie: %s", diff.List())
	}
}

func TestResourceQuotaDie_MissingMethods(t *testingx.T) {
	die := ResourceQuotaBlank
	ignore := []string{"TypeMeta", "ObjectMeta"}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for ResourceQuotaDie: %s", diff.List())
	}
}

func TestResourceQuotaSpecDie_MissingMethods(t *testingx.T) {
	die := ResourceQuotaSpecBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for ResourceQuotaSpecDie: %s", diff.List())
	}
}

func TestScopeSelectorDie_MissingMethods(t *testingx.T) {
	die := ScopeSelectorBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for ScopeSelectorDie: %s", diff.List())
	}
}

func TestScopedResourceSelectorRequirementDie_MissingMethods(t *testingx.T) {
	die := ScopedResourceSelectorRequirementBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for ScopedResourceSelectorRequirementDie: %s", diff.List())
	}
}

func TestResourceQuotaStatusDie_MissingMethods(t *testingx.T) {
	die := ResourceQuotaStatusBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for ResourceQuotaStatusDie: %s", diff.List())
	}
}

func TestSecretDie_MissingMethods(t *testingx.T) {
	die := SecretBlank
	ignore := []string{"Data", "StringData", "TypeMeta", "ObjectMeta"}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for SecretDie: %s", diff.List())
	}
}

func TestServiceDie_MissingMethods(t *testingx.T) {
	die := ServiceBlank
	ignore := []string{"TypeMeta", "ObjectMeta"}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for ServiceDie: %s", diff.List())
	}
}

func TestServiceSpecDie_MissingMethods(t *testingx.T) {
	die := ServiceSpecBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for ServiceSpecDie: %s", diff.List())
	}
}

func TestServicePortDie_MissingMethods(t *testingx.T) {
	die := ServicePortBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for ServicePortDie: %s", diff.List())
	}
}

func TestSessionAffinityConfigDie_MissingMethods(t *testingx.T) {
	die := SessionAffinityConfigBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for SessionAffinityConfigDie: %s", diff.List())
	}
}

func TestClientIPConfigDie_MissingMethods(t *testingx.T) {
	die := ClientIPConfigBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for ClientIPConfigDie: %s", diff.List())
	}
}

func TestServiceStatusDie_MissingMethods(t *testingx.T) {
	die := ServiceStatusBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for ServiceStatusDie: %s", diff.List())
	}
}

func TestLoadBalancerStatusDie_MissingMethods(t *testingx.T) {
	die := LoadBalancerStatusBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for LoadBalancerStatusDie: %s", diff.List())
	}
}

func TestLoadBalancerIngressDie_MissingMethods(t *testingx.T) {
	die := LoadBalancerIngressBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for LoadBalancerIngressDie: %s", diff.List())
	}
}

func TestPortStatusDie_MissingMethods(t *testingx.T) {
	die := PortStatusBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for PortStatusDie: %s", diff.List())
	}
}

func TestServiceAccountDie_MissingMethods(t *testingx.T) {
	die := ServiceAccountBlank
	ignore := []string{"TypeMeta", "ObjectMeta"}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for ServiceAccountDie: %s", diff.List())
	}
}

func TestVolumeDie_MissingMethods(t *testingx.T) {
	die := VolumeBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for VolumeDie: %s", diff.List())
	}
}

func TestHostPathVolumeSourceDie_MissingMethods(t *testingx.T) {
	die := HostPathVolumeSourceBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for HostPathVolumeSourceDie: %s", diff.List())
	}
}

func TestEmptyDirVolumeSourceDie_MissingMethods(t *testingx.T) {
	die := EmptyDirVolumeSourceBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for EmptyDirVolumeSourceDie: %s", diff.List())
	}
}

func TestGCEPersistentDiskVolumeSourceDie_MissingMethods(t *testingx.T) {
	die := GCEPersistentDiskVolumeSourceBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for GCEPersistentDiskVolumeSourceDie: %s", diff.List())
	}
}

func TestAWSElasticBlockStoreVolumeSourceDie_MissingMethods(t *testingx.T) {
	die := AWSElasticBlockStoreVolumeSourceBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for AWSElasticBlockStoreVolumeSourceDie: %s", diff.List())
	}
}

func TestGitRepoVolumeSourceDie_MissingMethods(t *testingx.T) {
	die := GitRepoVolumeSourceBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for GitRepoVolumeSourceDie: %s", diff.List())
	}
}

func TestSecretVolumeSourceDie_MissingMethods(t *testingx.T) {
	die := SecretVolumeSourceBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for SecretVolumeSourceDie: %s", diff.List())
	}
}

func TestNFSVolumeSourceDie_MissingMethods(t *testingx.T) {
	die := NFSVolumeSourceBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for NFSVolumeSourceDie: %s", diff.List())
	}
}

func TestISCSIVolumeSourceDie_MissingMethods(t *testingx.T) {
	die := ISCSIVolumeSourceBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for ISCSIVolumeSourceDie: %s", diff.List())
	}
}

func TestGlusterfsVolumeSourceDie_MissingMethods(t *testingx.T) {
	die := GlusterfsVolumeSourceBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for GlusterfsVolumeSourceDie: %s", diff.List())
	}
}

func TestPersistentVolumeClaimVolumeSourceDie_MissingMethods(t *testingx.T) {
	die := PersistentVolumeClaimVolumeSourceBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for PersistentVolumeClaimVolumeSourceDie: %s", diff.List())
	}
}

func TestRBDVolumeSourceDie_MissingMethods(t *testingx.T) {
	die := RBDVolumeSourceBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for RBDVolumeSourceDie: %s", diff.List())
	}
}

func TestFlexVolumeSourceDie_MissingMethods(t *testingx.T) {
	die := FlexVolumeSourceBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for FlexVolumeSourceDie: %s", diff.List())
	}
}

func TestCinderVolumeSourceDie_MissingMethods(t *testingx.T) {
	die := CinderVolumeSourceBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for CinderVolumeSourceDie: %s", diff.List())
	}
}

func TestCephFSVolumeSourceDie_MissingMethods(t *testingx.T) {
	die := CephFSVolumeSourceBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for CephFSVolumeSourceDie: %s", diff.List())
	}
}

func TestFlockerVolumeSourceDie_MissingMethods(t *testingx.T) {
	die := FlockerVolumeSourceBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for FlockerVolumeSourceDie: %s", diff.List())
	}
}

func TestDownwardAPIVolumeSourceDie_MissingMethods(t *testingx.T) {
	die := DownwardAPIVolumeSourceBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for DownwardAPIVolumeSourceDie: %s", diff.List())
	}
}

func TestDownwardAPIVolumeFileDie_MissingMethods(t *testingx.T) {
	die := DownwardAPIVolumeFileBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for DownwardAPIVolumeFileDie: %s", diff.List())
	}
}

func TestFCVolumeSourceDie_MissingMethods(t *testingx.T) {
	die := FCVolumeSourceBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for FCVolumeSourceDie: %s", diff.List())
	}
}

func TestAzureFileVolumeSourceDie_MissingMethods(t *testingx.T) {
	die := AzureFileVolumeSourceBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for AzureFileVolumeSourceDie: %s", diff.List())
	}
}

func TestConfigMapVolumeSourceDie_MissingMethods(t *testingx.T) {
	die := ConfigMapVolumeSourceBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for ConfigMapVolumeSourceDie: %s", diff.List())
	}
}

func TestVsphereVirtualDiskVolumeSourceDie_MissingMethods(t *testingx.T) {
	die := VsphereVirtualDiskVolumeSourceBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for VsphereVirtualDiskVolumeSourceDie: %s", diff.List())
	}
}

func TestQuobyteVolumeSourceDie_MissingMethods(t *testingx.T) {
	die := QuobyteVolumeSourceBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for QuobyteVolumeSourceDie: %s", diff.List())
	}
}

func TestAzureDiskVolumeSourceDie_MissingMethods(t *testingx.T) {
	die := AzureDiskVolumeSourceBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for AzureDiskVolumeSourceDie: %s", diff.List())
	}
}

func TestPhotonPersistentDiskVolumeSourceDie_MissingMethods(t *testingx.T) {
	die := PhotonPersistentDiskVolumeSourceBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for PhotonPersistentDiskVolumeSourceDie: %s", diff.List())
	}
}

func TestProjectedVolumeSourceDie_MissingMethods(t *testingx.T) {
	die := ProjectedVolumeSourceBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for ProjectedVolumeSourceDie: %s", diff.List())
	}
}

func TestVolumeProjectionDie_MissingMethods(t *testingx.T) {
	die := VolumeProjectionBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for VolumeProjectionDie: %s", diff.List())
	}
}

func TestSecretProjectionDie_MissingMethods(t *testingx.T) {
	die := SecretProjectionBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for SecretProjectionDie: %s", diff.List())
	}
}

func TestDownwardAPIProjectionDie_MissingMethods(t *testingx.T) {
	die := DownwardAPIProjectionBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for DownwardAPIProjectionDie: %s", diff.List())
	}
}

func TestConfigMapProjectionDie_MissingMethods(t *testingx.T) {
	die := ConfigMapProjectionBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for ConfigMapProjectionDie: %s", diff.List())
	}
}

func TestServiceAccountTokenProjectionDie_MissingMethods(t *testingx.T) {
	die := ServiceAccountTokenProjectionBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for ServiceAccountTokenProjectionDie: %s", diff.List())
	}
}

func TestClusterTrustBundleProjectionDie_MissingMethods(t *testingx.T) {
	die := ClusterTrustBundleProjectionBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for ClusterTrustBundleProjectionDie: %s", diff.List())
	}
}

func TestPortworxVolumeSourceDie_MissingMethods(t *testingx.T) {
	die := PortworxVolumeSourceBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for PortworxVolumeSourceDie: %s", diff.List())
	}
}

func TestScaleIOVolumeSourceDie_MissingMethods(t *testingx.T) {
	die := ScaleIOVolumeSourceBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for ScaleIOVolumeSourceDie: %s", diff.List())
	}
}

func TestStorageOSVolumeSourceDie_MissingMethods(t *testingx.T) {
	die := StorageOSVolumeSourceBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for StorageOSVolumeSourceDie: %s", diff.List())
	}
}

func TestCSIVolumeSourceDie_MissingMethods(t *testingx.T) {
	die := CSIVolumeSourceBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for CSIVolumeSourceDie: %s", diff.List())
	}
}

func TestEphemeralVolumeSourceDie_MissingMethods(t *testingx.T) {
	die := EphemeralVolumeSourceBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for EphemeralVolumeSourceDie: %s", diff.List())
	}
}

func TestKeyToPathDie_MissingMethods(t *testingx.T) {
	die := KeyToPathBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for KeyToPathDie: %s", diff.List())
	}
}
