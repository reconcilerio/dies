//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright 2021-2022 the original author or authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by diegen. DO NOT EDIT.

package v1alpha1

import (
	testing "reconciler.io/dies/testing"
	testingx "testing"
)

func TestMutatingAdmissionPolicyDie_MissingMethods(t *testingx.T) {
	die := MutatingAdmissionPolicyBlank
	ignore := []string{"TypeMeta", "ObjectMeta"}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for MutatingAdmissionPolicyDie: %s", diff.List())
	}
}

func TestMutatingAdmissionPolicySpecDie_MissingMethods(t *testingx.T) {
	die := MutatingAdmissionPolicySpecBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for MutatingAdmissionPolicySpecDie: %s", diff.List())
	}
}

func TestParamKindDie_MissingMethods(t *testingx.T) {
	die := ParamKindBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for ParamKindDie: %s", diff.List())
	}
}

func TestMatchResourcesDie_MissingMethods(t *testingx.T) {
	die := MatchResourcesBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for MatchResourcesDie: %s", diff.List())
	}
}

func TestMatchConditionDie_MissingMethods(t *testingx.T) {
	die := MatchConditionBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for MatchConditionDie: %s", diff.List())
	}
}

func TestVariableDie_MissingMethods(t *testingx.T) {
	die := VariableBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for VariableDie: %s", diff.List())
	}
}

func TestMutationDie_MissingMethods(t *testingx.T) {
	die := MutationBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for MutationDie: %s", diff.List())
	}
}

func TestNamedRuleWithOperationsDie_MissingMethods(t *testingx.T) {
	die := NamedRuleWithOperationsBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for NamedRuleWithOperationsDie: %s", diff.List())
	}
}

func TestApplyConfigurationDie_MissingMethods(t *testingx.T) {
	die := ApplyConfigurationBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for ApplyConfigurationDie: %s", diff.List())
	}
}

func TestJSONPatchDie_MissingMethods(t *testingx.T) {
	die := JSONPatchBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for JSONPatchDie: %s", diff.List())
	}
}
