//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright 2021-2022 the original author or authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by diegen. DO NOT EDIT.

package v1

import (
	metav1 "dies.dev/apis/meta/v1"
	json "encoding/json"
	fmtx "fmt"
	corev1 "k8s.io/api/core/v1"
	storagev1 "k8s.io/api/storage/v1"
	apismetav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	unstructured "k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
	runtime "k8s.io/apimachinery/pkg/runtime"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
)

var CSIDriverBlank = (&CSIDriverDie{}).DieFeed(storagev1.CSIDriver{})

type CSIDriverDie struct {
	metav1.FrozenObjectMeta
	mutable bool
	r       storagev1.CSIDriver
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *CSIDriverDie) DieImmutable(immutable bool) *CSIDriverDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *CSIDriverDie) DieFeed(r storagev1.CSIDriver) *CSIDriverDie {
	if d.mutable {
		d.FrozenObjectMeta = metav1.FreezeObjectMeta(r.ObjectMeta)
		d.r = r
		return d
	}
	return &CSIDriverDie{
		FrozenObjectMeta: metav1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *CSIDriverDie) DieFeedPtr(r *storagev1.CSIDriver) *CSIDriverDie {
	if r == nil {
		r = &storagev1.CSIDriver{}
	}
	return d.DieFeed(*r)
}

// DieRelease returns the resource managed by the die.
func (d *CSIDriverDie) DieRelease() storagev1.CSIDriver {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *CSIDriverDie) DieReleasePtr() *storagev1.CSIDriver {
	r := d.DieRelease()
	return &r
}

// DieReleaseUnstructured returns the resource managed by the die as an unstructured object.
func (d *CSIDriverDie) DieReleaseUnstructured() runtime.Unstructured {
	r := d.DieReleasePtr()
	u, _ := runtime.DefaultUnstructuredConverter.ToUnstructured(r)
	return &unstructured.Unstructured{
		Object: u,
	}
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *CSIDriverDie) DieStamp(fn func(r *storagev1.CSIDriver)) *CSIDriverDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *CSIDriverDie) DeepCopy() *CSIDriverDie {
	r := *d.r.DeepCopy()
	return &CSIDriverDie{
		FrozenObjectMeta: metav1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
	}
}

var _ runtime.Object = (*CSIDriverDie)(nil)

func (d *CSIDriverDie) DeepCopyObject() runtime.Object {
	return d.r.DeepCopy()
}

func (d *CSIDriverDie) GetObjectKind() schema.ObjectKind {
	r := d.DieRelease()
	return r.GetObjectKind()
}

func (d *CSIDriverDie) MarshalJSON() ([]byte, error) {
	return json.Marshal(d.r)
}

func (d *CSIDriverDie) UnmarshalJSON(b []byte) error {
	if d == CSIDriverBlank {
		return fmtx.Errorf("cannot unmarshal into the blank die, create a copy first")
	}
	if !d.mutable {
		return fmtx.Errorf("cannot unmarshal into immutable dies, create a mutable version first")
	}
	r := &storagev1.CSIDriver{}
	err := json.Unmarshal(b, r)
	*d = *d.DieFeed(*r)
	return err
}

// MetadataDie stamps the resource's ObjectMeta field with a mutable die.
func (d *CSIDriverDie) MetadataDie(fn func(d *metav1.ObjectMetaDie)) *CSIDriverDie {
	return d.DieStamp(func(r *storagev1.CSIDriver) {
		d := metav1.ObjectMetaBlank.DieImmutable(false).DieFeed(r.ObjectMeta)
		fn(d)
		r.ObjectMeta = d.DieRelease()
	})
}

// SpecDie stamps the resource's spec field with a mutable die.
func (d *CSIDriverDie) SpecDie(fn func(d *CSIDriverSpecDie)) *CSIDriverDie {
	return d.DieStamp(func(r *storagev1.CSIDriver) {
		d := CSIDriverSpecBlank.DieImmutable(false).DieFeed(r.Spec)
		fn(d)
		r.Spec = d.DieRelease()
	})
}

// Specification of the CSI Driver.
func (d *CSIDriverDie) Spec(v storagev1.CSIDriverSpec) *CSIDriverDie {
	return d.DieStamp(func(r *storagev1.CSIDriver) {
		r.Spec = v
	})
}

var CSIDriverSpecBlank = (&CSIDriverSpecDie{}).DieFeed(storagev1.CSIDriverSpec{})

type CSIDriverSpecDie struct {
	mutable bool
	r       storagev1.CSIDriverSpec
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *CSIDriverSpecDie) DieImmutable(immutable bool) *CSIDriverSpecDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *CSIDriverSpecDie) DieFeed(r storagev1.CSIDriverSpec) *CSIDriverSpecDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &CSIDriverSpecDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *CSIDriverSpecDie) DieFeedPtr(r *storagev1.CSIDriverSpec) *CSIDriverSpecDie {
	if r == nil {
		r = &storagev1.CSIDriverSpec{}
	}
	return d.DieFeed(*r)
}

// DieRelease returns the resource managed by the die.
func (d *CSIDriverSpecDie) DieRelease() storagev1.CSIDriverSpec {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *CSIDriverSpecDie) DieReleasePtr() *storagev1.CSIDriverSpec {
	r := d.DieRelease()
	return &r
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *CSIDriverSpecDie) DieStamp(fn func(r *storagev1.CSIDriverSpec)) *CSIDriverSpecDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *CSIDriverSpecDie) DeepCopy() *CSIDriverSpecDie {
	r := *d.r.DeepCopy()
	return &CSIDriverSpecDie{
		mutable: d.mutable,
		r:       r,
	}
}

// attachRequired indicates this CSI volume driver requires an attach operation (because it implements the CSI ControllerPublishVolume() method), and that the Kubernetes attach detach controller should call the attach volume interface which checks the volumeattachment status and waits until the volume is attached before proceeding to mounting. The CSI external-attacher coordinates with CSI volume driver and updates the volumeattachment status when the attach operation is complete. If the CSIDriverRegistry feature gate is enabled and the value is specified to false, the attach operation will be skipped. Otherwise the attach operation will be called.
//
// This field is immutable.
func (d *CSIDriverSpecDie) AttachRequired(v *bool) *CSIDriverSpecDie {
	return d.DieStamp(func(r *storagev1.CSIDriverSpec) {
		r.AttachRequired = v
	})
}

// If set to true, podInfoOnMount indicates this CSI volume driver requires additional pod information (like podName, podUID, etc.) during mount operations. If set to false, pod information will not be passed on mount. Default is false. The CSI driver specifies podInfoOnMount as part of driver deployment. If true, Kubelet will pass pod information as VolumeContext in the CSI NodePublishVolume() calls. The CSI driver is responsible for parsing and validating the information passed in as VolumeContext. The following VolumeConext will be passed if podInfoOnMount is set to true. This list might grow, but the prefix will be used. "csi.storage.k8s.io/pod.name": pod.Name "csi.storage.k8s.io/pod.namespace": pod.Namespace "csi.storage.k8s.io/pod.uid": string(pod.UID) "csi.storage.k8s.io/ephemeral": "true" if the volume is an ephemeral inline volume                                 defined by a CSIVolumeSource, otherwise "false"
//
// "csi.storage.k8s.io/ephemeral" is a new feature in Kubernetes 1.16. It is only required for drivers which support both the "Persistent" and "Ephemeral" VolumeLifecycleMode. Other drivers can leave pod info disabled and/or ignore this field. As Kubernetes 1.15 doesn't support this field, drivers can only support one mode when deployed on such a cluster and the deployment determines which mode that is, for example via a command line parameter of the driver.
//
// This field is immutable.
func (d *CSIDriverSpecDie) PodInfoOnMount(v *bool) *CSIDriverSpecDie {
	return d.DieStamp(func(r *storagev1.CSIDriverSpec) {
		r.PodInfoOnMount = v
	})
}

// volumeLifecycleModes defines what kind of volumes this CSI volume driver supports. The default if the list is empty is "Persistent", which is the usage defined by the CSI specification and implemented in Kubernetes via the usual PV/PVC mechanism. The other mode is "Ephemeral". In this mode, volumes are defined inline inside the pod spec with CSIVolumeSource and their lifecycle is tied to the lifecycle of that pod. A driver has to be aware of this because it is only going to get a NodePublishVolume call for such a volume. For more information about implementing this mode, see https://kubernetes-csi.github.io/docs/ephemeral-local-volumes.html A driver can support one or more of these modes and more modes may be added in the future. This field is beta.
//
// This field is immutable.
func (d *CSIDriverSpecDie) VolumeLifecycleModes(v ...storagev1.VolumeLifecycleMode) *CSIDriverSpecDie {
	return d.DieStamp(func(r *storagev1.CSIDriverSpec) {
		r.VolumeLifecycleModes = v
	})
}

// If set to true, storageCapacity indicates that the CSI volume driver wants pod scheduling to consider the storage capacity that the driver deployment will report by creating CSIStorageCapacity objects with capacity information.
//
// The check can be enabled immediately when deploying a driver. In that case, provisioning new volumes with late binding will pause until the driver deployment has published some suitable CSIStorageCapacity object.
//
// Alternatively, the driver can be deployed with the field unset or false and it can be flipped later when storage capacity information has been published.
//
// This field was immutable in Kubernetes <= 1.22 and now is mutable.
//
// This is a beta field and only available when the CSIStorageCapacity feature is enabled. The default is false.
func (d *CSIDriverSpecDie) StorageCapacity(v *bool) *CSIDriverSpecDie {
	return d.DieStamp(func(r *storagev1.CSIDriverSpec) {
		r.StorageCapacity = v
	})
}

// Defines if the underlying volume supports changing ownership and permission of the volume before being mounted. Refer to the specific FSGroupPolicy values for additional details.
//
// This field is immutable.
//
// Defaults to ReadWriteOnceWithFSType, which will examine each volume to determine if Kubernetes should modify ownership and permissions of the volume. With the default policy the defined fsGroup will only be applied if a fstype is defined and the volume's access mode contains ReadWriteOnce.
func (d *CSIDriverSpecDie) FSGroupPolicy(v *storagev1.FSGroupPolicy) *CSIDriverSpecDie {
	return d.DieStamp(func(r *storagev1.CSIDriverSpec) {
		r.FSGroupPolicy = v
	})
}

// TokenRequests indicates the CSI driver needs pods' service account tokens it is mounting volume for to do necessary authentication. Kubelet will pass the tokens in VolumeContext in the CSI NodePublishVolume calls. The CSI driver should parse and validate the following VolumeContext: "csi.storage.k8s.io/serviceAccount.tokens": {   "<audience>": {     "token": <token>,     "expirationTimestamp": <expiration timestamp in RFC3339>,   },   ... }
//
// Note: Audience in each TokenRequest should be different and at most one token is empty string. To receive a new token after expiry, RequiresRepublish can be used to trigger NodePublishVolume periodically.
func (d *CSIDriverSpecDie) TokenRequests(v ...storagev1.TokenRequest) *CSIDriverSpecDie {
	return d.DieStamp(func(r *storagev1.CSIDriverSpec) {
		r.TokenRequests = v
	})
}

// RequiresRepublish indicates the CSI driver wants `NodePublishVolume` being periodically called to reflect any possible change in the mounted volume. This field defaults to false.
//
// Note: After a successful initial NodePublishVolume call, subsequent calls to NodePublishVolume should only update the contents of the volume. New mount points will not be seen by a running container.
func (d *CSIDriverSpecDie) RequiresRepublish(v *bool) *CSIDriverSpecDie {
	return d.DieStamp(func(r *storagev1.CSIDriverSpec) {
		r.RequiresRepublish = v
	})
}

var TokenRequestBlank = (&TokenRequestDie{}).DieFeed(storagev1.TokenRequest{})

type TokenRequestDie struct {
	mutable bool
	r       storagev1.TokenRequest
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *TokenRequestDie) DieImmutable(immutable bool) *TokenRequestDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *TokenRequestDie) DieFeed(r storagev1.TokenRequest) *TokenRequestDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &TokenRequestDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *TokenRequestDie) DieFeedPtr(r *storagev1.TokenRequest) *TokenRequestDie {
	if r == nil {
		r = &storagev1.TokenRequest{}
	}
	return d.DieFeed(*r)
}

// DieRelease returns the resource managed by the die.
func (d *TokenRequestDie) DieRelease() storagev1.TokenRequest {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *TokenRequestDie) DieReleasePtr() *storagev1.TokenRequest {
	r := d.DieRelease()
	return &r
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *TokenRequestDie) DieStamp(fn func(r *storagev1.TokenRequest)) *TokenRequestDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *TokenRequestDie) DeepCopy() *TokenRequestDie {
	r := *d.r.DeepCopy()
	return &TokenRequestDie{
		mutable: d.mutable,
		r:       r,
	}
}

// Audience is the intended audience of the token in "TokenRequestSpec". It will default to the audiences of kube apiserver.
func (d *TokenRequestDie) Audience(v string) *TokenRequestDie {
	return d.DieStamp(func(r *storagev1.TokenRequest) {
		r.Audience = v
	})
}

// ExpirationSeconds is the duration of validity of the token in "TokenRequestSpec". It has the same default value of "ExpirationSeconds" in "TokenRequestSpec".
func (d *TokenRequestDie) ExpirationSeconds(v *int64) *TokenRequestDie {
	return d.DieStamp(func(r *storagev1.TokenRequest) {
		r.ExpirationSeconds = v
	})
}

var CSINodeBlank = (&CSINodeDie{}).DieFeed(storagev1.CSINode{})

type CSINodeDie struct {
	metav1.FrozenObjectMeta
	mutable bool
	r       storagev1.CSINode
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *CSINodeDie) DieImmutable(immutable bool) *CSINodeDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *CSINodeDie) DieFeed(r storagev1.CSINode) *CSINodeDie {
	if d.mutable {
		d.FrozenObjectMeta = metav1.FreezeObjectMeta(r.ObjectMeta)
		d.r = r
		return d
	}
	return &CSINodeDie{
		FrozenObjectMeta: metav1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *CSINodeDie) DieFeedPtr(r *storagev1.CSINode) *CSINodeDie {
	if r == nil {
		r = &storagev1.CSINode{}
	}
	return d.DieFeed(*r)
}

// DieRelease returns the resource managed by the die.
func (d *CSINodeDie) DieRelease() storagev1.CSINode {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *CSINodeDie) DieReleasePtr() *storagev1.CSINode {
	r := d.DieRelease()
	return &r
}

// DieReleaseUnstructured returns the resource managed by the die as an unstructured object.
func (d *CSINodeDie) DieReleaseUnstructured() runtime.Unstructured {
	r := d.DieReleasePtr()
	u, _ := runtime.DefaultUnstructuredConverter.ToUnstructured(r)
	return &unstructured.Unstructured{
		Object: u,
	}
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *CSINodeDie) DieStamp(fn func(r *storagev1.CSINode)) *CSINodeDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *CSINodeDie) DeepCopy() *CSINodeDie {
	r := *d.r.DeepCopy()
	return &CSINodeDie{
		FrozenObjectMeta: metav1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
	}
}

var _ runtime.Object = (*CSINodeDie)(nil)

func (d *CSINodeDie) DeepCopyObject() runtime.Object {
	return d.r.DeepCopy()
}

func (d *CSINodeDie) GetObjectKind() schema.ObjectKind {
	r := d.DieRelease()
	return r.GetObjectKind()
}

func (d *CSINodeDie) MarshalJSON() ([]byte, error) {
	return json.Marshal(d.r)
}

func (d *CSINodeDie) UnmarshalJSON(b []byte) error {
	if d == CSINodeBlank {
		return fmtx.Errorf("cannot unmarshal into the blank die, create a copy first")
	}
	if !d.mutable {
		return fmtx.Errorf("cannot unmarshal into immutable dies, create a mutable version first")
	}
	r := &storagev1.CSINode{}
	err := json.Unmarshal(b, r)
	*d = *d.DieFeed(*r)
	return err
}

// MetadataDie stamps the resource's ObjectMeta field with a mutable die.
func (d *CSINodeDie) MetadataDie(fn func(d *metav1.ObjectMetaDie)) *CSINodeDie {
	return d.DieStamp(func(r *storagev1.CSINode) {
		d := metav1.ObjectMetaBlank.DieImmutable(false).DieFeed(r.ObjectMeta)
		fn(d)
		r.ObjectMeta = d.DieRelease()
	})
}

// SpecDie stamps the resource's spec field with a mutable die.
func (d *CSINodeDie) SpecDie(fn func(d *CSINodeSpecDie)) *CSINodeDie {
	return d.DieStamp(func(r *storagev1.CSINode) {
		d := CSINodeSpecBlank.DieImmutable(false).DieFeed(r.Spec)
		fn(d)
		r.Spec = d.DieRelease()
	})
}

// spec is the specification of CSINode
func (d *CSINodeDie) Spec(v storagev1.CSINodeSpec) *CSINodeDie {
	return d.DieStamp(func(r *storagev1.CSINode) {
		r.Spec = v
	})
}

var CSINodeSpecBlank = (&CSINodeSpecDie{}).DieFeed(storagev1.CSINodeSpec{})

type CSINodeSpecDie struct {
	mutable bool
	r       storagev1.CSINodeSpec
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *CSINodeSpecDie) DieImmutable(immutable bool) *CSINodeSpecDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *CSINodeSpecDie) DieFeed(r storagev1.CSINodeSpec) *CSINodeSpecDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &CSINodeSpecDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *CSINodeSpecDie) DieFeedPtr(r *storagev1.CSINodeSpec) *CSINodeSpecDie {
	if r == nil {
		r = &storagev1.CSINodeSpec{}
	}
	return d.DieFeed(*r)
}

// DieRelease returns the resource managed by the die.
func (d *CSINodeSpecDie) DieRelease() storagev1.CSINodeSpec {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *CSINodeSpecDie) DieReleasePtr() *storagev1.CSINodeSpec {
	r := d.DieRelease()
	return &r
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *CSINodeSpecDie) DieStamp(fn func(r *storagev1.CSINodeSpec)) *CSINodeSpecDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *CSINodeSpecDie) DeepCopy() *CSINodeSpecDie {
	r := *d.r.DeepCopy()
	return &CSINodeSpecDie{
		mutable: d.mutable,
		r:       r,
	}
}

// drivers is a list of information of all CSI Drivers existing on a node. If all drivers in the list are uninstalled, this can become empty.
func (d *CSINodeSpecDie) Drivers(v ...storagev1.CSINodeDriver) *CSINodeSpecDie {
	return d.DieStamp(func(r *storagev1.CSINodeSpec) {
		r.Drivers = v
	})
}

var CSINodeDriverBlank = (&CSINodeDriverDie{}).DieFeed(storagev1.CSINodeDriver{})

type CSINodeDriverDie struct {
	mutable bool
	r       storagev1.CSINodeDriver
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *CSINodeDriverDie) DieImmutable(immutable bool) *CSINodeDriverDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *CSINodeDriverDie) DieFeed(r storagev1.CSINodeDriver) *CSINodeDriverDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &CSINodeDriverDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *CSINodeDriverDie) DieFeedPtr(r *storagev1.CSINodeDriver) *CSINodeDriverDie {
	if r == nil {
		r = &storagev1.CSINodeDriver{}
	}
	return d.DieFeed(*r)
}

// DieRelease returns the resource managed by the die.
func (d *CSINodeDriverDie) DieRelease() storagev1.CSINodeDriver {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *CSINodeDriverDie) DieReleasePtr() *storagev1.CSINodeDriver {
	r := d.DieRelease()
	return &r
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *CSINodeDriverDie) DieStamp(fn func(r *storagev1.CSINodeDriver)) *CSINodeDriverDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *CSINodeDriverDie) DeepCopy() *CSINodeDriverDie {
	r := *d.r.DeepCopy()
	return &CSINodeDriverDie{
		mutable: d.mutable,
		r:       r,
	}
}

// This is the name of the CSI driver that this object refers to. This MUST be the same name returned by the CSI GetPluginName() call for that driver.
func (d *CSINodeDriverDie) Name(v string) *CSINodeDriverDie {
	return d.DieStamp(func(r *storagev1.CSINodeDriver) {
		r.Name = v
	})
}

// nodeID of the node from the driver point of view. This field enables Kubernetes to communicate with storage systems that do not share the same nomenclature for nodes. For example, Kubernetes may refer to a given node as "node1", but the storage system may refer to the same node as "nodeA". When Kubernetes issues a command to the storage system to attach a volume to a specific node, it can use this field to refer to the node name using the ID that the storage system will understand, e.g. "nodeA" instead of "node1". This field is required.
func (d *CSINodeDriverDie) NodeID(v string) *CSINodeDriverDie {
	return d.DieStamp(func(r *storagev1.CSINodeDriver) {
		r.NodeID = v
	})
}

// topologyKeys is the list of keys supported by the driver. When a driver is initialized on a cluster, it provides a set of topology keys that it understands (e.g. "company.com/zone", "company.com/region"). When a driver is initialized on a node, it provides the same topology keys along with values. Kubelet will expose these topology keys as labels on its own node object. When Kubernetes does topology aware provisioning, it can use this list to determine which labels it should retrieve from the node object and pass back to the driver. It is possible for different nodes to use different topology keys. This can be empty if driver does not support topology.
func (d *CSINodeDriverDie) TopologyKeys(v ...string) *CSINodeDriverDie {
	return d.DieStamp(func(r *storagev1.CSINodeDriver) {
		r.TopologyKeys = v
	})
}

// allocatable represents the volume resources of a node that are available for scheduling. This field is beta.
func (d *CSINodeDriverDie) Allocatable(v *storagev1.VolumeNodeResources) *CSINodeDriverDie {
	return d.DieStamp(func(r *storagev1.CSINodeDriver) {
		r.Allocatable = v
	})
}

var VolumeNodeResourcesBlank = (&VolumeNodeResourcesDie{}).DieFeed(storagev1.VolumeNodeResources{})

type VolumeNodeResourcesDie struct {
	mutable bool
	r       storagev1.VolumeNodeResources
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *VolumeNodeResourcesDie) DieImmutable(immutable bool) *VolumeNodeResourcesDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *VolumeNodeResourcesDie) DieFeed(r storagev1.VolumeNodeResources) *VolumeNodeResourcesDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &VolumeNodeResourcesDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *VolumeNodeResourcesDie) DieFeedPtr(r *storagev1.VolumeNodeResources) *VolumeNodeResourcesDie {
	if r == nil {
		r = &storagev1.VolumeNodeResources{}
	}
	return d.DieFeed(*r)
}

// DieRelease returns the resource managed by the die.
func (d *VolumeNodeResourcesDie) DieRelease() storagev1.VolumeNodeResources {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *VolumeNodeResourcesDie) DieReleasePtr() *storagev1.VolumeNodeResources {
	r := d.DieRelease()
	return &r
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *VolumeNodeResourcesDie) DieStamp(fn func(r *storagev1.VolumeNodeResources)) *VolumeNodeResourcesDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *VolumeNodeResourcesDie) DeepCopy() *VolumeNodeResourcesDie {
	r := *d.r.DeepCopy()
	return &VolumeNodeResourcesDie{
		mutable: d.mutable,
		r:       r,
	}
}

// Maximum number of unique volumes managed by the CSI driver that can be used on a node. A volume that is both attached and mounted on a node is considered to be used once, not twice. The same rule applies for a unique volume that is shared among multiple pods on the same node. If this field is not specified, then the supported number of volumes on this node is unbounded.
func (d *VolumeNodeResourcesDie) Count(v *int32) *VolumeNodeResourcesDie {
	return d.DieStamp(func(r *storagev1.VolumeNodeResources) {
		r.Count = v
	})
}

var StorageClassBlank = (&StorageClassDie{}).DieFeed(storagev1.StorageClass{})

type StorageClassDie struct {
	metav1.FrozenObjectMeta
	mutable bool
	r       storagev1.StorageClass
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *StorageClassDie) DieImmutable(immutable bool) *StorageClassDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *StorageClassDie) DieFeed(r storagev1.StorageClass) *StorageClassDie {
	if d.mutable {
		d.FrozenObjectMeta = metav1.FreezeObjectMeta(r.ObjectMeta)
		d.r = r
		return d
	}
	return &StorageClassDie{
		FrozenObjectMeta: metav1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *StorageClassDie) DieFeedPtr(r *storagev1.StorageClass) *StorageClassDie {
	if r == nil {
		r = &storagev1.StorageClass{}
	}
	return d.DieFeed(*r)
}

// DieRelease returns the resource managed by the die.
func (d *StorageClassDie) DieRelease() storagev1.StorageClass {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *StorageClassDie) DieReleasePtr() *storagev1.StorageClass {
	r := d.DieRelease()
	return &r
}

// DieReleaseUnstructured returns the resource managed by the die as an unstructured object.
func (d *StorageClassDie) DieReleaseUnstructured() runtime.Unstructured {
	r := d.DieReleasePtr()
	u, _ := runtime.DefaultUnstructuredConverter.ToUnstructured(r)
	return &unstructured.Unstructured{
		Object: u,
	}
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *StorageClassDie) DieStamp(fn func(r *storagev1.StorageClass)) *StorageClassDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *StorageClassDie) DeepCopy() *StorageClassDie {
	r := *d.r.DeepCopy()
	return &StorageClassDie{
		FrozenObjectMeta: metav1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
	}
}

var _ runtime.Object = (*StorageClassDie)(nil)

func (d *StorageClassDie) DeepCopyObject() runtime.Object {
	return d.r.DeepCopy()
}

func (d *StorageClassDie) GetObjectKind() schema.ObjectKind {
	r := d.DieRelease()
	return r.GetObjectKind()
}

func (d *StorageClassDie) MarshalJSON() ([]byte, error) {
	return json.Marshal(d.r)
}

func (d *StorageClassDie) UnmarshalJSON(b []byte) error {
	if d == StorageClassBlank {
		return fmtx.Errorf("cannot unmarshal into the blank die, create a copy first")
	}
	if !d.mutable {
		return fmtx.Errorf("cannot unmarshal into immutable dies, create a mutable version first")
	}
	r := &storagev1.StorageClass{}
	err := json.Unmarshal(b, r)
	*d = *d.DieFeed(*r)
	return err
}

// MetadataDie stamps the resource's ObjectMeta field with a mutable die.
func (d *StorageClassDie) MetadataDie(fn func(d *metav1.ObjectMetaDie)) *StorageClassDie {
	return d.DieStamp(func(r *storagev1.StorageClass) {
		d := metav1.ObjectMetaBlank.DieImmutable(false).DieFeed(r.ObjectMeta)
		fn(d)
		r.ObjectMeta = d.DieRelease()
	})
}

// Provisioner indicates the type of the provisioner.
func (d *StorageClassDie) Provisioner(v string) *StorageClassDie {
	return d.DieStamp(func(r *storagev1.StorageClass) {
		r.Provisioner = v
	})
}

// Parameters holds the parameters for the provisioner that should create volumes of this storage class.
func (d *StorageClassDie) Parameters(v map[string]string) *StorageClassDie {
	return d.DieStamp(func(r *storagev1.StorageClass) {
		r.Parameters = v
	})
}

// Dynamically provisioned PersistentVolumes of this storage class are created with this reclaimPolicy. Defaults to Delete.
func (d *StorageClassDie) ReclaimPolicy(v *corev1.PersistentVolumeReclaimPolicy) *StorageClassDie {
	return d.DieStamp(func(r *storagev1.StorageClass) {
		r.ReclaimPolicy = v
	})
}

// Dynamically provisioned PersistentVolumes of this storage class are created with these mountOptions, e.g. ["ro", "soft"]. Not validated - mount of the PVs will simply fail if one is invalid.
func (d *StorageClassDie) MountOptions(v ...string) *StorageClassDie {
	return d.DieStamp(func(r *storagev1.StorageClass) {
		r.MountOptions = v
	})
}

// AllowVolumeExpansion shows whether the storage class allow volume expand
func (d *StorageClassDie) AllowVolumeExpansion(v *bool) *StorageClassDie {
	return d.DieStamp(func(r *storagev1.StorageClass) {
		r.AllowVolumeExpansion = v
	})
}

// VolumeBindingMode indicates how PersistentVolumeClaims should be provisioned and bound.  When unset, VolumeBindingImmediate is used. This field is only honored by servers that enable the VolumeScheduling feature.
func (d *StorageClassDie) VolumeBindingMode(v *storagev1.VolumeBindingMode) *StorageClassDie {
	return d.DieStamp(func(r *storagev1.StorageClass) {
		r.VolumeBindingMode = v
	})
}

// Restrict the node topologies where volumes can be dynamically provisioned. Each volume plugin defines its own supported topology specifications. An empty TopologySelectorTerm list means there is no topology restriction. This field is only honored by servers that enable the VolumeScheduling feature.
func (d *StorageClassDie) AllowedTopologies(v ...corev1.TopologySelectorTerm) *StorageClassDie {
	return d.DieStamp(func(r *storagev1.StorageClass) {
		r.AllowedTopologies = v
	})
}

var VolumeAttachmentBlank = (&VolumeAttachmentDie{}).DieFeed(storagev1.VolumeAttachment{})

type VolumeAttachmentDie struct {
	metav1.FrozenObjectMeta
	mutable bool
	r       storagev1.VolumeAttachment
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *VolumeAttachmentDie) DieImmutable(immutable bool) *VolumeAttachmentDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *VolumeAttachmentDie) DieFeed(r storagev1.VolumeAttachment) *VolumeAttachmentDie {
	if d.mutable {
		d.FrozenObjectMeta = metav1.FreezeObjectMeta(r.ObjectMeta)
		d.r = r
		return d
	}
	return &VolumeAttachmentDie{
		FrozenObjectMeta: metav1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *VolumeAttachmentDie) DieFeedPtr(r *storagev1.VolumeAttachment) *VolumeAttachmentDie {
	if r == nil {
		r = &storagev1.VolumeAttachment{}
	}
	return d.DieFeed(*r)
}

// DieRelease returns the resource managed by the die.
func (d *VolumeAttachmentDie) DieRelease() storagev1.VolumeAttachment {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *VolumeAttachmentDie) DieReleasePtr() *storagev1.VolumeAttachment {
	r := d.DieRelease()
	return &r
}

// DieReleaseUnstructured returns the resource managed by the die as an unstructured object.
func (d *VolumeAttachmentDie) DieReleaseUnstructured() runtime.Unstructured {
	r := d.DieReleasePtr()
	u, _ := runtime.DefaultUnstructuredConverter.ToUnstructured(r)
	return &unstructured.Unstructured{
		Object: u,
	}
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *VolumeAttachmentDie) DieStamp(fn func(r *storagev1.VolumeAttachment)) *VolumeAttachmentDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *VolumeAttachmentDie) DeepCopy() *VolumeAttachmentDie {
	r := *d.r.DeepCopy()
	return &VolumeAttachmentDie{
		FrozenObjectMeta: metav1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
	}
}

var _ runtime.Object = (*VolumeAttachmentDie)(nil)

func (d *VolumeAttachmentDie) DeepCopyObject() runtime.Object {
	return d.r.DeepCopy()
}

func (d *VolumeAttachmentDie) GetObjectKind() schema.ObjectKind {
	r := d.DieRelease()
	return r.GetObjectKind()
}

func (d *VolumeAttachmentDie) MarshalJSON() ([]byte, error) {
	return json.Marshal(d.r)
}

func (d *VolumeAttachmentDie) UnmarshalJSON(b []byte) error {
	if d == VolumeAttachmentBlank {
		return fmtx.Errorf("cannot unmarshal into the blank die, create a copy first")
	}
	if !d.mutable {
		return fmtx.Errorf("cannot unmarshal into immutable dies, create a mutable version first")
	}
	r := &storagev1.VolumeAttachment{}
	err := json.Unmarshal(b, r)
	*d = *d.DieFeed(*r)
	return err
}

// MetadataDie stamps the resource's ObjectMeta field with a mutable die.
func (d *VolumeAttachmentDie) MetadataDie(fn func(d *metav1.ObjectMetaDie)) *VolumeAttachmentDie {
	return d.DieStamp(func(r *storagev1.VolumeAttachment) {
		d := metav1.ObjectMetaBlank.DieImmutable(false).DieFeed(r.ObjectMeta)
		fn(d)
		r.ObjectMeta = d.DieRelease()
	})
}

// SpecDie stamps the resource's spec field with a mutable die.
func (d *VolumeAttachmentDie) SpecDie(fn func(d *VolumeAttachmentSpecDie)) *VolumeAttachmentDie {
	return d.DieStamp(func(r *storagev1.VolumeAttachment) {
		d := VolumeAttachmentSpecBlank.DieImmutable(false).DieFeed(r.Spec)
		fn(d)
		r.Spec = d.DieRelease()
	})
}

// StatusDie stamps the resource's status field with a mutable die.
func (d *VolumeAttachmentDie) StatusDie(fn func(d *VolumeAttachmentStatusDie)) *VolumeAttachmentDie {
	return d.DieStamp(func(r *storagev1.VolumeAttachment) {
		d := VolumeAttachmentStatusBlank.DieImmutable(false).DieFeed(r.Status)
		fn(d)
		r.Status = d.DieRelease()
	})
}

// Specification of the desired attach/detach volume behavior. Populated by the Kubernetes system.
func (d *VolumeAttachmentDie) Spec(v storagev1.VolumeAttachmentSpec) *VolumeAttachmentDie {
	return d.DieStamp(func(r *storagev1.VolumeAttachment) {
		r.Spec = v
	})
}

// Status of the VolumeAttachment request. Populated by the entity completing the attach or detach operation, i.e. the external-attacher.
func (d *VolumeAttachmentDie) Status(v storagev1.VolumeAttachmentStatus) *VolumeAttachmentDie {
	return d.DieStamp(func(r *storagev1.VolumeAttachment) {
		r.Status = v
	})
}

var VolumeAttachmentSpecBlank = (&VolumeAttachmentSpecDie{}).DieFeed(storagev1.VolumeAttachmentSpec{})

type VolumeAttachmentSpecDie struct {
	mutable bool
	r       storagev1.VolumeAttachmentSpec
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *VolumeAttachmentSpecDie) DieImmutable(immutable bool) *VolumeAttachmentSpecDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *VolumeAttachmentSpecDie) DieFeed(r storagev1.VolumeAttachmentSpec) *VolumeAttachmentSpecDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &VolumeAttachmentSpecDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *VolumeAttachmentSpecDie) DieFeedPtr(r *storagev1.VolumeAttachmentSpec) *VolumeAttachmentSpecDie {
	if r == nil {
		r = &storagev1.VolumeAttachmentSpec{}
	}
	return d.DieFeed(*r)
}

// DieRelease returns the resource managed by the die.
func (d *VolumeAttachmentSpecDie) DieRelease() storagev1.VolumeAttachmentSpec {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *VolumeAttachmentSpecDie) DieReleasePtr() *storagev1.VolumeAttachmentSpec {
	r := d.DieRelease()
	return &r
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *VolumeAttachmentSpecDie) DieStamp(fn func(r *storagev1.VolumeAttachmentSpec)) *VolumeAttachmentSpecDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *VolumeAttachmentSpecDie) DeepCopy() *VolumeAttachmentSpecDie {
	r := *d.r.DeepCopy()
	return &VolumeAttachmentSpecDie{
		mutable: d.mutable,
		r:       r,
	}
}

// Attacher indicates the name of the volume driver that MUST handle this request. This is the name returned by GetPluginName().
func (d *VolumeAttachmentSpecDie) Attacher(v string) *VolumeAttachmentSpecDie {
	return d.DieStamp(func(r *storagev1.VolumeAttachmentSpec) {
		r.Attacher = v
	})
}

// Source represents the volume that should be attached.
func (d *VolumeAttachmentSpecDie) Source(v storagev1.VolumeAttachmentSource) *VolumeAttachmentSpecDie {
	return d.DieStamp(func(r *storagev1.VolumeAttachmentSpec) {
		r.Source = v
	})
}

// The node that the volume should be attached to.
func (d *VolumeAttachmentSpecDie) NodeName(v string) *VolumeAttachmentSpecDie {
	return d.DieStamp(func(r *storagev1.VolumeAttachmentSpec) {
		r.NodeName = v
	})
}

var VolumeAttachmentSourceBlank = (&VolumeAttachmentSourceDie{}).DieFeed(storagev1.VolumeAttachmentSource{})

type VolumeAttachmentSourceDie struct {
	mutable bool
	r       storagev1.VolumeAttachmentSource
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *VolumeAttachmentSourceDie) DieImmutable(immutable bool) *VolumeAttachmentSourceDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *VolumeAttachmentSourceDie) DieFeed(r storagev1.VolumeAttachmentSource) *VolumeAttachmentSourceDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &VolumeAttachmentSourceDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *VolumeAttachmentSourceDie) DieFeedPtr(r *storagev1.VolumeAttachmentSource) *VolumeAttachmentSourceDie {
	if r == nil {
		r = &storagev1.VolumeAttachmentSource{}
	}
	return d.DieFeed(*r)
}

// DieRelease returns the resource managed by the die.
func (d *VolumeAttachmentSourceDie) DieRelease() storagev1.VolumeAttachmentSource {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *VolumeAttachmentSourceDie) DieReleasePtr() *storagev1.VolumeAttachmentSource {
	r := d.DieRelease()
	return &r
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *VolumeAttachmentSourceDie) DieStamp(fn func(r *storagev1.VolumeAttachmentSource)) *VolumeAttachmentSourceDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *VolumeAttachmentSourceDie) DeepCopy() *VolumeAttachmentSourceDie {
	r := *d.r.DeepCopy()
	return &VolumeAttachmentSourceDie{
		mutable: d.mutable,
		r:       r,
	}
}

// Name of the persistent volume to attach.
func (d *VolumeAttachmentSourceDie) PersistentVolumeName(v *string) *VolumeAttachmentSourceDie {
	return d.DieStamp(func(r *storagev1.VolumeAttachmentSource) {
		r.PersistentVolumeName = v
	})
}

// inlineVolumeSpec contains all the information necessary to attach a persistent volume defined by a pod's inline VolumeSource. This field is populated only for the CSIMigration feature. It contains translated fields from a pod's inline VolumeSource to a PersistentVolumeSpec. This field is beta-level and is only honored by servers that enabled the CSIMigration feature.
func (d *VolumeAttachmentSourceDie) InlineVolumeSpec(v *corev1.PersistentVolumeSpec) *VolumeAttachmentSourceDie {
	return d.DieStamp(func(r *storagev1.VolumeAttachmentSource) {
		r.InlineVolumeSpec = v
	})
}

var VolumeAttachmentStatusBlank = (&VolumeAttachmentStatusDie{}).DieFeed(storagev1.VolumeAttachmentStatus{})

type VolumeAttachmentStatusDie struct {
	mutable bool
	r       storagev1.VolumeAttachmentStatus
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *VolumeAttachmentStatusDie) DieImmutable(immutable bool) *VolumeAttachmentStatusDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *VolumeAttachmentStatusDie) DieFeed(r storagev1.VolumeAttachmentStatus) *VolumeAttachmentStatusDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &VolumeAttachmentStatusDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *VolumeAttachmentStatusDie) DieFeedPtr(r *storagev1.VolumeAttachmentStatus) *VolumeAttachmentStatusDie {
	if r == nil {
		r = &storagev1.VolumeAttachmentStatus{}
	}
	return d.DieFeed(*r)
}

// DieRelease returns the resource managed by the die.
func (d *VolumeAttachmentStatusDie) DieRelease() storagev1.VolumeAttachmentStatus {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *VolumeAttachmentStatusDie) DieReleasePtr() *storagev1.VolumeAttachmentStatus {
	r := d.DieRelease()
	return &r
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *VolumeAttachmentStatusDie) DieStamp(fn func(r *storagev1.VolumeAttachmentStatus)) *VolumeAttachmentStatusDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *VolumeAttachmentStatusDie) DeepCopy() *VolumeAttachmentStatusDie {
	r := *d.r.DeepCopy()
	return &VolumeAttachmentStatusDie{
		mutable: d.mutable,
		r:       r,
	}
}

// Indicates the volume is successfully attached. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.
func (d *VolumeAttachmentStatusDie) Attached(v bool) *VolumeAttachmentStatusDie {
	return d.DieStamp(func(r *storagev1.VolumeAttachmentStatus) {
		r.Attached = v
	})
}

// Upon successful attach, this field is populated with any information returned by the attach operation that must be passed into subsequent WaitForAttach or Mount calls. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.
func (d *VolumeAttachmentStatusDie) AttachmentMetadata(v map[string]string) *VolumeAttachmentStatusDie {
	return d.DieStamp(func(r *storagev1.VolumeAttachmentStatus) {
		r.AttachmentMetadata = v
	})
}

// The last error encountered during attach operation, if any. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.
func (d *VolumeAttachmentStatusDie) AttachError(v *storagev1.VolumeError) *VolumeAttachmentStatusDie {
	return d.DieStamp(func(r *storagev1.VolumeAttachmentStatus) {
		r.AttachError = v
	})
}

// The last error encountered during detach operation, if any. This field must only be set by the entity completing the detach operation, i.e. the external-attacher.
func (d *VolumeAttachmentStatusDie) DetachError(v *storagev1.VolumeError) *VolumeAttachmentStatusDie {
	return d.DieStamp(func(r *storagev1.VolumeAttachmentStatus) {
		r.DetachError = v
	})
}

var VolumeErrorBlank = (&VolumeErrorDie{}).DieFeed(storagev1.VolumeError{})

type VolumeErrorDie struct {
	mutable bool
	r       storagev1.VolumeError
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *VolumeErrorDie) DieImmutable(immutable bool) *VolumeErrorDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *VolumeErrorDie) DieFeed(r storagev1.VolumeError) *VolumeErrorDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &VolumeErrorDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *VolumeErrorDie) DieFeedPtr(r *storagev1.VolumeError) *VolumeErrorDie {
	if r == nil {
		r = &storagev1.VolumeError{}
	}
	return d.DieFeed(*r)
}

// DieRelease returns the resource managed by the die.
func (d *VolumeErrorDie) DieRelease() storagev1.VolumeError {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *VolumeErrorDie) DieReleasePtr() *storagev1.VolumeError {
	r := d.DieRelease()
	return &r
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *VolumeErrorDie) DieStamp(fn func(r *storagev1.VolumeError)) *VolumeErrorDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *VolumeErrorDie) DeepCopy() *VolumeErrorDie {
	r := *d.r.DeepCopy()
	return &VolumeErrorDie{
		mutable: d.mutable,
		r:       r,
	}
}

// Time the error was encountered.
func (d *VolumeErrorDie) Time(v apismetav1.Time) *VolumeErrorDie {
	return d.DieStamp(func(r *storagev1.VolumeError) {
		r.Time = v
	})
}

// String detailing the error encountered during Attach or Detach operation. This string may be logged, so it should not contain sensitive information.
func (d *VolumeErrorDie) Message(v string) *VolumeErrorDie {
	return d.DieStamp(func(r *storagev1.VolumeError) {
		r.Message = v
	})
}
