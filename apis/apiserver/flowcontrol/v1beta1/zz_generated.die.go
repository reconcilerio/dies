//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright 2021-2022 the original author or authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by diegen. DO NOT EDIT.

package v1beta1

import (
	"dies.dev/apis/meta/v1"
	json "encoding/json"
	fmtx "fmt"
	flowcontrolv1beta1 "k8s.io/api/flowcontrol/v1beta1"
	unstructured "k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
	runtime "k8s.io/apimachinery/pkg/runtime"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
)

var FlowSchemaBlank = (&FlowSchemaDie{}).DieFeed(flowcontrolv1beta1.FlowSchema{})

type FlowSchemaDie struct {
	v1.FrozenObjectMeta
	mutable bool
	r       flowcontrolv1beta1.FlowSchema
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *FlowSchemaDie) DieImmutable(immutable bool) *FlowSchemaDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *FlowSchemaDie) DieFeed(r flowcontrolv1beta1.FlowSchema) *FlowSchemaDie {
	if d.mutable {
		d.FrozenObjectMeta = v1.FreezeObjectMeta(r.ObjectMeta)
		d.r = r
		return d
	}
	return &FlowSchemaDie{
		FrozenObjectMeta: v1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *FlowSchemaDie) DieFeedPtr(r *flowcontrolv1beta1.FlowSchema) *FlowSchemaDie {
	if r == nil {
		r = &flowcontrolv1beta1.FlowSchema{}
	}
	return d.DieFeed(*r)
}

// DieRelease returns the resource managed by the die.
func (d *FlowSchemaDie) DieRelease() flowcontrolv1beta1.FlowSchema {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *FlowSchemaDie) DieReleasePtr() *flowcontrolv1beta1.FlowSchema {
	r := d.DieRelease()
	return &r
}

// DieReleaseUnstructured returns the resource managed by the die as an unstructured object.
func (d *FlowSchemaDie) DieReleaseUnstructured() runtime.Unstructured {
	r := d.DieReleasePtr()
	u, _ := runtime.DefaultUnstructuredConverter.ToUnstructured(r)
	return &unstructured.Unstructured{
		Object: u,
	}
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *FlowSchemaDie) DieStamp(fn func(r *flowcontrolv1beta1.FlowSchema)) *FlowSchemaDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *FlowSchemaDie) DeepCopy() *FlowSchemaDie {
	r := *d.r.DeepCopy()
	return &FlowSchemaDie{
		FrozenObjectMeta: v1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
	}
}

var _ runtime.Object = (*FlowSchemaDie)(nil)

func (d *FlowSchemaDie) DeepCopyObject() runtime.Object {
	return d.r.DeepCopy()
}

func (d *FlowSchemaDie) GetObjectKind() schema.ObjectKind {
	r := d.DieRelease()
	return r.GetObjectKind()
}

func (d *FlowSchemaDie) MarshalJSON() ([]byte, error) {
	return json.Marshal(d.r)
}

func (d *FlowSchemaDie) UnmarshalJSON(b []byte) error {
	if d == FlowSchemaBlank {
		return fmtx.Errorf("cannot unmarshal into the blank die, create a copy first")
	}
	if !d.mutable {
		return fmtx.Errorf("cannot unmarshal into immutable dies, create a mutable version first")
	}
	r := &flowcontrolv1beta1.FlowSchema{}
	err := json.Unmarshal(b, r)
	*d = *d.DieFeed(*r)
	return err
}

// MetadataDie stamps the resource's ObjectMeta field with a mutable die.
func (d *FlowSchemaDie) MetadataDie(fn func(d *v1.ObjectMetaDie)) *FlowSchemaDie {
	return d.DieStamp(func(r *flowcontrolv1beta1.FlowSchema) {
		d := v1.ObjectMetaBlank.DieImmutable(false).DieFeed(r.ObjectMeta)
		fn(d)
		r.ObjectMeta = d.DieRelease()
	})
}

// SpecDie stamps the resource's spec field with a mutable die.
func (d *FlowSchemaDie) SpecDie(fn func(d *FlowSchemaSpecDie)) *FlowSchemaDie {
	return d.DieStamp(func(r *flowcontrolv1beta1.FlowSchema) {
		d := FlowSchemaSpecBlank.DieImmutable(false).DieFeed(r.Spec)
		fn(d)
		r.Spec = d.DieRelease()
	})
}

// StatusDie stamps the resource's status field with a mutable die.
func (d *FlowSchemaDie) StatusDie(fn func(d *FlowSchemaStatusDie)) *FlowSchemaDie {
	return d.DieStamp(func(r *flowcontrolv1beta1.FlowSchema) {
		d := FlowSchemaStatusBlank.DieImmutable(false).DieFeed(r.Status)
		fn(d)
		r.Status = d.DieRelease()
	})
}

// `spec` is the specification of the desired behavior of a FlowSchema. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
func (d *FlowSchemaDie) Spec(v flowcontrolv1beta1.FlowSchemaSpec) *FlowSchemaDie {
	return d.DieStamp(func(r *flowcontrolv1beta1.FlowSchema) {
		r.Spec = v
	})
}

// `status` is the current status of a FlowSchema. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
func (d *FlowSchemaDie) Status(v flowcontrolv1beta1.FlowSchemaStatus) *FlowSchemaDie {
	return d.DieStamp(func(r *flowcontrolv1beta1.FlowSchema) {
		r.Status = v
	})
}

var FlowSchemaSpecBlank = (&FlowSchemaSpecDie{}).DieFeed(flowcontrolv1beta1.FlowSchemaSpec{})

type FlowSchemaSpecDie struct {
	mutable bool
	r       flowcontrolv1beta1.FlowSchemaSpec
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *FlowSchemaSpecDie) DieImmutable(immutable bool) *FlowSchemaSpecDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *FlowSchemaSpecDie) DieFeed(r flowcontrolv1beta1.FlowSchemaSpec) *FlowSchemaSpecDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &FlowSchemaSpecDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *FlowSchemaSpecDie) DieFeedPtr(r *flowcontrolv1beta1.FlowSchemaSpec) *FlowSchemaSpecDie {
	if r == nil {
		r = &flowcontrolv1beta1.FlowSchemaSpec{}
	}
	return d.DieFeed(*r)
}

// DieRelease returns the resource managed by the die.
func (d *FlowSchemaSpecDie) DieRelease() flowcontrolv1beta1.FlowSchemaSpec {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *FlowSchemaSpecDie) DieReleasePtr() *flowcontrolv1beta1.FlowSchemaSpec {
	r := d.DieRelease()
	return &r
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *FlowSchemaSpecDie) DieStamp(fn func(r *flowcontrolv1beta1.FlowSchemaSpec)) *FlowSchemaSpecDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *FlowSchemaSpecDie) DeepCopy() *FlowSchemaSpecDie {
	r := *d.r.DeepCopy()
	return &FlowSchemaSpecDie{
		mutable: d.mutable,
		r:       r,
	}
}

// `priorityLevelConfiguration` should reference a PriorityLevelConfiguration in the cluster. If the reference cannot be resolved, the FlowSchema will be ignored and marked as invalid in its status. Required.
func (d *FlowSchemaSpecDie) PriorityLevelConfiguration(v flowcontrolv1beta1.PriorityLevelConfigurationReference) *FlowSchemaSpecDie {
	return d.DieStamp(func(r *flowcontrolv1beta1.FlowSchemaSpec) {
		r.PriorityLevelConfiguration = v
	})
}

// `matchingPrecedence` is used to choose among the FlowSchemas that match a given request. The chosen FlowSchema is among those with the numerically lowest (which we take to be logically highest) MatchingPrecedence.  Each MatchingPrecedence value must be ranged in [1,10000]. Note that if the precedence is not specified, it will be set to 1000 as default.
func (d *FlowSchemaSpecDie) MatchingPrecedence(v int32) *FlowSchemaSpecDie {
	return d.DieStamp(func(r *flowcontrolv1beta1.FlowSchemaSpec) {
		r.MatchingPrecedence = v
	})
}

// `distinguisherMethod` defines how to compute the flow distinguisher for requests that match this schema. `nil` specifies that the distinguisher is disabled and thus will always be the empty string.
func (d *FlowSchemaSpecDie) DistinguisherMethod(v *flowcontrolv1beta1.FlowDistinguisherMethod) *FlowSchemaSpecDie {
	return d.DieStamp(func(r *flowcontrolv1beta1.FlowSchemaSpec) {
		r.DistinguisherMethod = v
	})
}

// `rules` describes which requests will match this flow schema. This FlowSchema matches a request if and only if at least one member of rules matches the request. if it is an empty slice, there will be no requests matching the FlowSchema.
func (d *FlowSchemaSpecDie) Rules(v ...flowcontrolv1beta1.PolicyRulesWithSubjects) *FlowSchemaSpecDie {
	return d.DieStamp(func(r *flowcontrolv1beta1.FlowSchemaSpec) {
		r.Rules = v
	})
}

var FlowSchemaStatusBlank = (&FlowSchemaStatusDie{}).DieFeed(flowcontrolv1beta1.FlowSchemaStatus{})

type FlowSchemaStatusDie struct {
	mutable bool
	r       flowcontrolv1beta1.FlowSchemaStatus
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *FlowSchemaStatusDie) DieImmutable(immutable bool) *FlowSchemaStatusDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *FlowSchemaStatusDie) DieFeed(r flowcontrolv1beta1.FlowSchemaStatus) *FlowSchemaStatusDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &FlowSchemaStatusDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *FlowSchemaStatusDie) DieFeedPtr(r *flowcontrolv1beta1.FlowSchemaStatus) *FlowSchemaStatusDie {
	if r == nil {
		r = &flowcontrolv1beta1.FlowSchemaStatus{}
	}
	return d.DieFeed(*r)
}

// DieRelease returns the resource managed by the die.
func (d *FlowSchemaStatusDie) DieRelease() flowcontrolv1beta1.FlowSchemaStatus {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *FlowSchemaStatusDie) DieReleasePtr() *flowcontrolv1beta1.FlowSchemaStatus {
	r := d.DieRelease()
	return &r
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *FlowSchemaStatusDie) DieStamp(fn func(r *flowcontrolv1beta1.FlowSchemaStatus)) *FlowSchemaStatusDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *FlowSchemaStatusDie) DeepCopy() *FlowSchemaStatusDie {
	r := *d.r.DeepCopy()
	return &FlowSchemaStatusDie{
		mutable: d.mutable,
		r:       r,
	}
}

// `conditions` is a list of the current states of FlowSchema.
func (d *FlowSchemaStatusDie) Conditions(v ...flowcontrolv1beta1.FlowSchemaCondition) *FlowSchemaStatusDie {
	return d.DieStamp(func(r *flowcontrolv1beta1.FlowSchemaStatus) {
		r.Conditions = v
	})
}

var PriorityLevelConfigurationReferenceBlank = (&PriorityLevelConfigurationReferenceDie{}).DieFeed(flowcontrolv1beta1.PriorityLevelConfigurationReference{})

type PriorityLevelConfigurationReferenceDie struct {
	mutable bool
	r       flowcontrolv1beta1.PriorityLevelConfigurationReference
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *PriorityLevelConfigurationReferenceDie) DieImmutable(immutable bool) *PriorityLevelConfigurationReferenceDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *PriorityLevelConfigurationReferenceDie) DieFeed(r flowcontrolv1beta1.PriorityLevelConfigurationReference) *PriorityLevelConfigurationReferenceDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &PriorityLevelConfigurationReferenceDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *PriorityLevelConfigurationReferenceDie) DieFeedPtr(r *flowcontrolv1beta1.PriorityLevelConfigurationReference) *PriorityLevelConfigurationReferenceDie {
	if r == nil {
		r = &flowcontrolv1beta1.PriorityLevelConfigurationReference{}
	}
	return d.DieFeed(*r)
}

// DieRelease returns the resource managed by the die.
func (d *PriorityLevelConfigurationReferenceDie) DieRelease() flowcontrolv1beta1.PriorityLevelConfigurationReference {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *PriorityLevelConfigurationReferenceDie) DieReleasePtr() *flowcontrolv1beta1.PriorityLevelConfigurationReference {
	r := d.DieRelease()
	return &r
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *PriorityLevelConfigurationReferenceDie) DieStamp(fn func(r *flowcontrolv1beta1.PriorityLevelConfigurationReference)) *PriorityLevelConfigurationReferenceDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *PriorityLevelConfigurationReferenceDie) DeepCopy() *PriorityLevelConfigurationReferenceDie {
	r := *d.r.DeepCopy()
	return &PriorityLevelConfigurationReferenceDie{
		mutable: d.mutable,
		r:       r,
	}
}

// `name` is the name of the priority level configuration being referenced Required.
func (d *PriorityLevelConfigurationReferenceDie) Name(v string) *PriorityLevelConfigurationReferenceDie {
	return d.DieStamp(func(r *flowcontrolv1beta1.PriorityLevelConfigurationReference) {
		r.Name = v
	})
}

var FlowDistinguisherMethodBlank = (&FlowDistinguisherMethodDie{}).DieFeed(flowcontrolv1beta1.FlowDistinguisherMethod{})

type FlowDistinguisherMethodDie struct {
	mutable bool
	r       flowcontrolv1beta1.FlowDistinguisherMethod
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *FlowDistinguisherMethodDie) DieImmutable(immutable bool) *FlowDistinguisherMethodDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *FlowDistinguisherMethodDie) DieFeed(r flowcontrolv1beta1.FlowDistinguisherMethod) *FlowDistinguisherMethodDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &FlowDistinguisherMethodDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *FlowDistinguisherMethodDie) DieFeedPtr(r *flowcontrolv1beta1.FlowDistinguisherMethod) *FlowDistinguisherMethodDie {
	if r == nil {
		r = &flowcontrolv1beta1.FlowDistinguisherMethod{}
	}
	return d.DieFeed(*r)
}

// DieRelease returns the resource managed by the die.
func (d *FlowDistinguisherMethodDie) DieRelease() flowcontrolv1beta1.FlowDistinguisherMethod {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *FlowDistinguisherMethodDie) DieReleasePtr() *flowcontrolv1beta1.FlowDistinguisherMethod {
	r := d.DieRelease()
	return &r
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *FlowDistinguisherMethodDie) DieStamp(fn func(r *flowcontrolv1beta1.FlowDistinguisherMethod)) *FlowDistinguisherMethodDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *FlowDistinguisherMethodDie) DeepCopy() *FlowDistinguisherMethodDie {
	r := *d.r.DeepCopy()
	return &FlowDistinguisherMethodDie{
		mutable: d.mutable,
		r:       r,
	}
}

// `type` is the type of flow distinguisher method The supported types are "ByUser" and "ByNamespace". Required.
func (d *FlowDistinguisherMethodDie) Type(v flowcontrolv1beta1.FlowDistinguisherMethodType) *FlowDistinguisherMethodDie {
	return d.DieStamp(func(r *flowcontrolv1beta1.FlowDistinguisherMethod) {
		r.Type = v
	})
}

var PolicyRulesWithSubjectsBlank = (&PolicyRulesWithSubjectsDie{}).DieFeed(flowcontrolv1beta1.PolicyRulesWithSubjects{})

type PolicyRulesWithSubjectsDie struct {
	mutable bool
	r       flowcontrolv1beta1.PolicyRulesWithSubjects
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *PolicyRulesWithSubjectsDie) DieImmutable(immutable bool) *PolicyRulesWithSubjectsDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *PolicyRulesWithSubjectsDie) DieFeed(r flowcontrolv1beta1.PolicyRulesWithSubjects) *PolicyRulesWithSubjectsDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &PolicyRulesWithSubjectsDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *PolicyRulesWithSubjectsDie) DieFeedPtr(r *flowcontrolv1beta1.PolicyRulesWithSubjects) *PolicyRulesWithSubjectsDie {
	if r == nil {
		r = &flowcontrolv1beta1.PolicyRulesWithSubjects{}
	}
	return d.DieFeed(*r)
}

// DieRelease returns the resource managed by the die.
func (d *PolicyRulesWithSubjectsDie) DieRelease() flowcontrolv1beta1.PolicyRulesWithSubjects {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *PolicyRulesWithSubjectsDie) DieReleasePtr() *flowcontrolv1beta1.PolicyRulesWithSubjects {
	r := d.DieRelease()
	return &r
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *PolicyRulesWithSubjectsDie) DieStamp(fn func(r *flowcontrolv1beta1.PolicyRulesWithSubjects)) *PolicyRulesWithSubjectsDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *PolicyRulesWithSubjectsDie) DeepCopy() *PolicyRulesWithSubjectsDie {
	r := *d.r.DeepCopy()
	return &PolicyRulesWithSubjectsDie{
		mutable: d.mutable,
		r:       r,
	}
}

// subjects is the list of normal user, serviceaccount, or group that this rule cares about. There must be at least one member in this slice. A slice that includes both the system:authenticated and system:unauthenticated user groups matches every request. Required.
func (d *PolicyRulesWithSubjectsDie) Subjects(v ...flowcontrolv1beta1.Subject) *PolicyRulesWithSubjectsDie {
	return d.DieStamp(func(r *flowcontrolv1beta1.PolicyRulesWithSubjects) {
		r.Subjects = v
	})
}

// `resourceRules` is a slice of ResourcePolicyRules that identify matching requests according to their verb and the target resource. At least one of `resourceRules` and `nonResourceRules` has to be non-empty.
func (d *PolicyRulesWithSubjectsDie) ResourceRules(v ...flowcontrolv1beta1.ResourcePolicyRule) *PolicyRulesWithSubjectsDie {
	return d.DieStamp(func(r *flowcontrolv1beta1.PolicyRulesWithSubjects) {
		r.ResourceRules = v
	})
}

// `nonResourceRules` is a list of NonResourcePolicyRules that identify matching requests according to their verb and the target non-resource URL.
func (d *PolicyRulesWithSubjectsDie) NonResourceRules(v ...flowcontrolv1beta1.NonResourcePolicyRule) *PolicyRulesWithSubjectsDie {
	return d.DieStamp(func(r *flowcontrolv1beta1.PolicyRulesWithSubjects) {
		r.NonResourceRules = v
	})
}

var SubjectBlank = (&SubjectDie{}).DieFeed(flowcontrolv1beta1.Subject{})

type SubjectDie struct {
	mutable bool
	r       flowcontrolv1beta1.Subject
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *SubjectDie) DieImmutable(immutable bool) *SubjectDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *SubjectDie) DieFeed(r flowcontrolv1beta1.Subject) *SubjectDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &SubjectDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *SubjectDie) DieFeedPtr(r *flowcontrolv1beta1.Subject) *SubjectDie {
	if r == nil {
		r = &flowcontrolv1beta1.Subject{}
	}
	return d.DieFeed(*r)
}

// DieRelease returns the resource managed by the die.
func (d *SubjectDie) DieRelease() flowcontrolv1beta1.Subject {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *SubjectDie) DieReleasePtr() *flowcontrolv1beta1.Subject {
	r := d.DieRelease()
	return &r
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *SubjectDie) DieStamp(fn func(r *flowcontrolv1beta1.Subject)) *SubjectDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *SubjectDie) DeepCopy() *SubjectDie {
	r := *d.r.DeepCopy()
	return &SubjectDie{
		mutable: d.mutable,
		r:       r,
	}
}

// `kind` indicates which one of the other fields is non-empty. Required
func (d *SubjectDie) Kind(v flowcontrolv1beta1.SubjectKind) *SubjectDie {
	return d.DieStamp(func(r *flowcontrolv1beta1.Subject) {
		r.Kind = v
	})
}

// `user` matches based on username.
func (d *SubjectDie) User(v *flowcontrolv1beta1.UserSubject) *SubjectDie {
	return d.DieStamp(func(r *flowcontrolv1beta1.Subject) {
		r.User = v
	})
}

// `group` matches based on user group name.
func (d *SubjectDie) Group(v *flowcontrolv1beta1.GroupSubject) *SubjectDie {
	return d.DieStamp(func(r *flowcontrolv1beta1.Subject) {
		r.Group = v
	})
}

// `serviceAccount` matches ServiceAccounts.
func (d *SubjectDie) ServiceAccount(v *flowcontrolv1beta1.ServiceAccountSubject) *SubjectDie {
	return d.DieStamp(func(r *flowcontrolv1beta1.Subject) {
		r.ServiceAccount = v
	})
}

var UserSubjectBlank = (&UserSubjectDie{}).DieFeed(flowcontrolv1beta1.UserSubject{})

type UserSubjectDie struct {
	mutable bool
	r       flowcontrolv1beta1.UserSubject
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *UserSubjectDie) DieImmutable(immutable bool) *UserSubjectDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *UserSubjectDie) DieFeed(r flowcontrolv1beta1.UserSubject) *UserSubjectDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &UserSubjectDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *UserSubjectDie) DieFeedPtr(r *flowcontrolv1beta1.UserSubject) *UserSubjectDie {
	if r == nil {
		r = &flowcontrolv1beta1.UserSubject{}
	}
	return d.DieFeed(*r)
}

// DieRelease returns the resource managed by the die.
func (d *UserSubjectDie) DieRelease() flowcontrolv1beta1.UserSubject {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *UserSubjectDie) DieReleasePtr() *flowcontrolv1beta1.UserSubject {
	r := d.DieRelease()
	return &r
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *UserSubjectDie) DieStamp(fn func(r *flowcontrolv1beta1.UserSubject)) *UserSubjectDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *UserSubjectDie) DeepCopy() *UserSubjectDie {
	r := *d.r.DeepCopy()
	return &UserSubjectDie{
		mutable: d.mutable,
		r:       r,
	}
}

// `name` is the username that matches, or "*" to match all usernames. Required.
func (d *UserSubjectDie) Name(v string) *UserSubjectDie {
	return d.DieStamp(func(r *flowcontrolv1beta1.UserSubject) {
		r.Name = v
	})
}

var GroupSubjectBlank = (&GroupSubjectDie{}).DieFeed(flowcontrolv1beta1.GroupSubject{})

type GroupSubjectDie struct {
	mutable bool
	r       flowcontrolv1beta1.GroupSubject
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *GroupSubjectDie) DieImmutable(immutable bool) *GroupSubjectDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *GroupSubjectDie) DieFeed(r flowcontrolv1beta1.GroupSubject) *GroupSubjectDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &GroupSubjectDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *GroupSubjectDie) DieFeedPtr(r *flowcontrolv1beta1.GroupSubject) *GroupSubjectDie {
	if r == nil {
		r = &flowcontrolv1beta1.GroupSubject{}
	}
	return d.DieFeed(*r)
}

// DieRelease returns the resource managed by the die.
func (d *GroupSubjectDie) DieRelease() flowcontrolv1beta1.GroupSubject {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *GroupSubjectDie) DieReleasePtr() *flowcontrolv1beta1.GroupSubject {
	r := d.DieRelease()
	return &r
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *GroupSubjectDie) DieStamp(fn func(r *flowcontrolv1beta1.GroupSubject)) *GroupSubjectDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *GroupSubjectDie) DeepCopy() *GroupSubjectDie {
	r := *d.r.DeepCopy()
	return &GroupSubjectDie{
		mutable: d.mutable,
		r:       r,
	}
}

// name is the user group that matches, or "*" to match all user groups. See https://github.com/kubernetes/apiserver/blob/master/pkg/authentication/user/user.go for some well-known group names. Required.
func (d *GroupSubjectDie) Name(v string) *GroupSubjectDie {
	return d.DieStamp(func(r *flowcontrolv1beta1.GroupSubject) {
		r.Name = v
	})
}

var ServiceAccountSubjectBlank = (&ServiceAccountSubjectDie{}).DieFeed(flowcontrolv1beta1.ServiceAccountSubject{})

type ServiceAccountSubjectDie struct {
	mutable bool
	r       flowcontrolv1beta1.ServiceAccountSubject
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *ServiceAccountSubjectDie) DieImmutable(immutable bool) *ServiceAccountSubjectDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *ServiceAccountSubjectDie) DieFeed(r flowcontrolv1beta1.ServiceAccountSubject) *ServiceAccountSubjectDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &ServiceAccountSubjectDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *ServiceAccountSubjectDie) DieFeedPtr(r *flowcontrolv1beta1.ServiceAccountSubject) *ServiceAccountSubjectDie {
	if r == nil {
		r = &flowcontrolv1beta1.ServiceAccountSubject{}
	}
	return d.DieFeed(*r)
}

// DieRelease returns the resource managed by the die.
func (d *ServiceAccountSubjectDie) DieRelease() flowcontrolv1beta1.ServiceAccountSubject {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *ServiceAccountSubjectDie) DieReleasePtr() *flowcontrolv1beta1.ServiceAccountSubject {
	r := d.DieRelease()
	return &r
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *ServiceAccountSubjectDie) DieStamp(fn func(r *flowcontrolv1beta1.ServiceAccountSubject)) *ServiceAccountSubjectDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *ServiceAccountSubjectDie) DeepCopy() *ServiceAccountSubjectDie {
	r := *d.r.DeepCopy()
	return &ServiceAccountSubjectDie{
		mutable: d.mutable,
		r:       r,
	}
}

// `namespace` is the namespace of matching ServiceAccount objects. Required.
func (d *ServiceAccountSubjectDie) Namespace(v string) *ServiceAccountSubjectDie {
	return d.DieStamp(func(r *flowcontrolv1beta1.ServiceAccountSubject) {
		r.Namespace = v
	})
}

// `name` is the name of matching ServiceAccount objects, or "*" to match regardless of name. Required.
func (d *ServiceAccountSubjectDie) Name(v string) *ServiceAccountSubjectDie {
	return d.DieStamp(func(r *flowcontrolv1beta1.ServiceAccountSubject) {
		r.Name = v
	})
}

var ResourcePolicyRuleBlank = (&ResourcePolicyRuleDie{}).DieFeed(flowcontrolv1beta1.ResourcePolicyRule{})

type ResourcePolicyRuleDie struct {
	mutable bool
	r       flowcontrolv1beta1.ResourcePolicyRule
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *ResourcePolicyRuleDie) DieImmutable(immutable bool) *ResourcePolicyRuleDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *ResourcePolicyRuleDie) DieFeed(r flowcontrolv1beta1.ResourcePolicyRule) *ResourcePolicyRuleDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &ResourcePolicyRuleDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *ResourcePolicyRuleDie) DieFeedPtr(r *flowcontrolv1beta1.ResourcePolicyRule) *ResourcePolicyRuleDie {
	if r == nil {
		r = &flowcontrolv1beta1.ResourcePolicyRule{}
	}
	return d.DieFeed(*r)
}

// DieRelease returns the resource managed by the die.
func (d *ResourcePolicyRuleDie) DieRelease() flowcontrolv1beta1.ResourcePolicyRule {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *ResourcePolicyRuleDie) DieReleasePtr() *flowcontrolv1beta1.ResourcePolicyRule {
	r := d.DieRelease()
	return &r
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *ResourcePolicyRuleDie) DieStamp(fn func(r *flowcontrolv1beta1.ResourcePolicyRule)) *ResourcePolicyRuleDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *ResourcePolicyRuleDie) DeepCopy() *ResourcePolicyRuleDie {
	r := *d.r.DeepCopy()
	return &ResourcePolicyRuleDie{
		mutable: d.mutable,
		r:       r,
	}
}

// `verbs` is a list of matching verbs and may not be empty. "*" matches all verbs and, if present, must be the only entry. Required.
func (d *ResourcePolicyRuleDie) Verbs(v ...string) *ResourcePolicyRuleDie {
	return d.DieStamp(func(r *flowcontrolv1beta1.ResourcePolicyRule) {
		r.Verbs = v
	})
}

// `apiGroups` is a list of matching API groups and may not be empty. "*" matches all API groups and, if present, must be the only entry. Required.
func (d *ResourcePolicyRuleDie) APIGroups(v ...string) *ResourcePolicyRuleDie {
	return d.DieStamp(func(r *flowcontrolv1beta1.ResourcePolicyRule) {
		r.APIGroups = v
	})
}

// `resources` is a list of matching resources (i.e., lowercase and plural) with, if desired, subresource.  For example, [ "services", "nodes/status" ].  This list may not be empty. "*" matches all resources and, if present, must be the only entry. Required.
func (d *ResourcePolicyRuleDie) Resources(v ...string) *ResourcePolicyRuleDie {
	return d.DieStamp(func(r *flowcontrolv1beta1.ResourcePolicyRule) {
		r.Resources = v
	})
}

// `clusterScope` indicates whether to match requests that do not specify a namespace (which happens either because the resource is not namespaced or the request targets all namespaces). If this field is omitted or false then the `namespaces` field must contain a non-empty list.
func (d *ResourcePolicyRuleDie) ClusterScope(v bool) *ResourcePolicyRuleDie {
	return d.DieStamp(func(r *flowcontrolv1beta1.ResourcePolicyRule) {
		r.ClusterScope = v
	})
}

// `namespaces` is a list of target namespaces that restricts matches.  A request that specifies a target namespace matches only if either (a) this list contains that target namespace or (b) this list contains "*".  Note that "*" matches any specified namespace but does not match a request that _does not specify_ a namespace (see the `clusterScope` field for that). This list may be empty, but only if `clusterScope` is true.
func (d *ResourcePolicyRuleDie) Namespaces(v ...string) *ResourcePolicyRuleDie {
	return d.DieStamp(func(r *flowcontrolv1beta1.ResourcePolicyRule) {
		r.Namespaces = v
	})
}

var NonResourcePolicyRuleBlank = (&NonResourcePolicyRuleDie{}).DieFeed(flowcontrolv1beta1.NonResourcePolicyRule{})

type NonResourcePolicyRuleDie struct {
	mutable bool
	r       flowcontrolv1beta1.NonResourcePolicyRule
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *NonResourcePolicyRuleDie) DieImmutable(immutable bool) *NonResourcePolicyRuleDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *NonResourcePolicyRuleDie) DieFeed(r flowcontrolv1beta1.NonResourcePolicyRule) *NonResourcePolicyRuleDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &NonResourcePolicyRuleDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *NonResourcePolicyRuleDie) DieFeedPtr(r *flowcontrolv1beta1.NonResourcePolicyRule) *NonResourcePolicyRuleDie {
	if r == nil {
		r = &flowcontrolv1beta1.NonResourcePolicyRule{}
	}
	return d.DieFeed(*r)
}

// DieRelease returns the resource managed by the die.
func (d *NonResourcePolicyRuleDie) DieRelease() flowcontrolv1beta1.NonResourcePolicyRule {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *NonResourcePolicyRuleDie) DieReleasePtr() *flowcontrolv1beta1.NonResourcePolicyRule {
	r := d.DieRelease()
	return &r
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *NonResourcePolicyRuleDie) DieStamp(fn func(r *flowcontrolv1beta1.NonResourcePolicyRule)) *NonResourcePolicyRuleDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *NonResourcePolicyRuleDie) DeepCopy() *NonResourcePolicyRuleDie {
	r := *d.r.DeepCopy()
	return &NonResourcePolicyRuleDie{
		mutable: d.mutable,
		r:       r,
	}
}

// `verbs` is a list of matching verbs and may not be empty. "*" matches all verbs. If it is present, it must be the only entry. Required.
func (d *NonResourcePolicyRuleDie) Verbs(v ...string) *NonResourcePolicyRuleDie {
	return d.DieStamp(func(r *flowcontrolv1beta1.NonResourcePolicyRule) {
		r.Verbs = v
	})
}

// `nonResourceURLs` is a set of url prefixes that a user should have access to and may not be empty. For example:   - "/healthz" is legal   - "/hea*" is illegal   - "/hea" is legal but matches nothing   - "/hea/*" also matches nothing   - "/healthz/*" matches all per-component health checks. "*" matches all non-resource urls. if it is present, it must be the only entry. Required.
func (d *NonResourcePolicyRuleDie) NonResourceURLs(v ...string) *NonResourcePolicyRuleDie {
	return d.DieStamp(func(r *flowcontrolv1beta1.NonResourcePolicyRule) {
		r.NonResourceURLs = v
	})
}

var PriorityLevelConfigurationBlank = (&PriorityLevelConfigurationDie{}).DieFeed(flowcontrolv1beta1.PriorityLevelConfiguration{})

type PriorityLevelConfigurationDie struct {
	v1.FrozenObjectMeta
	mutable bool
	r       flowcontrolv1beta1.PriorityLevelConfiguration
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *PriorityLevelConfigurationDie) DieImmutable(immutable bool) *PriorityLevelConfigurationDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *PriorityLevelConfigurationDie) DieFeed(r flowcontrolv1beta1.PriorityLevelConfiguration) *PriorityLevelConfigurationDie {
	if d.mutable {
		d.FrozenObjectMeta = v1.FreezeObjectMeta(r.ObjectMeta)
		d.r = r
		return d
	}
	return &PriorityLevelConfigurationDie{
		FrozenObjectMeta: v1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *PriorityLevelConfigurationDie) DieFeedPtr(r *flowcontrolv1beta1.PriorityLevelConfiguration) *PriorityLevelConfigurationDie {
	if r == nil {
		r = &flowcontrolv1beta1.PriorityLevelConfiguration{}
	}
	return d.DieFeed(*r)
}

// DieRelease returns the resource managed by the die.
func (d *PriorityLevelConfigurationDie) DieRelease() flowcontrolv1beta1.PriorityLevelConfiguration {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *PriorityLevelConfigurationDie) DieReleasePtr() *flowcontrolv1beta1.PriorityLevelConfiguration {
	r := d.DieRelease()
	return &r
}

// DieReleaseUnstructured returns the resource managed by the die as an unstructured object.
func (d *PriorityLevelConfigurationDie) DieReleaseUnstructured() runtime.Unstructured {
	r := d.DieReleasePtr()
	u, _ := runtime.DefaultUnstructuredConverter.ToUnstructured(r)
	return &unstructured.Unstructured{
		Object: u,
	}
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *PriorityLevelConfigurationDie) DieStamp(fn func(r *flowcontrolv1beta1.PriorityLevelConfiguration)) *PriorityLevelConfigurationDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *PriorityLevelConfigurationDie) DeepCopy() *PriorityLevelConfigurationDie {
	r := *d.r.DeepCopy()
	return &PriorityLevelConfigurationDie{
		FrozenObjectMeta: v1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
	}
}

var _ runtime.Object = (*PriorityLevelConfigurationDie)(nil)

func (d *PriorityLevelConfigurationDie) DeepCopyObject() runtime.Object {
	return d.r.DeepCopy()
}

func (d *PriorityLevelConfigurationDie) GetObjectKind() schema.ObjectKind {
	r := d.DieRelease()
	return r.GetObjectKind()
}

func (d *PriorityLevelConfigurationDie) MarshalJSON() ([]byte, error) {
	return json.Marshal(d.r)
}

func (d *PriorityLevelConfigurationDie) UnmarshalJSON(b []byte) error {
	if d == PriorityLevelConfigurationBlank {
		return fmtx.Errorf("cannot unmarshal into the blank die, create a copy first")
	}
	if !d.mutable {
		return fmtx.Errorf("cannot unmarshal into immutable dies, create a mutable version first")
	}
	r := &flowcontrolv1beta1.PriorityLevelConfiguration{}
	err := json.Unmarshal(b, r)
	*d = *d.DieFeed(*r)
	return err
}

// MetadataDie stamps the resource's ObjectMeta field with a mutable die.
func (d *PriorityLevelConfigurationDie) MetadataDie(fn func(d *v1.ObjectMetaDie)) *PriorityLevelConfigurationDie {
	return d.DieStamp(func(r *flowcontrolv1beta1.PriorityLevelConfiguration) {
		d := v1.ObjectMetaBlank.DieImmutable(false).DieFeed(r.ObjectMeta)
		fn(d)
		r.ObjectMeta = d.DieRelease()
	})
}

// SpecDie stamps the resource's spec field with a mutable die.
func (d *PriorityLevelConfigurationDie) SpecDie(fn func(d *PriorityLevelConfigurationSpecDie)) *PriorityLevelConfigurationDie {
	return d.DieStamp(func(r *flowcontrolv1beta1.PriorityLevelConfiguration) {
		d := PriorityLevelConfigurationSpecBlank.DieImmutable(false).DieFeed(r.Spec)
		fn(d)
		r.Spec = d.DieRelease()
	})
}

// StatusDie stamps the resource's status field with a mutable die.
func (d *PriorityLevelConfigurationDie) StatusDie(fn func(d *PriorityLevelConfigurationStatusDie)) *PriorityLevelConfigurationDie {
	return d.DieStamp(func(r *flowcontrolv1beta1.PriorityLevelConfiguration) {
		d := PriorityLevelConfigurationStatusBlank.DieImmutable(false).DieFeed(r.Status)
		fn(d)
		r.Status = d.DieRelease()
	})
}

// `spec` is the specification of the desired behavior of a "request-priority". More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
func (d *PriorityLevelConfigurationDie) Spec(v flowcontrolv1beta1.PriorityLevelConfigurationSpec) *PriorityLevelConfigurationDie {
	return d.DieStamp(func(r *flowcontrolv1beta1.PriorityLevelConfiguration) {
		r.Spec = v
	})
}

// `status` is the current status of a "request-priority". More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
func (d *PriorityLevelConfigurationDie) Status(v flowcontrolv1beta1.PriorityLevelConfigurationStatus) *PriorityLevelConfigurationDie {
	return d.DieStamp(func(r *flowcontrolv1beta1.PriorityLevelConfiguration) {
		r.Status = v
	})
}

var PriorityLevelConfigurationSpecBlank = (&PriorityLevelConfigurationSpecDie{}).DieFeed(flowcontrolv1beta1.PriorityLevelConfigurationSpec{})

type PriorityLevelConfigurationSpecDie struct {
	mutable bool
	r       flowcontrolv1beta1.PriorityLevelConfigurationSpec
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *PriorityLevelConfigurationSpecDie) DieImmutable(immutable bool) *PriorityLevelConfigurationSpecDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *PriorityLevelConfigurationSpecDie) DieFeed(r flowcontrolv1beta1.PriorityLevelConfigurationSpec) *PriorityLevelConfigurationSpecDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &PriorityLevelConfigurationSpecDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *PriorityLevelConfigurationSpecDie) DieFeedPtr(r *flowcontrolv1beta1.PriorityLevelConfigurationSpec) *PriorityLevelConfigurationSpecDie {
	if r == nil {
		r = &flowcontrolv1beta1.PriorityLevelConfigurationSpec{}
	}
	return d.DieFeed(*r)
}

// DieRelease returns the resource managed by the die.
func (d *PriorityLevelConfigurationSpecDie) DieRelease() flowcontrolv1beta1.PriorityLevelConfigurationSpec {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *PriorityLevelConfigurationSpecDie) DieReleasePtr() *flowcontrolv1beta1.PriorityLevelConfigurationSpec {
	r := d.DieRelease()
	return &r
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *PriorityLevelConfigurationSpecDie) DieStamp(fn func(r *flowcontrolv1beta1.PriorityLevelConfigurationSpec)) *PriorityLevelConfigurationSpecDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *PriorityLevelConfigurationSpecDie) DeepCopy() *PriorityLevelConfigurationSpecDie {
	r := *d.r.DeepCopy()
	return &PriorityLevelConfigurationSpecDie{
		mutable: d.mutable,
		r:       r,
	}
}

// `type` indicates whether this priority level is subject to limitation on request execution.  A value of `"Exempt"` means that requests of this priority level are not subject to a limit (and thus are never queued) and do not detract from the capacity made available to other priority levels.  A value of `"Limited"` means that (a) requests of this priority level _are_ subject to limits and (b) some of the server's limited capacity is made available exclusively to this priority level. Required.
func (d *PriorityLevelConfigurationSpecDie) Type(v flowcontrolv1beta1.PriorityLevelEnablement) *PriorityLevelConfigurationSpecDie {
	return d.DieStamp(func(r *flowcontrolv1beta1.PriorityLevelConfigurationSpec) {
		r.Type = v
	})
}

// `limited` specifies how requests are handled for a Limited priority level. This field must be non-empty if and only if `type` is `"Limited"`.
func (d *PriorityLevelConfigurationSpecDie) Limited(v *flowcontrolv1beta1.LimitedPriorityLevelConfiguration) *PriorityLevelConfigurationSpecDie {
	return d.DieStamp(func(r *flowcontrolv1beta1.PriorityLevelConfigurationSpec) {
		r.Limited = v
	})
}

var LimitedPriorityLevelConfigurationBlank = (&LimitedPriorityLevelConfigurationDie{}).DieFeed(flowcontrolv1beta1.LimitedPriorityLevelConfiguration{})

type LimitedPriorityLevelConfigurationDie struct {
	mutable bool
	r       flowcontrolv1beta1.LimitedPriorityLevelConfiguration
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *LimitedPriorityLevelConfigurationDie) DieImmutable(immutable bool) *LimitedPriorityLevelConfigurationDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *LimitedPriorityLevelConfigurationDie) DieFeed(r flowcontrolv1beta1.LimitedPriorityLevelConfiguration) *LimitedPriorityLevelConfigurationDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &LimitedPriorityLevelConfigurationDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *LimitedPriorityLevelConfigurationDie) DieFeedPtr(r *flowcontrolv1beta1.LimitedPriorityLevelConfiguration) *LimitedPriorityLevelConfigurationDie {
	if r == nil {
		r = &flowcontrolv1beta1.LimitedPriorityLevelConfiguration{}
	}
	return d.DieFeed(*r)
}

// DieRelease returns the resource managed by the die.
func (d *LimitedPriorityLevelConfigurationDie) DieRelease() flowcontrolv1beta1.LimitedPriorityLevelConfiguration {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *LimitedPriorityLevelConfigurationDie) DieReleasePtr() *flowcontrolv1beta1.LimitedPriorityLevelConfiguration {
	r := d.DieRelease()
	return &r
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *LimitedPriorityLevelConfigurationDie) DieStamp(fn func(r *flowcontrolv1beta1.LimitedPriorityLevelConfiguration)) *LimitedPriorityLevelConfigurationDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *LimitedPriorityLevelConfigurationDie) DeepCopy() *LimitedPriorityLevelConfigurationDie {
	r := *d.r.DeepCopy()
	return &LimitedPriorityLevelConfigurationDie{
		mutable: d.mutable,
		r:       r,
	}
}

// `assuredConcurrencyShares` (ACS) configures the execution limit, which is a limit on the number of requests of this priority level that may be exeucting at a given time.  ACS must be a positive number. The server's concurrency limit (SCL) is divided among the concurrency-controlled priority levels in proportion to their assured concurrency shares. This produces the assured concurrency value (ACV) --- the number of requests that may be executing at a time --- for each such priority level:
//
// ACV(l) = ceil( SCL * ACS(l) / ( sum[priority levels k] ACS(k) ) )
//
// bigger numbers of ACS mean more reserved concurrent requests (at the expense of every other PL). This field has a default value of 30.
func (d *LimitedPriorityLevelConfigurationDie) AssuredConcurrencyShares(v int32) *LimitedPriorityLevelConfigurationDie {
	return d.DieStamp(func(r *flowcontrolv1beta1.LimitedPriorityLevelConfiguration) {
		r.AssuredConcurrencyShares = v
	})
}

// `limitResponse` indicates what to do with requests that can not be executed right now
func (d *LimitedPriorityLevelConfigurationDie) LimitResponse(v flowcontrolv1beta1.LimitResponse) *LimitedPriorityLevelConfigurationDie {
	return d.DieStamp(func(r *flowcontrolv1beta1.LimitedPriorityLevelConfiguration) {
		r.LimitResponse = v
	})
}

var LimitResponseBlank = (&LimitResponseDie{}).DieFeed(flowcontrolv1beta1.LimitResponse{})

type LimitResponseDie struct {
	mutable bool
	r       flowcontrolv1beta1.LimitResponse
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *LimitResponseDie) DieImmutable(immutable bool) *LimitResponseDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *LimitResponseDie) DieFeed(r flowcontrolv1beta1.LimitResponse) *LimitResponseDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &LimitResponseDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *LimitResponseDie) DieFeedPtr(r *flowcontrolv1beta1.LimitResponse) *LimitResponseDie {
	if r == nil {
		r = &flowcontrolv1beta1.LimitResponse{}
	}
	return d.DieFeed(*r)
}

// DieRelease returns the resource managed by the die.
func (d *LimitResponseDie) DieRelease() flowcontrolv1beta1.LimitResponse {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *LimitResponseDie) DieReleasePtr() *flowcontrolv1beta1.LimitResponse {
	r := d.DieRelease()
	return &r
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *LimitResponseDie) DieStamp(fn func(r *flowcontrolv1beta1.LimitResponse)) *LimitResponseDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *LimitResponseDie) DeepCopy() *LimitResponseDie {
	r := *d.r.DeepCopy()
	return &LimitResponseDie{
		mutable: d.mutable,
		r:       r,
	}
}

// `type` is "Queue" or "Reject". "Queue" means that requests that can not be executed upon arrival are held in a queue until they can be executed or a queuing limit is reached. "Reject" means that requests that can not be executed upon arrival are rejected. Required.
func (d *LimitResponseDie) Type(v flowcontrolv1beta1.LimitResponseType) *LimitResponseDie {
	return d.DieStamp(func(r *flowcontrolv1beta1.LimitResponse) {
		r.Type = v
	})
}

// `queuing` holds the configuration parameters for queuing. This field may be non-empty only if `type` is `"Queue"`.
func (d *LimitResponseDie) Queuing(v *flowcontrolv1beta1.QueuingConfiguration) *LimitResponseDie {
	return d.DieStamp(func(r *flowcontrolv1beta1.LimitResponse) {
		r.Queuing = v
	})
}

var QueuingConfigurationBlank = (&QueuingConfigurationDie{}).DieFeed(flowcontrolv1beta1.QueuingConfiguration{})

type QueuingConfigurationDie struct {
	mutable bool
	r       flowcontrolv1beta1.QueuingConfiguration
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *QueuingConfigurationDie) DieImmutable(immutable bool) *QueuingConfigurationDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *QueuingConfigurationDie) DieFeed(r flowcontrolv1beta1.QueuingConfiguration) *QueuingConfigurationDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &QueuingConfigurationDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *QueuingConfigurationDie) DieFeedPtr(r *flowcontrolv1beta1.QueuingConfiguration) *QueuingConfigurationDie {
	if r == nil {
		r = &flowcontrolv1beta1.QueuingConfiguration{}
	}
	return d.DieFeed(*r)
}

// DieRelease returns the resource managed by the die.
func (d *QueuingConfigurationDie) DieRelease() flowcontrolv1beta1.QueuingConfiguration {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *QueuingConfigurationDie) DieReleasePtr() *flowcontrolv1beta1.QueuingConfiguration {
	r := d.DieRelease()
	return &r
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *QueuingConfigurationDie) DieStamp(fn func(r *flowcontrolv1beta1.QueuingConfiguration)) *QueuingConfigurationDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *QueuingConfigurationDie) DeepCopy() *QueuingConfigurationDie {
	r := *d.r.DeepCopy()
	return &QueuingConfigurationDie{
		mutable: d.mutable,
		r:       r,
	}
}

// `queues` is the number of queues for this priority level. The queues exist independently at each apiserver. The value must be positive.  Setting it to 1 effectively precludes shufflesharding and thus makes the distinguisher method of associated flow schemas irrelevant.  This field has a default value of 64.
func (d *QueuingConfigurationDie) Queues(v int32) *QueuingConfigurationDie {
	return d.DieStamp(func(r *flowcontrolv1beta1.QueuingConfiguration) {
		r.Queues = v
	})
}

// `handSize` is a small positive number that configures the shuffle sharding of requests into queues.  When enqueuing a request at this priority level the request's flow identifier (a string pair) is hashed and the hash value is used to shuffle the list of queues and deal a hand of the size specified here.  The request is put into one of the shortest queues in that hand. `handSize` must be no larger than `queues`, and should be significantly smaller (so that a few heavy flows do not saturate most of the queues).  See the user-facing documentation for more extensive guidance on setting this field.  This field has a default value of 8.
func (d *QueuingConfigurationDie) HandSize(v int32) *QueuingConfigurationDie {
	return d.DieStamp(func(r *flowcontrolv1beta1.QueuingConfiguration) {
		r.HandSize = v
	})
}

// `queueLengthLimit` is the maximum number of requests allowed to be waiting in a given queue of this priority level at a time; excess requests are rejected.  This value must be positive.  If not specified, it will be defaulted to 50.
func (d *QueuingConfigurationDie) QueueLengthLimit(v int32) *QueuingConfigurationDie {
	return d.DieStamp(func(r *flowcontrolv1beta1.QueuingConfiguration) {
		r.QueueLengthLimit = v
	})
}

var PriorityLevelConfigurationStatusBlank = (&PriorityLevelConfigurationStatusDie{}).DieFeed(flowcontrolv1beta1.PriorityLevelConfigurationStatus{})

type PriorityLevelConfigurationStatusDie struct {
	mutable bool
	r       flowcontrolv1beta1.PriorityLevelConfigurationStatus
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *PriorityLevelConfigurationStatusDie) DieImmutable(immutable bool) *PriorityLevelConfigurationStatusDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *PriorityLevelConfigurationStatusDie) DieFeed(r flowcontrolv1beta1.PriorityLevelConfigurationStatus) *PriorityLevelConfigurationStatusDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &PriorityLevelConfigurationStatusDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *PriorityLevelConfigurationStatusDie) DieFeedPtr(r *flowcontrolv1beta1.PriorityLevelConfigurationStatus) *PriorityLevelConfigurationStatusDie {
	if r == nil {
		r = &flowcontrolv1beta1.PriorityLevelConfigurationStatus{}
	}
	return d.DieFeed(*r)
}

// DieRelease returns the resource managed by the die.
func (d *PriorityLevelConfigurationStatusDie) DieRelease() flowcontrolv1beta1.PriorityLevelConfigurationStatus {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *PriorityLevelConfigurationStatusDie) DieReleasePtr() *flowcontrolv1beta1.PriorityLevelConfigurationStatus {
	r := d.DieRelease()
	return &r
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *PriorityLevelConfigurationStatusDie) DieStamp(fn func(r *flowcontrolv1beta1.PriorityLevelConfigurationStatus)) *PriorityLevelConfigurationStatusDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *PriorityLevelConfigurationStatusDie) DeepCopy() *PriorityLevelConfigurationStatusDie {
	r := *d.r.DeepCopy()
	return &PriorityLevelConfigurationStatusDie{
		mutable: d.mutable,
		r:       r,
	}
}

// `conditions` is the current state of "request-priority".
func (d *PriorityLevelConfigurationStatusDie) Conditions(v ...flowcontrolv1beta1.PriorityLevelConfigurationCondition) *PriorityLevelConfigurationStatusDie {
	return d.DieStamp(func(r *flowcontrolv1beta1.PriorityLevelConfigurationStatus) {
		r.Conditions = v
	})
}
