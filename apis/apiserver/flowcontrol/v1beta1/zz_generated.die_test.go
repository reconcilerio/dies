//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright 2021-2022 the original author or authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by diegen. DO NOT EDIT.

package v1beta1

import (
	testing "dies.dev/testing"
	testingx "testing"
)

func TestFlowSchemaDie_MissingMethods(t *testingx.T) {
	die := FlowSchemaBlank
	ignore := []string{"TypeMeta", "ObjectMeta"}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for FlowSchemaDie: %s", diff.List())
	}
}

func TestFlowSchemaSpecDie_MissingMethods(t *testingx.T) {
	die := FlowSchemaSpecBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for FlowSchemaSpecDie: %s", diff.List())
	}
}

func TestFlowSchemaStatusDie_MissingMethods(t *testingx.T) {
	die := FlowSchemaStatusBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for FlowSchemaStatusDie: %s", diff.List())
	}
}

func TestPriorityLevelConfigurationReferenceDie_MissingMethods(t *testingx.T) {
	die := PriorityLevelConfigurationReferenceBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for PriorityLevelConfigurationReferenceDie: %s", diff.List())
	}
}

func TestFlowDistinguisherMethodDie_MissingMethods(t *testingx.T) {
	die := FlowDistinguisherMethodBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for FlowDistinguisherMethodDie: %s", diff.List())
	}
}

func TestPolicyRulesWithSubjectsDie_MissingMethods(t *testingx.T) {
	die := PolicyRulesWithSubjectsBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for PolicyRulesWithSubjectsDie: %s", diff.List())
	}
}

func TestSubjectDie_MissingMethods(t *testingx.T) {
	die := SubjectBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for SubjectDie: %s", diff.List())
	}
}

func TestUserSubjectDie_MissingMethods(t *testingx.T) {
	die := UserSubjectBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for UserSubjectDie: %s", diff.List())
	}
}

func TestGroupSubjectDie_MissingMethods(t *testingx.T) {
	die := GroupSubjectBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for GroupSubjectDie: %s", diff.List())
	}
}

func TestServiceAccountSubjectDie_MissingMethods(t *testingx.T) {
	die := ServiceAccountSubjectBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for ServiceAccountSubjectDie: %s", diff.List())
	}
}

func TestResourcePolicyRuleDie_MissingMethods(t *testingx.T) {
	die := ResourcePolicyRuleBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for ResourcePolicyRuleDie: %s", diff.List())
	}
}

func TestNonResourcePolicyRuleDie_MissingMethods(t *testingx.T) {
	die := NonResourcePolicyRuleBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for NonResourcePolicyRuleDie: %s", diff.List())
	}
}

func TestPriorityLevelConfigurationDie_MissingMethods(t *testingx.T) {
	die := PriorityLevelConfigurationBlank
	ignore := []string{"TypeMeta", "ObjectMeta"}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for PriorityLevelConfigurationDie: %s", diff.List())
	}
}

func TestPriorityLevelConfigurationSpecDie_MissingMethods(t *testingx.T) {
	die := PriorityLevelConfigurationSpecBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for PriorityLevelConfigurationSpecDie: %s", diff.List())
	}
}

func TestLimitedPriorityLevelConfigurationDie_MissingMethods(t *testingx.T) {
	die := LimitedPriorityLevelConfigurationBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for LimitedPriorityLevelConfigurationDie: %s", diff.List())
	}
}

func TestLimitResponseDie_MissingMethods(t *testingx.T) {
	die := LimitResponseBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for LimitResponseDie: %s", diff.List())
	}
}

func TestExemptPriorityLevelConfigurationDie_MissingMethods(t *testingx.T) {
	die := ExemptPriorityLevelConfigurationBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for ExemptPriorityLevelConfigurationDie: %s", diff.List())
	}
}

func TestQueuingConfigurationDie_MissingMethods(t *testingx.T) {
	die := QueuingConfigurationBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for QueuingConfigurationDie: %s", diff.List())
	}
}

func TestPriorityLevelConfigurationStatusDie_MissingMethods(t *testingx.T) {
	die := PriorityLevelConfigurationStatusBlank
	ignore := []string{}
	diff := testing.DieFieldDiff(die).Delete(ignore...)
	if diff.Len() != 0 {
		t.Errorf("found missing fields for PriorityLevelConfigurationStatusDie: %s", diff.List())
	}
}
