//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright 2021-2022 the original author or authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by diegen. DO NOT EDIT.

package v1beta1

import (
	fmtx "fmt"
	cmp "github.com/google/go-cmp/cmp"
	coordinationv1 "k8s.io/api/coordination/v1"
	coordinationv1beta1 "k8s.io/api/coordination/v1beta1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	unstructured "k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
	runtime "k8s.io/apimachinery/pkg/runtime"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	json "k8s.io/apimachinery/pkg/util/json"
	jsonpath "k8s.io/client-go/util/jsonpath"
	osx "os"
	v1 "reconciler.io/dies/apis/meta/v1"
	patch "reconciler.io/dies/patch"
	reflectx "reflect"
	yaml "sigs.k8s.io/yaml"
)

var LeaseCandidateBlank = (&LeaseCandidateDie{}).DieFeed(coordinationv1beta1.LeaseCandidate{})

type LeaseCandidateDie struct {
	v1.FrozenObjectMeta
	mutable bool
	r       coordinationv1beta1.LeaseCandidate
	seal    coordinationv1beta1.LeaseCandidate
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *LeaseCandidateDie) DieImmutable(immutable bool) *LeaseCandidateDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *LeaseCandidateDie) DieFeed(r coordinationv1beta1.LeaseCandidate) *LeaseCandidateDie {
	if d.mutable {
		d.FrozenObjectMeta = v1.FreezeObjectMeta(r.ObjectMeta)
		d.r = r
		return d
	}
	return &LeaseCandidateDie{
		FrozenObjectMeta: v1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
		seal:             d.seal,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *LeaseCandidateDie) DieFeedPtr(r *coordinationv1beta1.LeaseCandidate) *LeaseCandidateDie {
	if r == nil {
		r = &coordinationv1beta1.LeaseCandidate{}
	}
	return d.DieFeed(*r)
}

// DieFeedDuck returns a new die with the provided value converted into the underlying type. Panics on error.
func (d *LeaseCandidateDie) DieFeedDuck(v any) *LeaseCandidateDie {
	data, err := json.Marshal(v)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(data)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *LeaseCandidateDie) DieFeedJSON(j []byte) *LeaseCandidateDie {
	r := coordinationv1beta1.LeaseCandidate{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *LeaseCandidateDie) DieFeedYAML(y []byte) *LeaseCandidateDie {
	r := coordinationv1beta1.LeaseCandidate{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *LeaseCandidateDie) DieFeedYAMLFile(name string) *LeaseCandidateDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *LeaseCandidateDie) DieFeedRawExtension(raw runtime.RawExtension) *LeaseCandidateDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *LeaseCandidateDie) DieRelease() coordinationv1beta1.LeaseCandidate {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *LeaseCandidateDie) DieReleasePtr() *coordinationv1beta1.LeaseCandidate {
	r := d.DieRelease()
	return &r
}

// DieReleaseUnstructured returns the resource managed by the die as an unstructured object. Panics on error.
func (d *LeaseCandidateDie) DieReleaseUnstructured() *unstructured.Unstructured {
	r := d.DieReleasePtr()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(r)
	if err != nil {
		panic(err)
	}
	return &unstructured.Unstructured{
		Object: u,
	}
}

// DieReleaseDuck releases the value into the passed value and returns the same. Panics on error.
func (d *LeaseCandidateDie) DieReleaseDuck(v any) any {
	data := d.DieReleaseJSON()
	if err := json.Unmarshal(data, v); err != nil {
		panic(err)
	}
	return v
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *LeaseCandidateDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *LeaseCandidateDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *LeaseCandidateDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *LeaseCandidateDie) DieStamp(fn func(r *coordinationv1beta1.LeaseCandidate)) *LeaseCandidateDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// Experimental: DieStampAt uses a JSON path (http://goessner.net/articles/JsonPath/) expression to stamp portions of the resource. The callback is invoked with each JSON path match. Panics if the callback function does not accept a single argument of the same type or a pointer to that type as found on the resource at the target location.
//
// Future iterations will improve type coercion from the resource to the callback argument.
func (d *LeaseCandidateDie) DieStampAt(jp string, fn interface{}) *LeaseCandidateDie {
	return d.DieStamp(func(r *coordinationv1beta1.LeaseCandidate) {
		if ni := reflectx.ValueOf(fn).Type().NumIn(); ni != 1 {
			panic(fmtx.Errorf("callback function must have 1 input parameters, found %d", ni))
		}
		if no := reflectx.ValueOf(fn).Type().NumOut(); no != 0 {
			panic(fmtx.Errorf("callback function must have 0 output parameters, found %d", no))
		}

		cp := jsonpath.New("")
		if err := cp.Parse(fmtx.Sprintf("{%s}", jp)); err != nil {
			panic(err)
		}
		cr, err := cp.FindResults(r)
		if err != nil {
			// errors are expected if a path is not found
			return
		}
		for _, cv := range cr[0] {
			arg0t := reflectx.ValueOf(fn).Type().In(0)

			var args []reflectx.Value
			if cv.Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv}
			} else if cv.CanAddr() && cv.Addr().Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv.Addr()}
			} else {
				panic(fmtx.Errorf("callback function must accept value of type %q, found type %q", cv.Type(), arg0t))
			}

			reflectx.ValueOf(fn).Call(args)
		}
	})
}

// DieWith returns a new die after passing the current die to the callback function. The passed die is mutable.
func (d *LeaseCandidateDie) DieWith(fns ...func(d *LeaseCandidateDie)) *LeaseCandidateDie {
	nd := LeaseCandidateBlank.DieFeed(d.DieRelease()).DieImmutable(false)
	for _, fn := range fns {
		if fn != nil {
			fn(nd)
		}
	}
	return d.DieFeed(nd.DieRelease())
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *LeaseCandidateDie) DeepCopy() *LeaseCandidateDie {
	r := *d.r.DeepCopy()
	return &LeaseCandidateDie{
		FrozenObjectMeta: v1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
		seal:             d.seal,
	}
}

// DieSeal returns a new die for the current die's state that is sealed for comparison in future diff and patch operations.
func (d *LeaseCandidateDie) DieSeal() *LeaseCandidateDie {
	return d.DieSealFeed(d.r)
}

// DieSealFeed returns a new die for the current die's state that uses a specific resource for comparison in future diff and patch operations.
func (d *LeaseCandidateDie) DieSealFeed(r coordinationv1beta1.LeaseCandidate) *LeaseCandidateDie {
	if !d.mutable {
		d = d.DeepCopy()
	}
	d.seal = *r.DeepCopy()
	return d
}

// DieSealFeedPtr returns a new die for the current die's state that uses a specific resource pointer for comparison in future diff and patch operations. If the resource is nil, the empty value is used instead.
func (d *LeaseCandidateDie) DieSealFeedPtr(r *coordinationv1beta1.LeaseCandidate) *LeaseCandidateDie {
	if r == nil {
		r = &coordinationv1beta1.LeaseCandidate{}
	}
	return d.DieSealFeed(*r)
}

// DieSealRelease returns the sealed resource managed by the die.
func (d *LeaseCandidateDie) DieSealRelease() coordinationv1beta1.LeaseCandidate {
	return *d.seal.DeepCopy()
}

// DieSealReleasePtr returns the sealed resource pointer managed by the die.
func (d *LeaseCandidateDie) DieSealReleasePtr() *coordinationv1beta1.LeaseCandidate {
	r := d.DieSealRelease()
	return &r
}

// DieDiff uses cmp.Diff to compare the current value of the die with the sealed value.
func (d *LeaseCandidateDie) DieDiff(opts ...cmp.Option) string {
	return cmp.Diff(d.seal, d.r, opts...)
}

// DiePatch generates a patch between the current value of the die and the sealed value.
func (d *LeaseCandidateDie) DiePatch(patchType types.PatchType) ([]byte, error) {
	return patch.Create(d.seal, d.r, patchType)
}

var _ runtime.Object = (*LeaseCandidateDie)(nil)

func (d *LeaseCandidateDie) DeepCopyObject() runtime.Object {
	return d.r.DeepCopy()
}

func (d *LeaseCandidateDie) GetObjectKind() schema.ObjectKind {
	r := d.DieRelease()
	return r.GetObjectKind()
}

func (d *LeaseCandidateDie) MarshalJSON() ([]byte, error) {
	return json.Marshal(d.r)
}

func (d *LeaseCandidateDie) UnmarshalJSON(b []byte) error {
	if !d.mutable {
		return fmtx.Errorf("cannot unmarshal into immutable dies, create a mutable version first")
	}
	resource := &coordinationv1beta1.LeaseCandidate{}
	err := json.Unmarshal(b, resource)
	*d = *d.DieFeed(*resource)
	return err
}

// DieDefaultTypeMetadata sets the APIVersion and Kind to "coordination.k8s.io/v1beta1" and "LeaseCandidate" respectively.
func (d *LeaseCandidateDie) DieDefaultTypeMetadata() *LeaseCandidateDie {
	return d.DieStamp(func(r *coordinationv1beta1.LeaseCandidate) {
		r.APIVersion = "coordination.k8s.io/v1beta1"
		r.Kind = "LeaseCandidate"
	})
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (d *LeaseCandidateDie) APIVersion(v string) *LeaseCandidateDie {
	return d.DieStamp(func(r *coordinationv1beta1.LeaseCandidate) {
		r.APIVersion = v
	})
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (d *LeaseCandidateDie) Kind(v string) *LeaseCandidateDie {
	return d.DieStamp(func(r *coordinationv1beta1.LeaseCandidate) {
		r.Kind = v
	})
}

// TypeMetadata standard object's type metadata.
func (d *LeaseCandidateDie) TypeMetadata(v metav1.TypeMeta) *LeaseCandidateDie {
	return d.DieStamp(func(r *coordinationv1beta1.LeaseCandidate) {
		r.TypeMeta = v
	})
}

// TypeMetadataDie stamps the resource's TypeMeta field with a mutable die.
func (d *LeaseCandidateDie) TypeMetadataDie(fn func(d *v1.TypeMetaDie)) *LeaseCandidateDie {
	return d.DieStamp(func(r *coordinationv1beta1.LeaseCandidate) {
		d := v1.TypeMetaBlank.DieImmutable(false).DieFeed(r.TypeMeta)
		fn(d)
		r.TypeMeta = d.DieRelease()
	})
}

// Metadata standard object's metadata.
func (d *LeaseCandidateDie) Metadata(v metav1.ObjectMeta) *LeaseCandidateDie {
	return d.DieStamp(func(r *coordinationv1beta1.LeaseCandidate) {
		r.ObjectMeta = v
	})
}

// MetadataDie stamps the resource's ObjectMeta field with a mutable die.
func (d *LeaseCandidateDie) MetadataDie(fn func(d *v1.ObjectMetaDie)) *LeaseCandidateDie {
	return d.DieStamp(func(r *coordinationv1beta1.LeaseCandidate) {
		d := v1.ObjectMetaBlank.DieImmutable(false).DieFeed(r.ObjectMeta)
		fn(d)
		r.ObjectMeta = d.DieRelease()
	})
}

// SpecDie stamps the resource's spec field with a mutable die.
func (d *LeaseCandidateDie) SpecDie(fn func(d *LeaseCandidateSpecDie)) *LeaseCandidateDie {
	return d.DieStamp(func(r *coordinationv1beta1.LeaseCandidate) {
		d := LeaseCandidateSpecBlank.DieImmutable(false).DieFeed(r.Spec)
		fn(d)
		r.Spec = d.DieRelease()
	})
}

// spec contains the specification of the Lease.
//
// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
func (d *LeaseCandidateDie) Spec(v coordinationv1beta1.LeaseCandidateSpec) *LeaseCandidateDie {
	return d.DieStamp(func(r *coordinationv1beta1.LeaseCandidate) {
		r.Spec = v
	})
}

var LeaseCandidateSpecBlank = (&LeaseCandidateSpecDie{}).DieFeed(coordinationv1beta1.LeaseCandidateSpec{})

type LeaseCandidateSpecDie struct {
	mutable bool
	r       coordinationv1beta1.LeaseCandidateSpec
	seal    coordinationv1beta1.LeaseCandidateSpec
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *LeaseCandidateSpecDie) DieImmutable(immutable bool) *LeaseCandidateSpecDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *LeaseCandidateSpecDie) DieFeed(r coordinationv1beta1.LeaseCandidateSpec) *LeaseCandidateSpecDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &LeaseCandidateSpecDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *LeaseCandidateSpecDie) DieFeedPtr(r *coordinationv1beta1.LeaseCandidateSpec) *LeaseCandidateSpecDie {
	if r == nil {
		r = &coordinationv1beta1.LeaseCandidateSpec{}
	}
	return d.DieFeed(*r)
}

// DieFeedDuck returns a new die with the provided value converted into the underlying type. Panics on error.
func (d *LeaseCandidateSpecDie) DieFeedDuck(v any) *LeaseCandidateSpecDie {
	data, err := json.Marshal(v)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(data)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *LeaseCandidateSpecDie) DieFeedJSON(j []byte) *LeaseCandidateSpecDie {
	r := coordinationv1beta1.LeaseCandidateSpec{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *LeaseCandidateSpecDie) DieFeedYAML(y []byte) *LeaseCandidateSpecDie {
	r := coordinationv1beta1.LeaseCandidateSpec{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *LeaseCandidateSpecDie) DieFeedYAMLFile(name string) *LeaseCandidateSpecDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *LeaseCandidateSpecDie) DieFeedRawExtension(raw runtime.RawExtension) *LeaseCandidateSpecDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *LeaseCandidateSpecDie) DieRelease() coordinationv1beta1.LeaseCandidateSpec {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *LeaseCandidateSpecDie) DieReleasePtr() *coordinationv1beta1.LeaseCandidateSpec {
	r := d.DieRelease()
	return &r
}

// DieReleaseDuck releases the value into the passed value and returns the same. Panics on error.
func (d *LeaseCandidateSpecDie) DieReleaseDuck(v any) any {
	data := d.DieReleaseJSON()
	if err := json.Unmarshal(data, v); err != nil {
		panic(err)
	}
	return v
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *LeaseCandidateSpecDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *LeaseCandidateSpecDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *LeaseCandidateSpecDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *LeaseCandidateSpecDie) DieStamp(fn func(r *coordinationv1beta1.LeaseCandidateSpec)) *LeaseCandidateSpecDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// Experimental: DieStampAt uses a JSON path (http://goessner.net/articles/JsonPath/) expression to stamp portions of the resource. The callback is invoked with each JSON path match. Panics if the callback function does not accept a single argument of the same type or a pointer to that type as found on the resource at the target location.
//
// Future iterations will improve type coercion from the resource to the callback argument.
func (d *LeaseCandidateSpecDie) DieStampAt(jp string, fn interface{}) *LeaseCandidateSpecDie {
	return d.DieStamp(func(r *coordinationv1beta1.LeaseCandidateSpec) {
		if ni := reflectx.ValueOf(fn).Type().NumIn(); ni != 1 {
			panic(fmtx.Errorf("callback function must have 1 input parameters, found %d", ni))
		}
		if no := reflectx.ValueOf(fn).Type().NumOut(); no != 0 {
			panic(fmtx.Errorf("callback function must have 0 output parameters, found %d", no))
		}

		cp := jsonpath.New("")
		if err := cp.Parse(fmtx.Sprintf("{%s}", jp)); err != nil {
			panic(err)
		}
		cr, err := cp.FindResults(r)
		if err != nil {
			// errors are expected if a path is not found
			return
		}
		for _, cv := range cr[0] {
			arg0t := reflectx.ValueOf(fn).Type().In(0)

			var args []reflectx.Value
			if cv.Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv}
			} else if cv.CanAddr() && cv.Addr().Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv.Addr()}
			} else {
				panic(fmtx.Errorf("callback function must accept value of type %q, found type %q", cv.Type(), arg0t))
			}

			reflectx.ValueOf(fn).Call(args)
		}
	})
}

// DieWith returns a new die after passing the current die to the callback function. The passed die is mutable.
func (d *LeaseCandidateSpecDie) DieWith(fns ...func(d *LeaseCandidateSpecDie)) *LeaseCandidateSpecDie {
	nd := LeaseCandidateSpecBlank.DieFeed(d.DieRelease()).DieImmutable(false)
	for _, fn := range fns {
		if fn != nil {
			fn(nd)
		}
	}
	return d.DieFeed(nd.DieRelease())
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *LeaseCandidateSpecDie) DeepCopy() *LeaseCandidateSpecDie {
	r := *d.r.DeepCopy()
	return &LeaseCandidateSpecDie{
		mutable: d.mutable,
		r:       r,
		seal:    d.seal,
	}
}

// DieSeal returns a new die for the current die's state that is sealed for comparison in future diff and patch operations.
func (d *LeaseCandidateSpecDie) DieSeal() *LeaseCandidateSpecDie {
	return d.DieSealFeed(d.r)
}

// DieSealFeed returns a new die for the current die's state that uses a specific resource for comparison in future diff and patch operations.
func (d *LeaseCandidateSpecDie) DieSealFeed(r coordinationv1beta1.LeaseCandidateSpec) *LeaseCandidateSpecDie {
	if !d.mutable {
		d = d.DeepCopy()
	}
	d.seal = *r.DeepCopy()
	return d
}

// DieSealFeedPtr returns a new die for the current die's state that uses a specific resource pointer for comparison in future diff and patch operations. If the resource is nil, the empty value is used instead.
func (d *LeaseCandidateSpecDie) DieSealFeedPtr(r *coordinationv1beta1.LeaseCandidateSpec) *LeaseCandidateSpecDie {
	if r == nil {
		r = &coordinationv1beta1.LeaseCandidateSpec{}
	}
	return d.DieSealFeed(*r)
}

// DieSealRelease returns the sealed resource managed by the die.
func (d *LeaseCandidateSpecDie) DieSealRelease() coordinationv1beta1.LeaseCandidateSpec {
	return *d.seal.DeepCopy()
}

// DieSealReleasePtr returns the sealed resource pointer managed by the die.
func (d *LeaseCandidateSpecDie) DieSealReleasePtr() *coordinationv1beta1.LeaseCandidateSpec {
	r := d.DieSealRelease()
	return &r
}

// DieDiff uses cmp.Diff to compare the current value of the die with the sealed value.
func (d *LeaseCandidateSpecDie) DieDiff(opts ...cmp.Option) string {
	return cmp.Diff(d.seal, d.r, opts...)
}

// DiePatch generates a patch between the current value of the die and the sealed value.
func (d *LeaseCandidateSpecDie) DiePatch(patchType types.PatchType) ([]byte, error) {
	return patch.Create(d.seal, d.r, patchType)
}

// LeaseName is the name of the lease for which this candidate is contending.
//
// The limits on this field are the same as on Lease.name. Multiple lease candidates
//
// may reference the same Lease.name.
//
// This field is immutable.
func (d *LeaseCandidateSpecDie) LeaseName(v string) *LeaseCandidateSpecDie {
	return d.DieStamp(func(r *coordinationv1beta1.LeaseCandidateSpec) {
		r.LeaseName = v
	})
}

// PingTime is the last time that the server has requested the LeaseCandidate
//
// to renew. It is only done during leader election to check if any
//
// LeaseCandidates have become ineligible. When PingTime is updated, the
//
// LeaseCandidate will respond by updating RenewTime.
func (d *LeaseCandidateSpecDie) PingTime(v *metav1.MicroTime) *LeaseCandidateSpecDie {
	return d.DieStamp(func(r *coordinationv1beta1.LeaseCandidateSpec) {
		r.PingTime = v
	})
}

// RenewTime is the time that the LeaseCandidate was last updated.
//
// # Any time a Lease needs to do leader election, the PingTime field
//
// is updated to signal to the LeaseCandidate that they should update
//
// the RenewTime.
//
// # Old LeaseCandidate objects are also garbage collected if it has been hours
//
// since the last renew. The PingTime field is updated regularly to prevent
//
// garbage collection for still active LeaseCandidates.
func (d *LeaseCandidateSpecDie) RenewTime(v *metav1.MicroTime) *LeaseCandidateSpecDie {
	return d.DieStamp(func(r *coordinationv1beta1.LeaseCandidateSpec) {
		r.RenewTime = v
	})
}

// BinaryVersion is the binary version. It must be in a semver format without leading `v`.
//
// This field is required.
func (d *LeaseCandidateSpecDie) BinaryVersion(v string) *LeaseCandidateSpecDie {
	return d.DieStamp(func(r *coordinationv1beta1.LeaseCandidateSpec) {
		r.BinaryVersion = v
	})
}

// EmulationVersion is the emulation version. It must be in a semver format without leading `v`.
//
// EmulationVersion must be less than or equal to BinaryVersion.
//
// This field is required when strategy is "OldestEmulationVersion"
func (d *LeaseCandidateSpecDie) EmulationVersion(v string) *LeaseCandidateSpecDie {
	return d.DieStamp(func(r *coordinationv1beta1.LeaseCandidateSpec) {
		r.EmulationVersion = v
	})
}

// Strategy is the strategy that coordinated leader election will use for picking the leader.
//
// # If multiple candidates for the same Lease return different strategies, the strategy provided
//
// by the candidate with the latest BinaryVersion will be used. If there is still conflict,
//
// this is a user error and coordinated leader election will not operate the Lease until resolved.
func (d *LeaseCandidateSpecDie) Strategy(v coordinationv1.CoordinatedLeaseStrategy) *LeaseCandidateSpecDie {
	return d.DieStamp(func(r *coordinationv1beta1.LeaseCandidateSpec) {
		r.Strategy = v
	})
}
