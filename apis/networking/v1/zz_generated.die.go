//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright 2021-2022 the original author or authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by diegen. DO NOT EDIT.

package v1

import (
	metav1 "dies.dev/apis/meta/v1"
	json "encoding/json"
	fmtx "fmt"
	corev1 "k8s.io/api/core/v1"
	networkingv1 "k8s.io/api/networking/v1"
	apismetav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	unstructured "k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
	runtime "k8s.io/apimachinery/pkg/runtime"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	intstr "k8s.io/apimachinery/pkg/util/intstr"
	osx "os"
	yaml "sigs.k8s.io/yaml"
)

var IngressBlank = (&IngressDie{}).DieFeed(networkingv1.Ingress{})

type IngressDie struct {
	metav1.FrozenObjectMeta
	mutable bool
	r       networkingv1.Ingress
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *IngressDie) DieImmutable(immutable bool) *IngressDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *IngressDie) DieFeed(r networkingv1.Ingress) *IngressDie {
	if d.mutable {
		d.FrozenObjectMeta = metav1.FreezeObjectMeta(r.ObjectMeta)
		d.r = r
		return d
	}
	return &IngressDie{
		FrozenObjectMeta: metav1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *IngressDie) DieFeedPtr(r *networkingv1.Ingress) *IngressDie {
	if r == nil {
		r = &networkingv1.Ingress{}
	}
	return d.DieFeed(*r)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *IngressDie) DieFeedJSON(j []byte) *IngressDie {
	r := networkingv1.Ingress{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *IngressDie) DieFeedYAML(y []byte) *IngressDie {
	r := networkingv1.Ingress{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *IngressDie) DieFeedYAMLFile(name string) *IngressDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *IngressDie) DieFeedRawExtension(raw runtime.RawExtension) *IngressDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *IngressDie) DieRelease() networkingv1.Ingress {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *IngressDie) DieReleasePtr() *networkingv1.Ingress {
	r := d.DieRelease()
	return &r
}

// DieReleaseUnstructured returns the resource managed by the die as an unstructured object. Panics on error.
func (d *IngressDie) DieReleaseUnstructured() *unstructured.Unstructured {
	r := d.DieReleasePtr()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(r)
	if err != nil {
		panic(err)
	}
	return &unstructured.Unstructured{
		Object: u,
	}
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *IngressDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *IngressDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *IngressDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *IngressDie) DieStamp(fn func(r *networkingv1.Ingress)) *IngressDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *IngressDie) DeepCopy() *IngressDie {
	r := *d.r.DeepCopy()
	return &IngressDie{
		FrozenObjectMeta: metav1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
	}
}

var _ runtime.Object = (*IngressDie)(nil)

func (d *IngressDie) DeepCopyObject() runtime.Object {
	return d.r.DeepCopy()
}

func (d *IngressDie) GetObjectKind() schema.ObjectKind {
	r := d.DieRelease()
	return r.GetObjectKind()
}

func (d *IngressDie) MarshalJSON() ([]byte, error) {
	return json.Marshal(d.r)
}

func (d *IngressDie) UnmarshalJSON(b []byte) error {
	if d == IngressBlank {
		return fmtx.Errorf("cannot unmarshal into the blank die, create a copy first")
	}
	if !d.mutable {
		return fmtx.Errorf("cannot unmarshal into immutable dies, create a mutable version first")
	}
	r := &networkingv1.Ingress{}
	err := json.Unmarshal(b, r)
	*d = *d.DieFeed(*r)
	return err
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (d *IngressDie) APIVersion(v string) *IngressDie {
	return d.DieStamp(func(r *networkingv1.Ingress) {
		r.APIVersion = v
	})
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (d *IngressDie) Kind(v string) *IngressDie {
	return d.DieStamp(func(r *networkingv1.Ingress) {
		r.Kind = v
	})
}

// MetadataDie stamps the resource's ObjectMeta field with a mutable die.
func (d *IngressDie) MetadataDie(fn func(d *metav1.ObjectMetaDie)) *IngressDie {
	return d.DieStamp(func(r *networkingv1.Ingress) {
		d := metav1.ObjectMetaBlank.DieImmutable(false).DieFeed(r.ObjectMeta)
		fn(d)
		r.ObjectMeta = d.DieRelease()
	})
}

// SpecDie stamps the resource's spec field with a mutable die.
func (d *IngressDie) SpecDie(fn func(d *IngressSpecDie)) *IngressDie {
	return d.DieStamp(func(r *networkingv1.Ingress) {
		d := IngressSpecBlank.DieImmutable(false).DieFeed(r.Spec)
		fn(d)
		r.Spec = d.DieRelease()
	})
}

// StatusDie stamps the resource's status field with a mutable die.
func (d *IngressDie) StatusDie(fn func(d *IngressStatusDie)) *IngressDie {
	return d.DieStamp(func(r *networkingv1.Ingress) {
		d := IngressStatusBlank.DieImmutable(false).DieFeed(r.Status)
		fn(d)
		r.Status = d.DieRelease()
	})
}

// Spec is the desired state of the Ingress. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
func (d *IngressDie) Spec(v networkingv1.IngressSpec) *IngressDie {
	return d.DieStamp(func(r *networkingv1.Ingress) {
		r.Spec = v
	})
}

// Status is the current state of the Ingress. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
func (d *IngressDie) Status(v networkingv1.IngressStatus) *IngressDie {
	return d.DieStamp(func(r *networkingv1.Ingress) {
		r.Status = v
	})
}

var IngressSpecBlank = (&IngressSpecDie{}).DieFeed(networkingv1.IngressSpec{})

type IngressSpecDie struct {
	mutable bool
	r       networkingv1.IngressSpec
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *IngressSpecDie) DieImmutable(immutable bool) *IngressSpecDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *IngressSpecDie) DieFeed(r networkingv1.IngressSpec) *IngressSpecDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &IngressSpecDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *IngressSpecDie) DieFeedPtr(r *networkingv1.IngressSpec) *IngressSpecDie {
	if r == nil {
		r = &networkingv1.IngressSpec{}
	}
	return d.DieFeed(*r)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *IngressSpecDie) DieFeedJSON(j []byte) *IngressSpecDie {
	r := networkingv1.IngressSpec{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *IngressSpecDie) DieFeedYAML(y []byte) *IngressSpecDie {
	r := networkingv1.IngressSpec{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *IngressSpecDie) DieFeedYAMLFile(name string) *IngressSpecDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *IngressSpecDie) DieFeedRawExtension(raw runtime.RawExtension) *IngressSpecDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *IngressSpecDie) DieRelease() networkingv1.IngressSpec {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *IngressSpecDie) DieReleasePtr() *networkingv1.IngressSpec {
	r := d.DieRelease()
	return &r
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *IngressSpecDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *IngressSpecDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *IngressSpecDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *IngressSpecDie) DieStamp(fn func(r *networkingv1.IngressSpec)) *IngressSpecDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *IngressSpecDie) DeepCopy() *IngressSpecDie {
	r := *d.r.DeepCopy()
	return &IngressSpecDie{
		mutable: d.mutable,
		r:       r,
	}
}

// IngressClassName is the name of an IngressClass cluster resource. Ingress controller implementations use this field to know whether they should be serving this Ingress resource, by a transitive connection (controller -> IngressClass -> Ingress resource). Although the `kubernetes.io/ingress.class` annotation (simple constant name) was never formally defined, it was widely supported by Ingress controllers to create a direct binding between Ingress controller and Ingress resources. Newly created Ingress resources should prefer using the field. However, even though the annotation is officially deprecated, for backwards compatibility reasons, ingress controllers should still honor that annotation if present.
func (d *IngressSpecDie) IngressClassName(v *string) *IngressSpecDie {
	return d.DieStamp(func(r *networkingv1.IngressSpec) {
		r.IngressClassName = v
	})
}

// DefaultBackend is the backend that should handle requests that don't match any rule. If Rules are not specified, DefaultBackend must be specified. If DefaultBackend is not set, the handling of requests that do not match any of the rules will be up to the Ingress controller.
func (d *IngressSpecDie) DefaultBackend(v *networkingv1.IngressBackend) *IngressSpecDie {
	return d.DieStamp(func(r *networkingv1.IngressSpec) {
		r.DefaultBackend = v
	})
}

// TLS configuration. Currently the Ingress only supports a single TLS port, 443. If multiple members of this list specify different hosts, they will be multiplexed on the same port according to the hostname specified through the SNI TLS extension, if the ingress controller fulfilling the ingress supports SNI.
func (d *IngressSpecDie) TLS(v ...networkingv1.IngressTLS) *IngressSpecDie {
	return d.DieStamp(func(r *networkingv1.IngressSpec) {
		r.TLS = v
	})
}

// A list of host rules used to configure the Ingress. If unspecified, or no rule matches, all traffic is sent to the default backend.
func (d *IngressSpecDie) Rules(v ...networkingv1.IngressRule) *IngressSpecDie {
	return d.DieStamp(func(r *networkingv1.IngressSpec) {
		r.Rules = v
	})
}

var IngressBackendBlank = (&IngressBackendDie{}).DieFeed(networkingv1.IngressBackend{})

type IngressBackendDie struct {
	mutable bool
	r       networkingv1.IngressBackend
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *IngressBackendDie) DieImmutable(immutable bool) *IngressBackendDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *IngressBackendDie) DieFeed(r networkingv1.IngressBackend) *IngressBackendDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &IngressBackendDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *IngressBackendDie) DieFeedPtr(r *networkingv1.IngressBackend) *IngressBackendDie {
	if r == nil {
		r = &networkingv1.IngressBackend{}
	}
	return d.DieFeed(*r)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *IngressBackendDie) DieFeedJSON(j []byte) *IngressBackendDie {
	r := networkingv1.IngressBackend{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *IngressBackendDie) DieFeedYAML(y []byte) *IngressBackendDie {
	r := networkingv1.IngressBackend{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *IngressBackendDie) DieFeedYAMLFile(name string) *IngressBackendDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *IngressBackendDie) DieFeedRawExtension(raw runtime.RawExtension) *IngressBackendDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *IngressBackendDie) DieRelease() networkingv1.IngressBackend {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *IngressBackendDie) DieReleasePtr() *networkingv1.IngressBackend {
	r := d.DieRelease()
	return &r
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *IngressBackendDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *IngressBackendDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *IngressBackendDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *IngressBackendDie) DieStamp(fn func(r *networkingv1.IngressBackend)) *IngressBackendDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *IngressBackendDie) DeepCopy() *IngressBackendDie {
	r := *d.r.DeepCopy()
	return &IngressBackendDie{
		mutable: d.mutable,
		r:       r,
	}
}

// Service references a Service as a Backend. This is a mutually exclusive setting with "Resource".
func (d *IngressBackendDie) Service(v *networkingv1.IngressServiceBackend) *IngressBackendDie {
	return d.DieStamp(func(r *networkingv1.IngressBackend) {
		r.Service = v
	})
}

// Resource is an ObjectRef to another Kubernetes resource in the namespace of the Ingress object. If resource is specified, a service.Name and service.Port must not be specified. This is a mutually exclusive setting with "Service".
func (d *IngressBackendDie) Resource(v *corev1.TypedLocalObjectReference) *IngressBackendDie {
	return d.DieStamp(func(r *networkingv1.IngressBackend) {
		r.Resource = v
	})
}

var IngressServiceBackendBlank = (&IngressServiceBackendDie{}).DieFeed(networkingv1.IngressServiceBackend{})

type IngressServiceBackendDie struct {
	mutable bool
	r       networkingv1.IngressServiceBackend
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *IngressServiceBackendDie) DieImmutable(immutable bool) *IngressServiceBackendDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *IngressServiceBackendDie) DieFeed(r networkingv1.IngressServiceBackend) *IngressServiceBackendDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &IngressServiceBackendDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *IngressServiceBackendDie) DieFeedPtr(r *networkingv1.IngressServiceBackend) *IngressServiceBackendDie {
	if r == nil {
		r = &networkingv1.IngressServiceBackend{}
	}
	return d.DieFeed(*r)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *IngressServiceBackendDie) DieFeedJSON(j []byte) *IngressServiceBackendDie {
	r := networkingv1.IngressServiceBackend{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *IngressServiceBackendDie) DieFeedYAML(y []byte) *IngressServiceBackendDie {
	r := networkingv1.IngressServiceBackend{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *IngressServiceBackendDie) DieFeedYAMLFile(name string) *IngressServiceBackendDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *IngressServiceBackendDie) DieFeedRawExtension(raw runtime.RawExtension) *IngressServiceBackendDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *IngressServiceBackendDie) DieRelease() networkingv1.IngressServiceBackend {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *IngressServiceBackendDie) DieReleasePtr() *networkingv1.IngressServiceBackend {
	r := d.DieRelease()
	return &r
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *IngressServiceBackendDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *IngressServiceBackendDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *IngressServiceBackendDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *IngressServiceBackendDie) DieStamp(fn func(r *networkingv1.IngressServiceBackend)) *IngressServiceBackendDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *IngressServiceBackendDie) DeepCopy() *IngressServiceBackendDie {
	r := *d.r.DeepCopy()
	return &IngressServiceBackendDie{
		mutable: d.mutable,
		r:       r,
	}
}

// Name is the referenced service. The service must exist in the same namespace as the Ingress object.
func (d *IngressServiceBackendDie) Name(v string) *IngressServiceBackendDie {
	return d.DieStamp(func(r *networkingv1.IngressServiceBackend) {
		r.Name = v
	})
}

// Port of the referenced service. A port name or port number is required for a IngressServiceBackend.
func (d *IngressServiceBackendDie) Port(v networkingv1.ServiceBackendPort) *IngressServiceBackendDie {
	return d.DieStamp(func(r *networkingv1.IngressServiceBackend) {
		r.Port = v
	})
}

var ServiceBackendPortBlank = (&ServiceBackendPortDie{}).DieFeed(networkingv1.ServiceBackendPort{})

type ServiceBackendPortDie struct {
	mutable bool
	r       networkingv1.ServiceBackendPort
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *ServiceBackendPortDie) DieImmutable(immutable bool) *ServiceBackendPortDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *ServiceBackendPortDie) DieFeed(r networkingv1.ServiceBackendPort) *ServiceBackendPortDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &ServiceBackendPortDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *ServiceBackendPortDie) DieFeedPtr(r *networkingv1.ServiceBackendPort) *ServiceBackendPortDie {
	if r == nil {
		r = &networkingv1.ServiceBackendPort{}
	}
	return d.DieFeed(*r)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *ServiceBackendPortDie) DieFeedJSON(j []byte) *ServiceBackendPortDie {
	r := networkingv1.ServiceBackendPort{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *ServiceBackendPortDie) DieFeedYAML(y []byte) *ServiceBackendPortDie {
	r := networkingv1.ServiceBackendPort{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *ServiceBackendPortDie) DieFeedYAMLFile(name string) *ServiceBackendPortDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *ServiceBackendPortDie) DieFeedRawExtension(raw runtime.RawExtension) *ServiceBackendPortDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *ServiceBackendPortDie) DieRelease() networkingv1.ServiceBackendPort {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *ServiceBackendPortDie) DieReleasePtr() *networkingv1.ServiceBackendPort {
	r := d.DieRelease()
	return &r
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *ServiceBackendPortDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *ServiceBackendPortDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *ServiceBackendPortDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *ServiceBackendPortDie) DieStamp(fn func(r *networkingv1.ServiceBackendPort)) *ServiceBackendPortDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *ServiceBackendPortDie) DeepCopy() *ServiceBackendPortDie {
	r := *d.r.DeepCopy()
	return &ServiceBackendPortDie{
		mutable: d.mutable,
		r:       r,
	}
}

// Name is the name of the port on the Service. This is a mutually exclusive setting with "Number".
func (d *ServiceBackendPortDie) Name(v string) *ServiceBackendPortDie {
	return d.DieStamp(func(r *networkingv1.ServiceBackendPort) {
		r.Name = v
	})
}

// Number is the numerical port number (e.g. 80) on the Service. This is a mutually exclusive setting with "Name".
func (d *ServiceBackendPortDie) Number(v int32) *ServiceBackendPortDie {
	return d.DieStamp(func(r *networkingv1.ServiceBackendPort) {
		r.Number = v
	})
}

var IngressTLSBlank = (&IngressTLSDie{}).DieFeed(networkingv1.IngressTLS{})

type IngressTLSDie struct {
	mutable bool
	r       networkingv1.IngressTLS
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *IngressTLSDie) DieImmutable(immutable bool) *IngressTLSDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *IngressTLSDie) DieFeed(r networkingv1.IngressTLS) *IngressTLSDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &IngressTLSDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *IngressTLSDie) DieFeedPtr(r *networkingv1.IngressTLS) *IngressTLSDie {
	if r == nil {
		r = &networkingv1.IngressTLS{}
	}
	return d.DieFeed(*r)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *IngressTLSDie) DieFeedJSON(j []byte) *IngressTLSDie {
	r := networkingv1.IngressTLS{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *IngressTLSDie) DieFeedYAML(y []byte) *IngressTLSDie {
	r := networkingv1.IngressTLS{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *IngressTLSDie) DieFeedYAMLFile(name string) *IngressTLSDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *IngressTLSDie) DieFeedRawExtension(raw runtime.RawExtension) *IngressTLSDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *IngressTLSDie) DieRelease() networkingv1.IngressTLS {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *IngressTLSDie) DieReleasePtr() *networkingv1.IngressTLS {
	r := d.DieRelease()
	return &r
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *IngressTLSDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *IngressTLSDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *IngressTLSDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *IngressTLSDie) DieStamp(fn func(r *networkingv1.IngressTLS)) *IngressTLSDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *IngressTLSDie) DeepCopy() *IngressTLSDie {
	r := *d.r.DeepCopy()
	return &IngressTLSDie{
		mutable: d.mutable,
		r:       r,
	}
}

// Hosts are a list of hosts included in the TLS certificate. The values in this list must match the name/s used in the tlsSecret. Defaults to the wildcard host setting for the loadbalancer controller fulfilling this Ingress, if left unspecified.
func (d *IngressTLSDie) Hosts(v ...string) *IngressTLSDie {
	return d.DieStamp(func(r *networkingv1.IngressTLS) {
		r.Hosts = v
	})
}

// SecretName is the name of the secret used to terminate TLS traffic on port 443. Field is left optional to allow TLS routing based on SNI hostname alone. If the SNI host in a listener conflicts with the "Host" header field used by an IngressRule, the SNI host is used for termination and value of the Host header is used for routing.
func (d *IngressTLSDie) SecretName(v string) *IngressTLSDie {
	return d.DieStamp(func(r *networkingv1.IngressTLS) {
		r.SecretName = v
	})
}

var IngressRuleBlank = (&IngressRuleDie{}).DieFeed(networkingv1.IngressRule{})

type IngressRuleDie struct {
	mutable bool
	r       networkingv1.IngressRule
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *IngressRuleDie) DieImmutable(immutable bool) *IngressRuleDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *IngressRuleDie) DieFeed(r networkingv1.IngressRule) *IngressRuleDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &IngressRuleDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *IngressRuleDie) DieFeedPtr(r *networkingv1.IngressRule) *IngressRuleDie {
	if r == nil {
		r = &networkingv1.IngressRule{}
	}
	return d.DieFeed(*r)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *IngressRuleDie) DieFeedJSON(j []byte) *IngressRuleDie {
	r := networkingv1.IngressRule{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *IngressRuleDie) DieFeedYAML(y []byte) *IngressRuleDie {
	r := networkingv1.IngressRule{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *IngressRuleDie) DieFeedYAMLFile(name string) *IngressRuleDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *IngressRuleDie) DieFeedRawExtension(raw runtime.RawExtension) *IngressRuleDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *IngressRuleDie) DieRelease() networkingv1.IngressRule {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *IngressRuleDie) DieReleasePtr() *networkingv1.IngressRule {
	r := d.DieRelease()
	return &r
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *IngressRuleDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *IngressRuleDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *IngressRuleDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *IngressRuleDie) DieStamp(fn func(r *networkingv1.IngressRule)) *IngressRuleDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *IngressRuleDie) DeepCopy() *IngressRuleDie {
	r := *d.r.DeepCopy()
	return &IngressRuleDie{
		mutable: d.mutable,
		r:       r,
	}
}

// Host is the fully qualified domain name of a network host, as defined by RFC 3986. Note the following deviations from the "host" part of the URI as defined in RFC 3986: 1. IPs are not allowed. Currently an IngressRuleValue can only apply to the IP in the Spec of the parent Ingress. 2. The `:` delimiter is not respected because ports are not allowed. Currently the port of an Ingress is implicitly :80 for http and :443 for https. Both these may change in the future. Incoming requests are matched against the host before the IngressRuleValue. If the host is unspecified, the Ingress routes all traffic based on the specified IngressRuleValue.
//
// Host can be "precise" which is a domain name without the terminating dot of a network host (e.g. "foo.bar.com") or "wildcard", which is a domain name prefixed with a single wildcard label (e.g. "*.foo.com"). The wildcard character '*' must appear by itself as the first DNS label and matches only a single label. You cannot have a wildcard label by itself (e.g. Host == "*"). Requests will be matched against the Host field in the following way: 1. If Host is precise, the request matches this rule if the http host header is equal to Host. 2. If Host is a wildcard, then the request matches this rule if the http host header is to equal to the suffix (removing the first label) of the wildcard rule.
func (d *IngressRuleDie) Host(v string) *IngressRuleDie {
	return d.DieStamp(func(r *networkingv1.IngressRule) {
		r.Host = v
	})
}

// IngressRuleValue represents a rule to route requests for this IngressRule. If unspecified, the rule defaults to a http catch-all. Whether that sends just traffic matching the host to the default backend or all traffic to the default backend, is left to the controller fulfilling the Ingress. Http is currently the only supported IngressRuleValue.
func (d *IngressRuleDie) IngressRuleValue(v networkingv1.IngressRuleValue) *IngressRuleDie {
	return d.DieStamp(func(r *networkingv1.IngressRule) {
		r.IngressRuleValue = v
	})
}

var HTTPIngressRuleValueBlank = (&HTTPIngressRuleValueDie{}).DieFeed(networkingv1.HTTPIngressRuleValue{})

type HTTPIngressRuleValueDie struct {
	mutable bool
	r       networkingv1.HTTPIngressRuleValue
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *HTTPIngressRuleValueDie) DieImmutable(immutable bool) *HTTPIngressRuleValueDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *HTTPIngressRuleValueDie) DieFeed(r networkingv1.HTTPIngressRuleValue) *HTTPIngressRuleValueDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &HTTPIngressRuleValueDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *HTTPIngressRuleValueDie) DieFeedPtr(r *networkingv1.HTTPIngressRuleValue) *HTTPIngressRuleValueDie {
	if r == nil {
		r = &networkingv1.HTTPIngressRuleValue{}
	}
	return d.DieFeed(*r)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *HTTPIngressRuleValueDie) DieFeedJSON(j []byte) *HTTPIngressRuleValueDie {
	r := networkingv1.HTTPIngressRuleValue{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *HTTPIngressRuleValueDie) DieFeedYAML(y []byte) *HTTPIngressRuleValueDie {
	r := networkingv1.HTTPIngressRuleValue{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *HTTPIngressRuleValueDie) DieFeedYAMLFile(name string) *HTTPIngressRuleValueDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *HTTPIngressRuleValueDie) DieFeedRawExtension(raw runtime.RawExtension) *HTTPIngressRuleValueDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *HTTPIngressRuleValueDie) DieRelease() networkingv1.HTTPIngressRuleValue {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *HTTPIngressRuleValueDie) DieReleasePtr() *networkingv1.HTTPIngressRuleValue {
	r := d.DieRelease()
	return &r
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *HTTPIngressRuleValueDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *HTTPIngressRuleValueDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *HTTPIngressRuleValueDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *HTTPIngressRuleValueDie) DieStamp(fn func(r *networkingv1.HTTPIngressRuleValue)) *HTTPIngressRuleValueDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *HTTPIngressRuleValueDie) DeepCopy() *HTTPIngressRuleValueDie {
	r := *d.r.DeepCopy()
	return &HTTPIngressRuleValueDie{
		mutable: d.mutable,
		r:       r,
	}
}

// A collection of paths that map requests to backends.
func (d *HTTPIngressRuleValueDie) Paths(v ...networkingv1.HTTPIngressPath) *HTTPIngressRuleValueDie {
	return d.DieStamp(func(r *networkingv1.HTTPIngressRuleValue) {
		r.Paths = v
	})
}

var HTTPIngressPathBlank = (&HTTPIngressPathDie{}).DieFeed(networkingv1.HTTPIngressPath{})

type HTTPIngressPathDie struct {
	mutable bool
	r       networkingv1.HTTPIngressPath
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *HTTPIngressPathDie) DieImmutable(immutable bool) *HTTPIngressPathDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *HTTPIngressPathDie) DieFeed(r networkingv1.HTTPIngressPath) *HTTPIngressPathDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &HTTPIngressPathDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *HTTPIngressPathDie) DieFeedPtr(r *networkingv1.HTTPIngressPath) *HTTPIngressPathDie {
	if r == nil {
		r = &networkingv1.HTTPIngressPath{}
	}
	return d.DieFeed(*r)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *HTTPIngressPathDie) DieFeedJSON(j []byte) *HTTPIngressPathDie {
	r := networkingv1.HTTPIngressPath{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *HTTPIngressPathDie) DieFeedYAML(y []byte) *HTTPIngressPathDie {
	r := networkingv1.HTTPIngressPath{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *HTTPIngressPathDie) DieFeedYAMLFile(name string) *HTTPIngressPathDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *HTTPIngressPathDie) DieFeedRawExtension(raw runtime.RawExtension) *HTTPIngressPathDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *HTTPIngressPathDie) DieRelease() networkingv1.HTTPIngressPath {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *HTTPIngressPathDie) DieReleasePtr() *networkingv1.HTTPIngressPath {
	r := d.DieRelease()
	return &r
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *HTTPIngressPathDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *HTTPIngressPathDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *HTTPIngressPathDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *HTTPIngressPathDie) DieStamp(fn func(r *networkingv1.HTTPIngressPath)) *HTTPIngressPathDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *HTTPIngressPathDie) DeepCopy() *HTTPIngressPathDie {
	r := *d.r.DeepCopy()
	return &HTTPIngressPathDie{
		mutable: d.mutable,
		r:       r,
	}
}

// Path is matched against the path of an incoming request. Currently it can contain characters disallowed from the conventional "path" part of a URL as defined by RFC 3986. Paths must begin with a '/' and must be present when using PathType with value "Exact" or "Prefix".
func (d *HTTPIngressPathDie) Path(v string) *HTTPIngressPathDie {
	return d.DieStamp(func(r *networkingv1.HTTPIngressPath) {
		r.Path = v
	})
}

// PathType determines the interpretation of the Path matching. PathType can be one of the following values: * Exact: Matches the URL path exactly. * Prefix: Matches based on a URL path prefix split by '/'. Matching is done on a path element by element basis. A path element refers is the list of labels in the path split by the '/' separator. A request is a match for path p if every p is an element-wise prefix of p of the request path. Note that if the last element of the path is a substring of the last element in request path, it is not a match (e.g. /foo/bar matches /foo/bar/baz, but does not match /foo/barbaz). * ImplementationSpecific: Interpretation of the Path matching is up to the IngressClass. Implementations can treat this as a separate PathType or treat it identically to Prefix or Exact path types. Implementations are required to support all path types.
func (d *HTTPIngressPathDie) PathType(v *networkingv1.PathType) *HTTPIngressPathDie {
	return d.DieStamp(func(r *networkingv1.HTTPIngressPath) {
		r.PathType = v
	})
}

// Backend defines the referenced service endpoint to which the traffic will be forwarded to.
func (d *HTTPIngressPathDie) Backend(v networkingv1.IngressBackend) *HTTPIngressPathDie {
	return d.DieStamp(func(r *networkingv1.HTTPIngressPath) {
		r.Backend = v
	})
}

var IngressStatusBlank = (&IngressStatusDie{}).DieFeed(networkingv1.IngressStatus{})

type IngressStatusDie struct {
	mutable bool
	r       networkingv1.IngressStatus
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *IngressStatusDie) DieImmutable(immutable bool) *IngressStatusDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *IngressStatusDie) DieFeed(r networkingv1.IngressStatus) *IngressStatusDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &IngressStatusDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *IngressStatusDie) DieFeedPtr(r *networkingv1.IngressStatus) *IngressStatusDie {
	if r == nil {
		r = &networkingv1.IngressStatus{}
	}
	return d.DieFeed(*r)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *IngressStatusDie) DieFeedJSON(j []byte) *IngressStatusDie {
	r := networkingv1.IngressStatus{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *IngressStatusDie) DieFeedYAML(y []byte) *IngressStatusDie {
	r := networkingv1.IngressStatus{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *IngressStatusDie) DieFeedYAMLFile(name string) *IngressStatusDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *IngressStatusDie) DieFeedRawExtension(raw runtime.RawExtension) *IngressStatusDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *IngressStatusDie) DieRelease() networkingv1.IngressStatus {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *IngressStatusDie) DieReleasePtr() *networkingv1.IngressStatus {
	r := d.DieRelease()
	return &r
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *IngressStatusDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *IngressStatusDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *IngressStatusDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *IngressStatusDie) DieStamp(fn func(r *networkingv1.IngressStatus)) *IngressStatusDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *IngressStatusDie) DeepCopy() *IngressStatusDie {
	r := *d.r.DeepCopy()
	return &IngressStatusDie{
		mutable: d.mutable,
		r:       r,
	}
}

// LoadBalancer contains the current status of the load-balancer.
func (d *IngressStatusDie) LoadBalancer(v networkingv1.IngressLoadBalancerStatus) *IngressStatusDie {
	return d.DieStamp(func(r *networkingv1.IngressStatus) {
		r.LoadBalancer = v
	})
}

var IngressLoadBalancerStatusBlank = (&IngressLoadBalancerStatusDie{}).DieFeed(networkingv1.IngressLoadBalancerStatus{})

type IngressLoadBalancerStatusDie struct {
	mutable bool
	r       networkingv1.IngressLoadBalancerStatus
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *IngressLoadBalancerStatusDie) DieImmutable(immutable bool) *IngressLoadBalancerStatusDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *IngressLoadBalancerStatusDie) DieFeed(r networkingv1.IngressLoadBalancerStatus) *IngressLoadBalancerStatusDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &IngressLoadBalancerStatusDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *IngressLoadBalancerStatusDie) DieFeedPtr(r *networkingv1.IngressLoadBalancerStatus) *IngressLoadBalancerStatusDie {
	if r == nil {
		r = &networkingv1.IngressLoadBalancerStatus{}
	}
	return d.DieFeed(*r)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *IngressLoadBalancerStatusDie) DieFeedJSON(j []byte) *IngressLoadBalancerStatusDie {
	r := networkingv1.IngressLoadBalancerStatus{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *IngressLoadBalancerStatusDie) DieFeedYAML(y []byte) *IngressLoadBalancerStatusDie {
	r := networkingv1.IngressLoadBalancerStatus{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *IngressLoadBalancerStatusDie) DieFeedYAMLFile(name string) *IngressLoadBalancerStatusDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *IngressLoadBalancerStatusDie) DieFeedRawExtension(raw runtime.RawExtension) *IngressLoadBalancerStatusDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *IngressLoadBalancerStatusDie) DieRelease() networkingv1.IngressLoadBalancerStatus {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *IngressLoadBalancerStatusDie) DieReleasePtr() *networkingv1.IngressLoadBalancerStatus {
	r := d.DieRelease()
	return &r
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *IngressLoadBalancerStatusDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *IngressLoadBalancerStatusDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *IngressLoadBalancerStatusDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *IngressLoadBalancerStatusDie) DieStamp(fn func(r *networkingv1.IngressLoadBalancerStatus)) *IngressLoadBalancerStatusDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *IngressLoadBalancerStatusDie) DeepCopy() *IngressLoadBalancerStatusDie {
	r := *d.r.DeepCopy()
	return &IngressLoadBalancerStatusDie{
		mutable: d.mutable,
		r:       r,
	}
}

// Ingress is a list containing ingress points for the load-balancer.
func (d *IngressLoadBalancerStatusDie) Ingress(v ...networkingv1.IngressLoadBalancerIngress) *IngressLoadBalancerStatusDie {
	return d.DieStamp(func(r *networkingv1.IngressLoadBalancerStatus) {
		r.Ingress = v
	})
}

var IngressLoadBalancerIngressBlank = (&IngressLoadBalancerIngressDie{}).DieFeed(networkingv1.IngressLoadBalancerIngress{})

type IngressLoadBalancerIngressDie struct {
	mutable bool
	r       networkingv1.IngressLoadBalancerIngress
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *IngressLoadBalancerIngressDie) DieImmutable(immutable bool) *IngressLoadBalancerIngressDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *IngressLoadBalancerIngressDie) DieFeed(r networkingv1.IngressLoadBalancerIngress) *IngressLoadBalancerIngressDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &IngressLoadBalancerIngressDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *IngressLoadBalancerIngressDie) DieFeedPtr(r *networkingv1.IngressLoadBalancerIngress) *IngressLoadBalancerIngressDie {
	if r == nil {
		r = &networkingv1.IngressLoadBalancerIngress{}
	}
	return d.DieFeed(*r)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *IngressLoadBalancerIngressDie) DieFeedJSON(j []byte) *IngressLoadBalancerIngressDie {
	r := networkingv1.IngressLoadBalancerIngress{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *IngressLoadBalancerIngressDie) DieFeedYAML(y []byte) *IngressLoadBalancerIngressDie {
	r := networkingv1.IngressLoadBalancerIngress{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *IngressLoadBalancerIngressDie) DieFeedYAMLFile(name string) *IngressLoadBalancerIngressDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *IngressLoadBalancerIngressDie) DieFeedRawExtension(raw runtime.RawExtension) *IngressLoadBalancerIngressDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *IngressLoadBalancerIngressDie) DieRelease() networkingv1.IngressLoadBalancerIngress {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *IngressLoadBalancerIngressDie) DieReleasePtr() *networkingv1.IngressLoadBalancerIngress {
	r := d.DieRelease()
	return &r
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *IngressLoadBalancerIngressDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *IngressLoadBalancerIngressDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *IngressLoadBalancerIngressDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *IngressLoadBalancerIngressDie) DieStamp(fn func(r *networkingv1.IngressLoadBalancerIngress)) *IngressLoadBalancerIngressDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *IngressLoadBalancerIngressDie) DeepCopy() *IngressLoadBalancerIngressDie {
	r := *d.r.DeepCopy()
	return &IngressLoadBalancerIngressDie{
		mutable: d.mutable,
		r:       r,
	}
}

// IP is set for load-balancer ingress points that are IP based.
func (d *IngressLoadBalancerIngressDie) IP(v string) *IngressLoadBalancerIngressDie {
	return d.DieStamp(func(r *networkingv1.IngressLoadBalancerIngress) {
		r.IP = v
	})
}

// Hostname is set for load-balancer ingress points that are DNS based.
func (d *IngressLoadBalancerIngressDie) Hostname(v string) *IngressLoadBalancerIngressDie {
	return d.DieStamp(func(r *networkingv1.IngressLoadBalancerIngress) {
		r.Hostname = v
	})
}

// Ports provides information about the ports exposed by this LoadBalancer.
func (d *IngressLoadBalancerIngressDie) Ports(v ...networkingv1.IngressPortStatus) *IngressLoadBalancerIngressDie {
	return d.DieStamp(func(r *networkingv1.IngressLoadBalancerIngress) {
		r.Ports = v
	})
}

var IngressPortStatusBlank = (&IngressPortStatusDie{}).DieFeed(networkingv1.IngressPortStatus{})

type IngressPortStatusDie struct {
	mutable bool
	r       networkingv1.IngressPortStatus
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *IngressPortStatusDie) DieImmutable(immutable bool) *IngressPortStatusDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *IngressPortStatusDie) DieFeed(r networkingv1.IngressPortStatus) *IngressPortStatusDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &IngressPortStatusDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *IngressPortStatusDie) DieFeedPtr(r *networkingv1.IngressPortStatus) *IngressPortStatusDie {
	if r == nil {
		r = &networkingv1.IngressPortStatus{}
	}
	return d.DieFeed(*r)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *IngressPortStatusDie) DieFeedJSON(j []byte) *IngressPortStatusDie {
	r := networkingv1.IngressPortStatus{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *IngressPortStatusDie) DieFeedYAML(y []byte) *IngressPortStatusDie {
	r := networkingv1.IngressPortStatus{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *IngressPortStatusDie) DieFeedYAMLFile(name string) *IngressPortStatusDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *IngressPortStatusDie) DieFeedRawExtension(raw runtime.RawExtension) *IngressPortStatusDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *IngressPortStatusDie) DieRelease() networkingv1.IngressPortStatus {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *IngressPortStatusDie) DieReleasePtr() *networkingv1.IngressPortStatus {
	r := d.DieRelease()
	return &r
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *IngressPortStatusDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *IngressPortStatusDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *IngressPortStatusDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *IngressPortStatusDie) DieStamp(fn func(r *networkingv1.IngressPortStatus)) *IngressPortStatusDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *IngressPortStatusDie) DeepCopy() *IngressPortStatusDie {
	r := *d.r.DeepCopy()
	return &IngressPortStatusDie{
		mutable: d.mutable,
		r:       r,
	}
}

// Port is the port number of the ingress port.
func (d *IngressPortStatusDie) Port(v int32) *IngressPortStatusDie {
	return d.DieStamp(func(r *networkingv1.IngressPortStatus) {
		r.Port = v
	})
}

// Protocol is the protocol of the ingress port. The supported values are: "TCP", "UDP", "SCTP"
func (d *IngressPortStatusDie) Protocol(v corev1.Protocol) *IngressPortStatusDie {
	return d.DieStamp(func(r *networkingv1.IngressPortStatus) {
		r.Protocol = v
	})
}

// Error is to record the problem with the service port The format of the error shall comply with the following rules: - built-in error values shall be specified in this file and those shall use CamelCase names - cloud provider specific error values must have names that comply with the format foo.example.com/CamelCase. --- The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
func (d *IngressPortStatusDie) Error(v *string) *IngressPortStatusDie {
	return d.DieStamp(func(r *networkingv1.IngressPortStatus) {
		r.Error = v
	})
}

var IngressClassBlank = (&IngressClassDie{}).DieFeed(networkingv1.IngressClass{})

type IngressClassDie struct {
	metav1.FrozenObjectMeta
	mutable bool
	r       networkingv1.IngressClass
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *IngressClassDie) DieImmutable(immutable bool) *IngressClassDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *IngressClassDie) DieFeed(r networkingv1.IngressClass) *IngressClassDie {
	if d.mutable {
		d.FrozenObjectMeta = metav1.FreezeObjectMeta(r.ObjectMeta)
		d.r = r
		return d
	}
	return &IngressClassDie{
		FrozenObjectMeta: metav1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *IngressClassDie) DieFeedPtr(r *networkingv1.IngressClass) *IngressClassDie {
	if r == nil {
		r = &networkingv1.IngressClass{}
	}
	return d.DieFeed(*r)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *IngressClassDie) DieFeedJSON(j []byte) *IngressClassDie {
	r := networkingv1.IngressClass{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *IngressClassDie) DieFeedYAML(y []byte) *IngressClassDie {
	r := networkingv1.IngressClass{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *IngressClassDie) DieFeedYAMLFile(name string) *IngressClassDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *IngressClassDie) DieFeedRawExtension(raw runtime.RawExtension) *IngressClassDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *IngressClassDie) DieRelease() networkingv1.IngressClass {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *IngressClassDie) DieReleasePtr() *networkingv1.IngressClass {
	r := d.DieRelease()
	return &r
}

// DieReleaseUnstructured returns the resource managed by the die as an unstructured object. Panics on error.
func (d *IngressClassDie) DieReleaseUnstructured() *unstructured.Unstructured {
	r := d.DieReleasePtr()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(r)
	if err != nil {
		panic(err)
	}
	return &unstructured.Unstructured{
		Object: u,
	}
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *IngressClassDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *IngressClassDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *IngressClassDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *IngressClassDie) DieStamp(fn func(r *networkingv1.IngressClass)) *IngressClassDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *IngressClassDie) DeepCopy() *IngressClassDie {
	r := *d.r.DeepCopy()
	return &IngressClassDie{
		FrozenObjectMeta: metav1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
	}
}

var _ runtime.Object = (*IngressClassDie)(nil)

func (d *IngressClassDie) DeepCopyObject() runtime.Object {
	return d.r.DeepCopy()
}

func (d *IngressClassDie) GetObjectKind() schema.ObjectKind {
	r := d.DieRelease()
	return r.GetObjectKind()
}

func (d *IngressClassDie) MarshalJSON() ([]byte, error) {
	return json.Marshal(d.r)
}

func (d *IngressClassDie) UnmarshalJSON(b []byte) error {
	if d == IngressClassBlank {
		return fmtx.Errorf("cannot unmarshal into the blank die, create a copy first")
	}
	if !d.mutable {
		return fmtx.Errorf("cannot unmarshal into immutable dies, create a mutable version first")
	}
	r := &networkingv1.IngressClass{}
	err := json.Unmarshal(b, r)
	*d = *d.DieFeed(*r)
	return err
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (d *IngressClassDie) APIVersion(v string) *IngressClassDie {
	return d.DieStamp(func(r *networkingv1.IngressClass) {
		r.APIVersion = v
	})
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (d *IngressClassDie) Kind(v string) *IngressClassDie {
	return d.DieStamp(func(r *networkingv1.IngressClass) {
		r.Kind = v
	})
}

// MetadataDie stamps the resource's ObjectMeta field with a mutable die.
func (d *IngressClassDie) MetadataDie(fn func(d *metav1.ObjectMetaDie)) *IngressClassDie {
	return d.DieStamp(func(r *networkingv1.IngressClass) {
		d := metav1.ObjectMetaBlank.DieImmutable(false).DieFeed(r.ObjectMeta)
		fn(d)
		r.ObjectMeta = d.DieRelease()
	})
}

// SpecDie stamps the resource's spec field with a mutable die.
func (d *IngressClassDie) SpecDie(fn func(d *IngressClassSpecDie)) *IngressClassDie {
	return d.DieStamp(func(r *networkingv1.IngressClass) {
		d := IngressClassSpecBlank.DieImmutable(false).DieFeed(r.Spec)
		fn(d)
		r.Spec = d.DieRelease()
	})
}

// Spec is the desired state of the IngressClass. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
func (d *IngressClassDie) Spec(v networkingv1.IngressClassSpec) *IngressClassDie {
	return d.DieStamp(func(r *networkingv1.IngressClass) {
		r.Spec = v
	})
}

var IngressClassSpecBlank = (&IngressClassSpecDie{}).DieFeed(networkingv1.IngressClassSpec{})

type IngressClassSpecDie struct {
	mutable bool
	r       networkingv1.IngressClassSpec
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *IngressClassSpecDie) DieImmutable(immutable bool) *IngressClassSpecDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *IngressClassSpecDie) DieFeed(r networkingv1.IngressClassSpec) *IngressClassSpecDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &IngressClassSpecDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *IngressClassSpecDie) DieFeedPtr(r *networkingv1.IngressClassSpec) *IngressClassSpecDie {
	if r == nil {
		r = &networkingv1.IngressClassSpec{}
	}
	return d.DieFeed(*r)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *IngressClassSpecDie) DieFeedJSON(j []byte) *IngressClassSpecDie {
	r := networkingv1.IngressClassSpec{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *IngressClassSpecDie) DieFeedYAML(y []byte) *IngressClassSpecDie {
	r := networkingv1.IngressClassSpec{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *IngressClassSpecDie) DieFeedYAMLFile(name string) *IngressClassSpecDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *IngressClassSpecDie) DieFeedRawExtension(raw runtime.RawExtension) *IngressClassSpecDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *IngressClassSpecDie) DieRelease() networkingv1.IngressClassSpec {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *IngressClassSpecDie) DieReleasePtr() *networkingv1.IngressClassSpec {
	r := d.DieRelease()
	return &r
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *IngressClassSpecDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *IngressClassSpecDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *IngressClassSpecDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *IngressClassSpecDie) DieStamp(fn func(r *networkingv1.IngressClassSpec)) *IngressClassSpecDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *IngressClassSpecDie) DeepCopy() *IngressClassSpecDie {
	r := *d.r.DeepCopy()
	return &IngressClassSpecDie{
		mutable: d.mutable,
		r:       r,
	}
}

// Controller refers to the name of the controller that should handle this class. This allows for different "flavors" that are controlled by the same controller. For example, you may have different Parameters for the same implementing controller. This should be specified as a domain-prefixed path no more than 250 characters in length, e.g. "acme.io/ingress-controller". This field is immutable.
func (d *IngressClassSpecDie) Controller(v string) *IngressClassSpecDie {
	return d.DieStamp(func(r *networkingv1.IngressClassSpec) {
		r.Controller = v
	})
}

// Parameters is a link to a custom resource containing additional configuration for the controller. This is optional if the controller does not require extra parameters.
func (d *IngressClassSpecDie) Parameters(v *networkingv1.IngressClassParametersReference) *IngressClassSpecDie {
	return d.DieStamp(func(r *networkingv1.IngressClassSpec) {
		r.Parameters = v
	})
}

var IngressClassParametersReferenceBlank = (&IngressClassParametersReferenceDie{}).DieFeed(networkingv1.IngressClassParametersReference{})

type IngressClassParametersReferenceDie struct {
	mutable bool
	r       networkingv1.IngressClassParametersReference
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *IngressClassParametersReferenceDie) DieImmutable(immutable bool) *IngressClassParametersReferenceDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *IngressClassParametersReferenceDie) DieFeed(r networkingv1.IngressClassParametersReference) *IngressClassParametersReferenceDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &IngressClassParametersReferenceDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *IngressClassParametersReferenceDie) DieFeedPtr(r *networkingv1.IngressClassParametersReference) *IngressClassParametersReferenceDie {
	if r == nil {
		r = &networkingv1.IngressClassParametersReference{}
	}
	return d.DieFeed(*r)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *IngressClassParametersReferenceDie) DieFeedJSON(j []byte) *IngressClassParametersReferenceDie {
	r := networkingv1.IngressClassParametersReference{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *IngressClassParametersReferenceDie) DieFeedYAML(y []byte) *IngressClassParametersReferenceDie {
	r := networkingv1.IngressClassParametersReference{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *IngressClassParametersReferenceDie) DieFeedYAMLFile(name string) *IngressClassParametersReferenceDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *IngressClassParametersReferenceDie) DieFeedRawExtension(raw runtime.RawExtension) *IngressClassParametersReferenceDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *IngressClassParametersReferenceDie) DieRelease() networkingv1.IngressClassParametersReference {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *IngressClassParametersReferenceDie) DieReleasePtr() *networkingv1.IngressClassParametersReference {
	r := d.DieRelease()
	return &r
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *IngressClassParametersReferenceDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *IngressClassParametersReferenceDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *IngressClassParametersReferenceDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *IngressClassParametersReferenceDie) DieStamp(fn func(r *networkingv1.IngressClassParametersReference)) *IngressClassParametersReferenceDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *IngressClassParametersReferenceDie) DeepCopy() *IngressClassParametersReferenceDie {
	r := *d.r.DeepCopy()
	return &IngressClassParametersReferenceDie{
		mutable: d.mutable,
		r:       r,
	}
}

// APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
func (d *IngressClassParametersReferenceDie) APIGroup(v *string) *IngressClassParametersReferenceDie {
	return d.DieStamp(func(r *networkingv1.IngressClassParametersReference) {
		r.APIGroup = v
	})
}

// Kind is the type of resource being referenced.
func (d *IngressClassParametersReferenceDie) Kind(v string) *IngressClassParametersReferenceDie {
	return d.DieStamp(func(r *networkingv1.IngressClassParametersReference) {
		r.Kind = v
	})
}

// Name is the name of resource being referenced.
func (d *IngressClassParametersReferenceDie) Name(v string) *IngressClassParametersReferenceDie {
	return d.DieStamp(func(r *networkingv1.IngressClassParametersReference) {
		r.Name = v
	})
}

// Scope represents if this refers to a cluster or namespace scoped resource. This may be set to "Cluster" (default) or "Namespace".
func (d *IngressClassParametersReferenceDie) Scope(v *string) *IngressClassParametersReferenceDie {
	return d.DieStamp(func(r *networkingv1.IngressClassParametersReference) {
		r.Scope = v
	})
}

// Namespace is the namespace of the resource being referenced. This field is required when scope is set to "Namespace" and must be unset when scope is set to "Cluster".
func (d *IngressClassParametersReferenceDie) Namespace(v *string) *IngressClassParametersReferenceDie {
	return d.DieStamp(func(r *networkingv1.IngressClassParametersReference) {
		r.Namespace = v
	})
}

var NetworkPolicyBlank = (&NetworkPolicyDie{}).DieFeed(networkingv1.NetworkPolicy{})

type NetworkPolicyDie struct {
	metav1.FrozenObjectMeta
	mutable bool
	r       networkingv1.NetworkPolicy
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *NetworkPolicyDie) DieImmutable(immutable bool) *NetworkPolicyDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *NetworkPolicyDie) DieFeed(r networkingv1.NetworkPolicy) *NetworkPolicyDie {
	if d.mutable {
		d.FrozenObjectMeta = metav1.FreezeObjectMeta(r.ObjectMeta)
		d.r = r
		return d
	}
	return &NetworkPolicyDie{
		FrozenObjectMeta: metav1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *NetworkPolicyDie) DieFeedPtr(r *networkingv1.NetworkPolicy) *NetworkPolicyDie {
	if r == nil {
		r = &networkingv1.NetworkPolicy{}
	}
	return d.DieFeed(*r)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *NetworkPolicyDie) DieFeedJSON(j []byte) *NetworkPolicyDie {
	r := networkingv1.NetworkPolicy{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *NetworkPolicyDie) DieFeedYAML(y []byte) *NetworkPolicyDie {
	r := networkingv1.NetworkPolicy{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *NetworkPolicyDie) DieFeedYAMLFile(name string) *NetworkPolicyDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *NetworkPolicyDie) DieFeedRawExtension(raw runtime.RawExtension) *NetworkPolicyDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *NetworkPolicyDie) DieRelease() networkingv1.NetworkPolicy {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *NetworkPolicyDie) DieReleasePtr() *networkingv1.NetworkPolicy {
	r := d.DieRelease()
	return &r
}

// DieReleaseUnstructured returns the resource managed by the die as an unstructured object. Panics on error.
func (d *NetworkPolicyDie) DieReleaseUnstructured() *unstructured.Unstructured {
	r := d.DieReleasePtr()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(r)
	if err != nil {
		panic(err)
	}
	return &unstructured.Unstructured{
		Object: u,
	}
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *NetworkPolicyDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *NetworkPolicyDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *NetworkPolicyDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *NetworkPolicyDie) DieStamp(fn func(r *networkingv1.NetworkPolicy)) *NetworkPolicyDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *NetworkPolicyDie) DeepCopy() *NetworkPolicyDie {
	r := *d.r.DeepCopy()
	return &NetworkPolicyDie{
		FrozenObjectMeta: metav1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
	}
}

var _ runtime.Object = (*NetworkPolicyDie)(nil)

func (d *NetworkPolicyDie) DeepCopyObject() runtime.Object {
	return d.r.DeepCopy()
}

func (d *NetworkPolicyDie) GetObjectKind() schema.ObjectKind {
	r := d.DieRelease()
	return r.GetObjectKind()
}

func (d *NetworkPolicyDie) MarshalJSON() ([]byte, error) {
	return json.Marshal(d.r)
}

func (d *NetworkPolicyDie) UnmarshalJSON(b []byte) error {
	if d == NetworkPolicyBlank {
		return fmtx.Errorf("cannot unmarshal into the blank die, create a copy first")
	}
	if !d.mutable {
		return fmtx.Errorf("cannot unmarshal into immutable dies, create a mutable version first")
	}
	r := &networkingv1.NetworkPolicy{}
	err := json.Unmarshal(b, r)
	*d = *d.DieFeed(*r)
	return err
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (d *NetworkPolicyDie) APIVersion(v string) *NetworkPolicyDie {
	return d.DieStamp(func(r *networkingv1.NetworkPolicy) {
		r.APIVersion = v
	})
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (d *NetworkPolicyDie) Kind(v string) *NetworkPolicyDie {
	return d.DieStamp(func(r *networkingv1.NetworkPolicy) {
		r.Kind = v
	})
}

// MetadataDie stamps the resource's ObjectMeta field with a mutable die.
func (d *NetworkPolicyDie) MetadataDie(fn func(d *metav1.ObjectMetaDie)) *NetworkPolicyDie {
	return d.DieStamp(func(r *networkingv1.NetworkPolicy) {
		d := metav1.ObjectMetaBlank.DieImmutable(false).DieFeed(r.ObjectMeta)
		fn(d)
		r.ObjectMeta = d.DieRelease()
	})
}

// SpecDie stamps the resource's spec field with a mutable die.
func (d *NetworkPolicyDie) SpecDie(fn func(d *NetworkPolicySpecDie)) *NetworkPolicyDie {
	return d.DieStamp(func(r *networkingv1.NetworkPolicy) {
		d := NetworkPolicySpecBlank.DieImmutable(false).DieFeed(r.Spec)
		fn(d)
		r.Spec = d.DieRelease()
	})
}

// StatusDie stamps the resource's status field with a mutable die.
func (d *NetworkPolicyDie) StatusDie(fn func(d *NetworkPolicyStatusDie)) *NetworkPolicyDie {
	return d.DieStamp(func(r *networkingv1.NetworkPolicy) {
		d := NetworkPolicyStatusBlank.DieImmutable(false).DieFeed(r.Status)
		fn(d)
		r.Status = d.DieRelease()
	})
}

// Specification of the desired behavior for this NetworkPolicy.
func (d *NetworkPolicyDie) Spec(v networkingv1.NetworkPolicySpec) *NetworkPolicyDie {
	return d.DieStamp(func(r *networkingv1.NetworkPolicy) {
		r.Spec = v
	})
}

// Status is the current state of the NetworkPolicy. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
func (d *NetworkPolicyDie) Status(v networkingv1.NetworkPolicyStatus) *NetworkPolicyDie {
	return d.DieStamp(func(r *networkingv1.NetworkPolicy) {
		r.Status = v
	})
}

var NetworkPolicySpecBlank = (&NetworkPolicySpecDie{}).DieFeed(networkingv1.NetworkPolicySpec{})

type NetworkPolicySpecDie struct {
	mutable bool
	r       networkingv1.NetworkPolicySpec
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *NetworkPolicySpecDie) DieImmutable(immutable bool) *NetworkPolicySpecDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *NetworkPolicySpecDie) DieFeed(r networkingv1.NetworkPolicySpec) *NetworkPolicySpecDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &NetworkPolicySpecDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *NetworkPolicySpecDie) DieFeedPtr(r *networkingv1.NetworkPolicySpec) *NetworkPolicySpecDie {
	if r == nil {
		r = &networkingv1.NetworkPolicySpec{}
	}
	return d.DieFeed(*r)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *NetworkPolicySpecDie) DieFeedJSON(j []byte) *NetworkPolicySpecDie {
	r := networkingv1.NetworkPolicySpec{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *NetworkPolicySpecDie) DieFeedYAML(y []byte) *NetworkPolicySpecDie {
	r := networkingv1.NetworkPolicySpec{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *NetworkPolicySpecDie) DieFeedYAMLFile(name string) *NetworkPolicySpecDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *NetworkPolicySpecDie) DieFeedRawExtension(raw runtime.RawExtension) *NetworkPolicySpecDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *NetworkPolicySpecDie) DieRelease() networkingv1.NetworkPolicySpec {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *NetworkPolicySpecDie) DieReleasePtr() *networkingv1.NetworkPolicySpec {
	r := d.DieRelease()
	return &r
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *NetworkPolicySpecDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *NetworkPolicySpecDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *NetworkPolicySpecDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *NetworkPolicySpecDie) DieStamp(fn func(r *networkingv1.NetworkPolicySpec)) *NetworkPolicySpecDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *NetworkPolicySpecDie) DeepCopy() *NetworkPolicySpecDie {
	r := *d.r.DeepCopy()
	return &NetworkPolicySpecDie{
		mutable: d.mutable,
		r:       r,
	}
}

// Selects the pods to which this NetworkPolicy object applies. The array of ingress rules is applied to any pods selected by this field. Multiple network policies can select the same set of pods. In this case, the ingress rules for each are combined additively. This field is NOT optional and follows standard label selector semantics. An empty podSelector matches all pods in this namespace.
func (d *NetworkPolicySpecDie) PodSelector(v apismetav1.LabelSelector) *NetworkPolicySpecDie {
	return d.DieStamp(func(r *networkingv1.NetworkPolicySpec) {
		r.PodSelector = v
	})
}

// List of ingress rules to be applied to the selected pods. Traffic is allowed to a pod if there are no NetworkPolicies selecting the pod (and cluster policy otherwise allows the traffic), OR if the traffic source is the pod's local node, OR if the traffic matches at least one ingress rule across all of the NetworkPolicy objects whose podSelector matches the pod. If this field is empty then this NetworkPolicy does not allow any traffic (and serves solely to ensure that the pods it selects are isolated by default)
func (d *NetworkPolicySpecDie) Ingress(v ...networkingv1.NetworkPolicyIngressRule) *NetworkPolicySpecDie {
	return d.DieStamp(func(r *networkingv1.NetworkPolicySpec) {
		r.Ingress = v
	})
}

// List of egress rules to be applied to the selected pods. Outgoing traffic is allowed if there are no NetworkPolicies selecting the pod (and cluster policy otherwise allows the traffic), OR if the traffic matches at least one egress rule across all of the NetworkPolicy objects whose podSelector matches the pod. If this field is empty then this NetworkPolicy limits all outgoing traffic (and serves solely to ensure that the pods it selects are isolated by default). This field is beta-level in 1.8
func (d *NetworkPolicySpecDie) Egress(v ...networkingv1.NetworkPolicyEgressRule) *NetworkPolicySpecDie {
	return d.DieStamp(func(r *networkingv1.NetworkPolicySpec) {
		r.Egress = v
	})
}

// List of rule types that the NetworkPolicy relates to. Valid options are ["Ingress"], ["Egress"], or ["Ingress", "Egress"]. If this field is not specified, it will default based on the existence of Ingress or Egress rules; policies that contain an Egress section are assumed to affect Egress, and all policies (whether or not they contain an Ingress section) are assumed to affect Ingress. If you want to write an egress-only policy, you must explicitly specify policyTypes [ "Egress" ]. Likewise, if you want to write a policy that specifies that no egress is allowed, you must specify a policyTypes value that include "Egress" (since such a policy would not include an Egress section and would otherwise default to just [ "Ingress" ]). This field is beta-level in 1.8
func (d *NetworkPolicySpecDie) PolicyTypes(v ...networkingv1.PolicyType) *NetworkPolicySpecDie {
	return d.DieStamp(func(r *networkingv1.NetworkPolicySpec) {
		r.PolicyTypes = v
	})
}

var NetworkPolicyIngressRuleBlank = (&NetworkPolicyIngressRuleDie{}).DieFeed(networkingv1.NetworkPolicyIngressRule{})

type NetworkPolicyIngressRuleDie struct {
	mutable bool
	r       networkingv1.NetworkPolicyIngressRule
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *NetworkPolicyIngressRuleDie) DieImmutable(immutable bool) *NetworkPolicyIngressRuleDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *NetworkPolicyIngressRuleDie) DieFeed(r networkingv1.NetworkPolicyIngressRule) *NetworkPolicyIngressRuleDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &NetworkPolicyIngressRuleDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *NetworkPolicyIngressRuleDie) DieFeedPtr(r *networkingv1.NetworkPolicyIngressRule) *NetworkPolicyIngressRuleDie {
	if r == nil {
		r = &networkingv1.NetworkPolicyIngressRule{}
	}
	return d.DieFeed(*r)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *NetworkPolicyIngressRuleDie) DieFeedJSON(j []byte) *NetworkPolicyIngressRuleDie {
	r := networkingv1.NetworkPolicyIngressRule{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *NetworkPolicyIngressRuleDie) DieFeedYAML(y []byte) *NetworkPolicyIngressRuleDie {
	r := networkingv1.NetworkPolicyIngressRule{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *NetworkPolicyIngressRuleDie) DieFeedYAMLFile(name string) *NetworkPolicyIngressRuleDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *NetworkPolicyIngressRuleDie) DieFeedRawExtension(raw runtime.RawExtension) *NetworkPolicyIngressRuleDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *NetworkPolicyIngressRuleDie) DieRelease() networkingv1.NetworkPolicyIngressRule {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *NetworkPolicyIngressRuleDie) DieReleasePtr() *networkingv1.NetworkPolicyIngressRule {
	r := d.DieRelease()
	return &r
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *NetworkPolicyIngressRuleDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *NetworkPolicyIngressRuleDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *NetworkPolicyIngressRuleDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *NetworkPolicyIngressRuleDie) DieStamp(fn func(r *networkingv1.NetworkPolicyIngressRule)) *NetworkPolicyIngressRuleDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *NetworkPolicyIngressRuleDie) DeepCopy() *NetworkPolicyIngressRuleDie {
	r := *d.r.DeepCopy()
	return &NetworkPolicyIngressRuleDie{
		mutable: d.mutable,
		r:       r,
	}
}

// List of ports which should be made accessible on the pods selected for this rule. Each item in this list is combined using a logical OR. If this field is empty or missing, this rule matches all ports (traffic not restricted by port). If this field is present and contains at least one item, then this rule allows traffic only if the traffic matches at least one port in the list.
func (d *NetworkPolicyIngressRuleDie) Ports(v ...networkingv1.NetworkPolicyPort) *NetworkPolicyIngressRuleDie {
	return d.DieStamp(func(r *networkingv1.NetworkPolicyIngressRule) {
		r.Ports = v
	})
}

// List of sources which should be able to access the pods selected for this rule. Items in this list are combined using a logical OR operation. If this field is empty or missing, this rule matches all sources (traffic not restricted by source). If this field is present and contains at least one item, this rule allows traffic only if the traffic matches at least one item in the from list.
func (d *NetworkPolicyIngressRuleDie) From(v ...networkingv1.NetworkPolicyPeer) *NetworkPolicyIngressRuleDie {
	return d.DieStamp(func(r *networkingv1.NetworkPolicyIngressRule) {
		r.From = v
	})
}

var NetworkPolicyEgressRuleBlank = (&NetworkPolicyEgressRuleDie{}).DieFeed(networkingv1.NetworkPolicyEgressRule{})

type NetworkPolicyEgressRuleDie struct {
	mutable bool
	r       networkingv1.NetworkPolicyEgressRule
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *NetworkPolicyEgressRuleDie) DieImmutable(immutable bool) *NetworkPolicyEgressRuleDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *NetworkPolicyEgressRuleDie) DieFeed(r networkingv1.NetworkPolicyEgressRule) *NetworkPolicyEgressRuleDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &NetworkPolicyEgressRuleDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *NetworkPolicyEgressRuleDie) DieFeedPtr(r *networkingv1.NetworkPolicyEgressRule) *NetworkPolicyEgressRuleDie {
	if r == nil {
		r = &networkingv1.NetworkPolicyEgressRule{}
	}
	return d.DieFeed(*r)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *NetworkPolicyEgressRuleDie) DieFeedJSON(j []byte) *NetworkPolicyEgressRuleDie {
	r := networkingv1.NetworkPolicyEgressRule{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *NetworkPolicyEgressRuleDie) DieFeedYAML(y []byte) *NetworkPolicyEgressRuleDie {
	r := networkingv1.NetworkPolicyEgressRule{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *NetworkPolicyEgressRuleDie) DieFeedYAMLFile(name string) *NetworkPolicyEgressRuleDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *NetworkPolicyEgressRuleDie) DieFeedRawExtension(raw runtime.RawExtension) *NetworkPolicyEgressRuleDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *NetworkPolicyEgressRuleDie) DieRelease() networkingv1.NetworkPolicyEgressRule {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *NetworkPolicyEgressRuleDie) DieReleasePtr() *networkingv1.NetworkPolicyEgressRule {
	r := d.DieRelease()
	return &r
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *NetworkPolicyEgressRuleDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *NetworkPolicyEgressRuleDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *NetworkPolicyEgressRuleDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *NetworkPolicyEgressRuleDie) DieStamp(fn func(r *networkingv1.NetworkPolicyEgressRule)) *NetworkPolicyEgressRuleDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *NetworkPolicyEgressRuleDie) DeepCopy() *NetworkPolicyEgressRuleDie {
	r := *d.r.DeepCopy()
	return &NetworkPolicyEgressRuleDie{
		mutable: d.mutable,
		r:       r,
	}
}

// List of destination ports for outgoing traffic. Each item in this list is combined using a logical OR. If this field is empty or missing, this rule matches all ports (traffic not restricted by port). If this field is present and contains at least one item, then this rule allows traffic only if the traffic matches at least one port in the list.
func (d *NetworkPolicyEgressRuleDie) Ports(v ...networkingv1.NetworkPolicyPort) *NetworkPolicyEgressRuleDie {
	return d.DieStamp(func(r *networkingv1.NetworkPolicyEgressRule) {
		r.Ports = v
	})
}

// List of destinations for outgoing traffic of pods selected for this rule. Items in this list are combined using a logical OR operation. If this field is empty or missing, this rule matches all destinations (traffic not restricted by destination). If this field is present and contains at least one item, this rule allows traffic only if the traffic matches at least one item in the to list.
func (d *NetworkPolicyEgressRuleDie) To(v ...networkingv1.NetworkPolicyPeer) *NetworkPolicyEgressRuleDie {
	return d.DieStamp(func(r *networkingv1.NetworkPolicyEgressRule) {
		r.To = v
	})
}

var NetworkPolicyPortBlank = (&NetworkPolicyPortDie{}).DieFeed(networkingv1.NetworkPolicyPort{})

type NetworkPolicyPortDie struct {
	mutable bool
	r       networkingv1.NetworkPolicyPort
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *NetworkPolicyPortDie) DieImmutable(immutable bool) *NetworkPolicyPortDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *NetworkPolicyPortDie) DieFeed(r networkingv1.NetworkPolicyPort) *NetworkPolicyPortDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &NetworkPolicyPortDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *NetworkPolicyPortDie) DieFeedPtr(r *networkingv1.NetworkPolicyPort) *NetworkPolicyPortDie {
	if r == nil {
		r = &networkingv1.NetworkPolicyPort{}
	}
	return d.DieFeed(*r)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *NetworkPolicyPortDie) DieFeedJSON(j []byte) *NetworkPolicyPortDie {
	r := networkingv1.NetworkPolicyPort{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *NetworkPolicyPortDie) DieFeedYAML(y []byte) *NetworkPolicyPortDie {
	r := networkingv1.NetworkPolicyPort{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *NetworkPolicyPortDie) DieFeedYAMLFile(name string) *NetworkPolicyPortDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *NetworkPolicyPortDie) DieFeedRawExtension(raw runtime.RawExtension) *NetworkPolicyPortDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *NetworkPolicyPortDie) DieRelease() networkingv1.NetworkPolicyPort {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *NetworkPolicyPortDie) DieReleasePtr() *networkingv1.NetworkPolicyPort {
	r := d.DieRelease()
	return &r
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *NetworkPolicyPortDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *NetworkPolicyPortDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *NetworkPolicyPortDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *NetworkPolicyPortDie) DieStamp(fn func(r *networkingv1.NetworkPolicyPort)) *NetworkPolicyPortDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *NetworkPolicyPortDie) DeepCopy() *NetworkPolicyPortDie {
	r := *d.r.DeepCopy()
	return &NetworkPolicyPortDie{
		mutable: d.mutable,
		r:       r,
	}
}

// The protocol (TCP, UDP, or SCTP) which traffic must match. If not specified, this field defaults to TCP.
func (d *NetworkPolicyPortDie) Protocol(v *corev1.Protocol) *NetworkPolicyPortDie {
	return d.DieStamp(func(r *networkingv1.NetworkPolicyPort) {
		r.Protocol = v
	})
}

// The port on the given protocol. This can either be a numerical or named port on a pod. If this field is not provided, this matches all port names and numbers. If present, only traffic on the specified protocol AND port will be matched.
func (d *NetworkPolicyPortDie) Port(v *intstr.IntOrString) *NetworkPolicyPortDie {
	return d.DieStamp(func(r *networkingv1.NetworkPolicyPort) {
		r.Port = v
	})
}

func (d *NetworkPolicyPortDie) PortInt(i int) *NetworkPolicyPortDie {
	return d.DieStamp(func(r *networkingv1.NetworkPolicyPort) {
		v := intstr.FromInt(i)
		r.Port = &v
	})
}

func (d *NetworkPolicyPortDie) PortString(s string) *NetworkPolicyPortDie {
	return d.DieStamp(func(r *networkingv1.NetworkPolicyPort) {
		v := intstr.FromString(s)
		r.Port = &v
	})
}

// If set, indicates that the range of ports from port to endPort, inclusive, should be allowed by the policy. This field cannot be defined if the port field is not defined or if the port field is defined as a named (string) port. The endPort must be equal or greater than port.
func (d *NetworkPolicyPortDie) EndPort(v *int32) *NetworkPolicyPortDie {
	return d.DieStamp(func(r *networkingv1.NetworkPolicyPort) {
		r.EndPort = v
	})
}

var NetworkPolicyPeerBlank = (&NetworkPolicyPeerDie{}).DieFeed(networkingv1.NetworkPolicyPeer{})

type NetworkPolicyPeerDie struct {
	mutable bool
	r       networkingv1.NetworkPolicyPeer
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *NetworkPolicyPeerDie) DieImmutable(immutable bool) *NetworkPolicyPeerDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *NetworkPolicyPeerDie) DieFeed(r networkingv1.NetworkPolicyPeer) *NetworkPolicyPeerDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &NetworkPolicyPeerDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *NetworkPolicyPeerDie) DieFeedPtr(r *networkingv1.NetworkPolicyPeer) *NetworkPolicyPeerDie {
	if r == nil {
		r = &networkingv1.NetworkPolicyPeer{}
	}
	return d.DieFeed(*r)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *NetworkPolicyPeerDie) DieFeedJSON(j []byte) *NetworkPolicyPeerDie {
	r := networkingv1.NetworkPolicyPeer{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *NetworkPolicyPeerDie) DieFeedYAML(y []byte) *NetworkPolicyPeerDie {
	r := networkingv1.NetworkPolicyPeer{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *NetworkPolicyPeerDie) DieFeedYAMLFile(name string) *NetworkPolicyPeerDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *NetworkPolicyPeerDie) DieFeedRawExtension(raw runtime.RawExtension) *NetworkPolicyPeerDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *NetworkPolicyPeerDie) DieRelease() networkingv1.NetworkPolicyPeer {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *NetworkPolicyPeerDie) DieReleasePtr() *networkingv1.NetworkPolicyPeer {
	r := d.DieRelease()
	return &r
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *NetworkPolicyPeerDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *NetworkPolicyPeerDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *NetworkPolicyPeerDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *NetworkPolicyPeerDie) DieStamp(fn func(r *networkingv1.NetworkPolicyPeer)) *NetworkPolicyPeerDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *NetworkPolicyPeerDie) DeepCopy() *NetworkPolicyPeerDie {
	r := *d.r.DeepCopy()
	return &NetworkPolicyPeerDie{
		mutable: d.mutable,
		r:       r,
	}
}

// This is a label selector which selects Pods. This field follows standard label selector semantics; if present but empty, it selects all pods.
//
// If NamespaceSelector is also set, then the NetworkPolicyPeer as a whole selects the Pods matching PodSelector in the Namespaces selected by NamespaceSelector. Otherwise it selects the Pods matching PodSelector in the policy's own Namespace.
func (d *NetworkPolicyPeerDie) PodSelector(v *apismetav1.LabelSelector) *NetworkPolicyPeerDie {
	return d.DieStamp(func(r *networkingv1.NetworkPolicyPeer) {
		r.PodSelector = v
	})
}

// Selects Namespaces using cluster-scoped labels. This field follows standard label selector semantics; if present but empty, it selects all namespaces.
//
// If PodSelector is also set, then the NetworkPolicyPeer as a whole selects the Pods matching PodSelector in the Namespaces selected by NamespaceSelector. Otherwise it selects all Pods in the Namespaces selected by NamespaceSelector.
func (d *NetworkPolicyPeerDie) NamespaceSelector(v *apismetav1.LabelSelector) *NetworkPolicyPeerDie {
	return d.DieStamp(func(r *networkingv1.NetworkPolicyPeer) {
		r.NamespaceSelector = v
	})
}

// IPBlock defines policy on a particular IPBlock. If this field is set then neither of the other fields can be.
func (d *NetworkPolicyPeerDie) IPBlock(v *networkingv1.IPBlock) *NetworkPolicyPeerDie {
	return d.DieStamp(func(r *networkingv1.NetworkPolicyPeer) {
		r.IPBlock = v
	})
}

var IPBlockBlank = (&IPBlockDie{}).DieFeed(networkingv1.IPBlock{})

type IPBlockDie struct {
	mutable bool
	r       networkingv1.IPBlock
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *IPBlockDie) DieImmutable(immutable bool) *IPBlockDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *IPBlockDie) DieFeed(r networkingv1.IPBlock) *IPBlockDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &IPBlockDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *IPBlockDie) DieFeedPtr(r *networkingv1.IPBlock) *IPBlockDie {
	if r == nil {
		r = &networkingv1.IPBlock{}
	}
	return d.DieFeed(*r)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *IPBlockDie) DieFeedJSON(j []byte) *IPBlockDie {
	r := networkingv1.IPBlock{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *IPBlockDie) DieFeedYAML(y []byte) *IPBlockDie {
	r := networkingv1.IPBlock{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *IPBlockDie) DieFeedYAMLFile(name string) *IPBlockDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *IPBlockDie) DieFeedRawExtension(raw runtime.RawExtension) *IPBlockDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *IPBlockDie) DieRelease() networkingv1.IPBlock {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *IPBlockDie) DieReleasePtr() *networkingv1.IPBlock {
	r := d.DieRelease()
	return &r
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *IPBlockDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *IPBlockDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *IPBlockDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *IPBlockDie) DieStamp(fn func(r *networkingv1.IPBlock)) *IPBlockDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *IPBlockDie) DeepCopy() *IPBlockDie {
	r := *d.r.DeepCopy()
	return &IPBlockDie{
		mutable: d.mutable,
		r:       r,
	}
}

// CIDR is a string representing the IP Block Valid examples are "192.168.1.0/24" or "2001:db8::/64"
func (d *IPBlockDie) CIDR(v string) *IPBlockDie {
	return d.DieStamp(func(r *networkingv1.IPBlock) {
		r.CIDR = v
	})
}

// Except is a slice of CIDRs that should not be included within an IP Block Valid examples are "192.168.1.0/24" or "2001:db8::/64" Except values will be rejected if they are outside the CIDR range
func (d *IPBlockDie) Except(v ...string) *IPBlockDie {
	return d.DieStamp(func(r *networkingv1.IPBlock) {
		r.Except = v
	})
}

var NetworkPolicyStatusBlank = (&NetworkPolicyStatusDie{}).DieFeed(networkingv1.NetworkPolicyStatus{})

type NetworkPolicyStatusDie struct {
	mutable bool
	r       networkingv1.NetworkPolicyStatus
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *NetworkPolicyStatusDie) DieImmutable(immutable bool) *NetworkPolicyStatusDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *NetworkPolicyStatusDie) DieFeed(r networkingv1.NetworkPolicyStatus) *NetworkPolicyStatusDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &NetworkPolicyStatusDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *NetworkPolicyStatusDie) DieFeedPtr(r *networkingv1.NetworkPolicyStatus) *NetworkPolicyStatusDie {
	if r == nil {
		r = &networkingv1.NetworkPolicyStatus{}
	}
	return d.DieFeed(*r)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *NetworkPolicyStatusDie) DieFeedJSON(j []byte) *NetworkPolicyStatusDie {
	r := networkingv1.NetworkPolicyStatus{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *NetworkPolicyStatusDie) DieFeedYAML(y []byte) *NetworkPolicyStatusDie {
	r := networkingv1.NetworkPolicyStatus{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *NetworkPolicyStatusDie) DieFeedYAMLFile(name string) *NetworkPolicyStatusDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *NetworkPolicyStatusDie) DieFeedRawExtension(raw runtime.RawExtension) *NetworkPolicyStatusDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *NetworkPolicyStatusDie) DieRelease() networkingv1.NetworkPolicyStatus {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *NetworkPolicyStatusDie) DieReleasePtr() *networkingv1.NetworkPolicyStatus {
	r := d.DieRelease()
	return &r
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *NetworkPolicyStatusDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *NetworkPolicyStatusDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *NetworkPolicyStatusDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *NetworkPolicyStatusDie) DieStamp(fn func(r *networkingv1.NetworkPolicyStatus)) *NetworkPolicyStatusDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *NetworkPolicyStatusDie) DeepCopy() *NetworkPolicyStatusDie {
	r := *d.r.DeepCopy()
	return &NetworkPolicyStatusDie{
		mutable: d.mutable,
		r:       r,
	}
}

// Conditions holds an array of metav1.Condition that describe the state of the NetworkPolicy. Current service state
func (d *NetworkPolicyStatusDie) Conditions(v ...apismetav1.Condition) *NetworkPolicyStatusDie {
	return d.DieStamp(func(r *networkingv1.NetworkPolicyStatus) {
		r.Conditions = v
	})
}
