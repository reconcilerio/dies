//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright 2021-2022 the original author or authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by diegen. DO NOT EDIT.

package v1beta1

import (
	v1 "dies.dev/apis/meta/v1"
	json "encoding/json"
	fmtx "fmt"
	corev1 "k8s.io/api/core/v1"
	policyv1beta1 "k8s.io/api/policy/v1beta1"
	unstructured "k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
	runtime "k8s.io/apimachinery/pkg/runtime"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	osx "os"
	yaml "sigs.k8s.io/yaml"
)

var PodSecurityPolicyBlank = (&PodSecurityPolicyDie{}).DieFeed(policyv1beta1.PodSecurityPolicy{})

type PodSecurityPolicyDie struct {
	v1.FrozenObjectMeta
	mutable bool
	r       policyv1beta1.PodSecurityPolicy
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *PodSecurityPolicyDie) DieImmutable(immutable bool) *PodSecurityPolicyDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *PodSecurityPolicyDie) DieFeed(r policyv1beta1.PodSecurityPolicy) *PodSecurityPolicyDie {
	if d.mutable {
		d.FrozenObjectMeta = v1.FreezeObjectMeta(r.ObjectMeta)
		d.r = r
		return d
	}
	return &PodSecurityPolicyDie{
		FrozenObjectMeta: v1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *PodSecurityPolicyDie) DieFeedPtr(r *policyv1beta1.PodSecurityPolicy) *PodSecurityPolicyDie {
	if r == nil {
		r = &policyv1beta1.PodSecurityPolicy{}
	}
	return d.DieFeed(*r)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *PodSecurityPolicyDie) DieFeedJSON(j []byte) *PodSecurityPolicyDie {
	r := policyv1beta1.PodSecurityPolicy{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *PodSecurityPolicyDie) DieFeedYAML(y []byte) *PodSecurityPolicyDie {
	r := policyv1beta1.PodSecurityPolicy{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *PodSecurityPolicyDie) DieFeedYAMLFile(name string) *PodSecurityPolicyDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *PodSecurityPolicyDie) DieFeedRawExtension(raw runtime.RawExtension) *PodSecurityPolicyDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *PodSecurityPolicyDie) DieRelease() policyv1beta1.PodSecurityPolicy {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *PodSecurityPolicyDie) DieReleasePtr() *policyv1beta1.PodSecurityPolicy {
	r := d.DieRelease()
	return &r
}

// DieReleaseUnstructured returns the resource managed by the die as an unstructured object. Panics on error.
func (d *PodSecurityPolicyDie) DieReleaseUnstructured() *unstructured.Unstructured {
	r := d.DieReleasePtr()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(r)
	if err != nil {
		panic(err)
	}
	return &unstructured.Unstructured{
		Object: u,
	}
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *PodSecurityPolicyDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *PodSecurityPolicyDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *PodSecurityPolicyDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *PodSecurityPolicyDie) DieStamp(fn func(r *policyv1beta1.PodSecurityPolicy)) *PodSecurityPolicyDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *PodSecurityPolicyDie) DeepCopy() *PodSecurityPolicyDie {
	r := *d.r.DeepCopy()
	return &PodSecurityPolicyDie{
		FrozenObjectMeta: v1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
	}
}

var _ runtime.Object = (*PodSecurityPolicyDie)(nil)

func (d *PodSecurityPolicyDie) DeepCopyObject() runtime.Object {
	return d.r.DeepCopy()
}

func (d *PodSecurityPolicyDie) GetObjectKind() schema.ObjectKind {
	r := d.DieRelease()
	return r.GetObjectKind()
}

func (d *PodSecurityPolicyDie) MarshalJSON() ([]byte, error) {
	return json.Marshal(d.r)
}

func (d *PodSecurityPolicyDie) UnmarshalJSON(b []byte) error {
	if d == PodSecurityPolicyBlank {
		return fmtx.Errorf("cannot unmarshal into the blank die, create a copy first")
	}
	if !d.mutable {
		return fmtx.Errorf("cannot unmarshal into immutable dies, create a mutable version first")
	}
	r := &policyv1beta1.PodSecurityPolicy{}
	err := json.Unmarshal(b, r)
	*d = *d.DieFeed(*r)
	return err
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (d *PodSecurityPolicyDie) APIVersion(v string) *PodSecurityPolicyDie {
	return d.DieStamp(func(r *policyv1beta1.PodSecurityPolicy) {
		r.APIVersion = v
	})
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (d *PodSecurityPolicyDie) Kind(v string) *PodSecurityPolicyDie {
	return d.DieStamp(func(r *policyv1beta1.PodSecurityPolicy) {
		r.Kind = v
	})
}

// MetadataDie stamps the resource's ObjectMeta field with a mutable die.
func (d *PodSecurityPolicyDie) MetadataDie(fn func(d *v1.ObjectMetaDie)) *PodSecurityPolicyDie {
	return d.DieStamp(func(r *policyv1beta1.PodSecurityPolicy) {
		d := v1.ObjectMetaBlank.DieImmutable(false).DieFeed(r.ObjectMeta)
		fn(d)
		r.ObjectMeta = d.DieRelease()
	})
}

// SpecDie stamps the resource's spec field with a mutable die.
func (d *PodSecurityPolicyDie) SpecDie(fn func(d *PodSecurityPolicySpecDie)) *PodSecurityPolicyDie {
	return d.DieStamp(func(r *policyv1beta1.PodSecurityPolicy) {
		d := PodSecurityPolicySpecBlank.DieImmutable(false).DieFeed(r.Spec)
		fn(d)
		r.Spec = d.DieRelease()
	})
}

// spec defines the policy enforced.
func (d *PodSecurityPolicyDie) Spec(v policyv1beta1.PodSecurityPolicySpec) *PodSecurityPolicyDie {
	return d.DieStamp(func(r *policyv1beta1.PodSecurityPolicy) {
		r.Spec = v
	})
}

var PodSecurityPolicySpecBlank = (&PodSecurityPolicySpecDie{}).DieFeed(policyv1beta1.PodSecurityPolicySpec{})

type PodSecurityPolicySpecDie struct {
	mutable bool
	r       policyv1beta1.PodSecurityPolicySpec
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *PodSecurityPolicySpecDie) DieImmutable(immutable bool) *PodSecurityPolicySpecDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *PodSecurityPolicySpecDie) DieFeed(r policyv1beta1.PodSecurityPolicySpec) *PodSecurityPolicySpecDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &PodSecurityPolicySpecDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *PodSecurityPolicySpecDie) DieFeedPtr(r *policyv1beta1.PodSecurityPolicySpec) *PodSecurityPolicySpecDie {
	if r == nil {
		r = &policyv1beta1.PodSecurityPolicySpec{}
	}
	return d.DieFeed(*r)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *PodSecurityPolicySpecDie) DieFeedJSON(j []byte) *PodSecurityPolicySpecDie {
	r := policyv1beta1.PodSecurityPolicySpec{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *PodSecurityPolicySpecDie) DieFeedYAML(y []byte) *PodSecurityPolicySpecDie {
	r := policyv1beta1.PodSecurityPolicySpec{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *PodSecurityPolicySpecDie) DieFeedYAMLFile(name string) *PodSecurityPolicySpecDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *PodSecurityPolicySpecDie) DieFeedRawExtension(raw runtime.RawExtension) *PodSecurityPolicySpecDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *PodSecurityPolicySpecDie) DieRelease() policyv1beta1.PodSecurityPolicySpec {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *PodSecurityPolicySpecDie) DieReleasePtr() *policyv1beta1.PodSecurityPolicySpec {
	r := d.DieRelease()
	return &r
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *PodSecurityPolicySpecDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *PodSecurityPolicySpecDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *PodSecurityPolicySpecDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *PodSecurityPolicySpecDie) DieStamp(fn func(r *policyv1beta1.PodSecurityPolicySpec)) *PodSecurityPolicySpecDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *PodSecurityPolicySpecDie) DeepCopy() *PodSecurityPolicySpecDie {
	r := *d.r.DeepCopy()
	return &PodSecurityPolicySpecDie{
		mutable: d.mutable,
		r:       r,
	}
}

// privileged determines if a pod can request to be run as privileged.
func (d *PodSecurityPolicySpecDie) Privileged(v bool) *PodSecurityPolicySpecDie {
	return d.DieStamp(func(r *policyv1beta1.PodSecurityPolicySpec) {
		r.Privileged = v
	})
}

// defaultAddCapabilities is the default set of capabilities that will be added to the container unless the pod spec specifically drops the capability.  You may not list a capability in both defaultAddCapabilities and requiredDropCapabilities. Capabilities added here are implicitly allowed, and need not be included in the allowedCapabilities list.
func (d *PodSecurityPolicySpecDie) DefaultAddCapabilities(v ...corev1.Capability) *PodSecurityPolicySpecDie {
	return d.DieStamp(func(r *policyv1beta1.PodSecurityPolicySpec) {
		r.DefaultAddCapabilities = v
	})
}

// requiredDropCapabilities are the capabilities that will be dropped from the container.  These are required to be dropped and cannot be added.
func (d *PodSecurityPolicySpecDie) RequiredDropCapabilities(v ...corev1.Capability) *PodSecurityPolicySpecDie {
	return d.DieStamp(func(r *policyv1beta1.PodSecurityPolicySpec) {
		r.RequiredDropCapabilities = v
	})
}

// allowedCapabilities is a list of capabilities that can be requested to add to the container. Capabilities in this field may be added at the pod author's discretion. You must not list a capability in both allowedCapabilities and requiredDropCapabilities.
func (d *PodSecurityPolicySpecDie) AllowedCapabilities(v ...corev1.Capability) *PodSecurityPolicySpecDie {
	return d.DieStamp(func(r *policyv1beta1.PodSecurityPolicySpec) {
		r.AllowedCapabilities = v
	})
}

// volumes is an allowlist of volume plugins. Empty indicates that no volumes may be used. To allow all volumes you may use '*'.
func (d *PodSecurityPolicySpecDie) Volumes(v ...policyv1beta1.FSType) *PodSecurityPolicySpecDie {
	return d.DieStamp(func(r *policyv1beta1.PodSecurityPolicySpec) {
		r.Volumes = v
	})
}

// hostNetwork determines if the policy allows the use of HostNetwork in the pod spec.
func (d *PodSecurityPolicySpecDie) HostNetwork(v bool) *PodSecurityPolicySpecDie {
	return d.DieStamp(func(r *policyv1beta1.PodSecurityPolicySpec) {
		r.HostNetwork = v
	})
}

// hostPorts determines which host port ranges are allowed to be exposed.
func (d *PodSecurityPolicySpecDie) HostPorts(v ...policyv1beta1.HostPortRange) *PodSecurityPolicySpecDie {
	return d.DieStamp(func(r *policyv1beta1.PodSecurityPolicySpec) {
		r.HostPorts = v
	})
}

// hostPID determines if the policy allows the use of HostPID in the pod spec.
func (d *PodSecurityPolicySpecDie) HostPID(v bool) *PodSecurityPolicySpecDie {
	return d.DieStamp(func(r *policyv1beta1.PodSecurityPolicySpec) {
		r.HostPID = v
	})
}

// hostIPC determines if the policy allows the use of HostIPC in the pod spec.
func (d *PodSecurityPolicySpecDie) HostIPC(v bool) *PodSecurityPolicySpecDie {
	return d.DieStamp(func(r *policyv1beta1.PodSecurityPolicySpec) {
		r.HostIPC = v
	})
}

// seLinux is the strategy that will dictate the allowable labels that may be set.
func (d *PodSecurityPolicySpecDie) SELinux(v policyv1beta1.SELinuxStrategyOptions) *PodSecurityPolicySpecDie {
	return d.DieStamp(func(r *policyv1beta1.PodSecurityPolicySpec) {
		r.SELinux = v
	})
}

// runAsUser is the strategy that will dictate the allowable RunAsUser values that may be set.
func (d *PodSecurityPolicySpecDie) RunAsUser(v policyv1beta1.RunAsUserStrategyOptions) *PodSecurityPolicySpecDie {
	return d.DieStamp(func(r *policyv1beta1.PodSecurityPolicySpec) {
		r.RunAsUser = v
	})
}

// RunAsGroup is the strategy that will dictate the allowable RunAsGroup values that may be set. If this field is omitted, the pod's RunAsGroup can take any value. This field requires the RunAsGroup feature gate to be enabled.
func (d *PodSecurityPolicySpecDie) RunAsGroup(v *policyv1beta1.RunAsGroupStrategyOptions) *PodSecurityPolicySpecDie {
	return d.DieStamp(func(r *policyv1beta1.PodSecurityPolicySpec) {
		r.RunAsGroup = v
	})
}

// supplementalGroups is the strategy that will dictate what supplemental groups are used by the SecurityContext.
func (d *PodSecurityPolicySpecDie) SupplementalGroups(v policyv1beta1.SupplementalGroupsStrategyOptions) *PodSecurityPolicySpecDie {
	return d.DieStamp(func(r *policyv1beta1.PodSecurityPolicySpec) {
		r.SupplementalGroups = v
	})
}

// fsGroup is the strategy that will dictate what fs group is used by the SecurityContext.
func (d *PodSecurityPolicySpecDie) FSGroup(v policyv1beta1.FSGroupStrategyOptions) *PodSecurityPolicySpecDie {
	return d.DieStamp(func(r *policyv1beta1.PodSecurityPolicySpec) {
		r.FSGroup = v
	})
}

// readOnlyRootFilesystem when set to true will force containers to run with a read only root file system.  If the container specifically requests to run with a non-read only root file system the PSP should deny the pod. If set to false the container may run with a read only root file system if it wishes but it will not be forced to.
func (d *PodSecurityPolicySpecDie) ReadOnlyRootFilesystem(v bool) *PodSecurityPolicySpecDie {
	return d.DieStamp(func(r *policyv1beta1.PodSecurityPolicySpec) {
		r.ReadOnlyRootFilesystem = v
	})
}

// defaultAllowPrivilegeEscalation controls the default setting for whether a process can gain more privileges than its parent process.
func (d *PodSecurityPolicySpecDie) DefaultAllowPrivilegeEscalation(v *bool) *PodSecurityPolicySpecDie {
	return d.DieStamp(func(r *policyv1beta1.PodSecurityPolicySpec) {
		r.DefaultAllowPrivilegeEscalation = v
	})
}

// allowPrivilegeEscalation determines if a pod can request to allow privilege escalation. If unspecified, defaults to true.
func (d *PodSecurityPolicySpecDie) AllowPrivilegeEscalation(v *bool) *PodSecurityPolicySpecDie {
	return d.DieStamp(func(r *policyv1beta1.PodSecurityPolicySpec) {
		r.AllowPrivilegeEscalation = v
	})
}

// allowedHostPaths is an allowlist of host paths. Empty indicates that all host paths may be used.
func (d *PodSecurityPolicySpecDie) AllowedHostPaths(v ...policyv1beta1.AllowedHostPath) *PodSecurityPolicySpecDie {
	return d.DieStamp(func(r *policyv1beta1.PodSecurityPolicySpec) {
		r.AllowedHostPaths = v
	})
}

// allowedFlexVolumes is an allowlist of Flexvolumes.  Empty or nil indicates that all Flexvolumes may be used.  This parameter is effective only when the usage of the Flexvolumes is allowed in the "volumes" field.
func (d *PodSecurityPolicySpecDie) AllowedFlexVolumes(v ...policyv1beta1.AllowedFlexVolume) *PodSecurityPolicySpecDie {
	return d.DieStamp(func(r *policyv1beta1.PodSecurityPolicySpec) {
		r.AllowedFlexVolumes = v
	})
}

// AllowedCSIDrivers is an allowlist of inline CSI drivers that must be explicitly set to be embedded within a pod spec. An empty value indicates that any CSI driver can be used for inline ephemeral volumes.
func (d *PodSecurityPolicySpecDie) AllowedCSIDrivers(v ...policyv1beta1.AllowedCSIDriver) *PodSecurityPolicySpecDie {
	return d.DieStamp(func(r *policyv1beta1.PodSecurityPolicySpec) {
		r.AllowedCSIDrivers = v
	})
}

// allowedUnsafeSysctls is a list of explicitly allowed unsafe sysctls, defaults to none. Each entry is either a plain sysctl name or ends in "*" in which case it is considered as a prefix of allowed sysctls. Single * means all unsafe sysctls are allowed. Kubelet has to allowlist all allowed unsafe sysctls explicitly to avoid rejection.
//
// Examples: e.g. "foo/*" allows "foo/bar", "foo/baz", etc. e.g. "foo.*" allows "foo.bar", "foo.baz", etc.
func (d *PodSecurityPolicySpecDie) AllowedUnsafeSysctls(v ...string) *PodSecurityPolicySpecDie {
	return d.DieStamp(func(r *policyv1beta1.PodSecurityPolicySpec) {
		r.AllowedUnsafeSysctls = v
	})
}

// forbiddenSysctls is a list of explicitly forbidden sysctls, defaults to none. Each entry is either a plain sysctl name or ends in "*" in which case it is considered as a prefix of forbidden sysctls. Single * means all sysctls are forbidden.
//
// Examples: e.g. "foo/*" forbids "foo/bar", "foo/baz", etc. e.g. "foo.*" forbids "foo.bar", "foo.baz", etc.
func (d *PodSecurityPolicySpecDie) ForbiddenSysctls(v ...string) *PodSecurityPolicySpecDie {
	return d.DieStamp(func(r *policyv1beta1.PodSecurityPolicySpec) {
		r.ForbiddenSysctls = v
	})
}

// AllowedProcMountTypes is an allowlist of allowed ProcMountTypes. Empty or nil indicates that only the DefaultProcMountType may be used. This requires the ProcMountType feature flag to be enabled.
func (d *PodSecurityPolicySpecDie) AllowedProcMountTypes(v ...corev1.ProcMountType) *PodSecurityPolicySpecDie {
	return d.DieStamp(func(r *policyv1beta1.PodSecurityPolicySpec) {
		r.AllowedProcMountTypes = v
	})
}

// runtimeClass is the strategy that will dictate the allowable RuntimeClasses for a pod. If this field is omitted, the pod's runtimeClassName field is unrestricted. Enforcement of this field depends on the RuntimeClass feature gate being enabled.
func (d *PodSecurityPolicySpecDie) RuntimeClass(v *policyv1beta1.RuntimeClassStrategyOptions) *PodSecurityPolicySpecDie {
	return d.DieStamp(func(r *policyv1beta1.PodSecurityPolicySpec) {
		r.RuntimeClass = v
	})
}

var HostPortRangeBlank = (&HostPortRangeDie{}).DieFeed(policyv1beta1.HostPortRange{})

type HostPortRangeDie struct {
	mutable bool
	r       policyv1beta1.HostPortRange
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *HostPortRangeDie) DieImmutable(immutable bool) *HostPortRangeDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *HostPortRangeDie) DieFeed(r policyv1beta1.HostPortRange) *HostPortRangeDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &HostPortRangeDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *HostPortRangeDie) DieFeedPtr(r *policyv1beta1.HostPortRange) *HostPortRangeDie {
	if r == nil {
		r = &policyv1beta1.HostPortRange{}
	}
	return d.DieFeed(*r)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *HostPortRangeDie) DieFeedJSON(j []byte) *HostPortRangeDie {
	r := policyv1beta1.HostPortRange{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *HostPortRangeDie) DieFeedYAML(y []byte) *HostPortRangeDie {
	r := policyv1beta1.HostPortRange{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *HostPortRangeDie) DieFeedYAMLFile(name string) *HostPortRangeDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *HostPortRangeDie) DieFeedRawExtension(raw runtime.RawExtension) *HostPortRangeDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *HostPortRangeDie) DieRelease() policyv1beta1.HostPortRange {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *HostPortRangeDie) DieReleasePtr() *policyv1beta1.HostPortRange {
	r := d.DieRelease()
	return &r
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *HostPortRangeDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *HostPortRangeDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *HostPortRangeDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *HostPortRangeDie) DieStamp(fn func(r *policyv1beta1.HostPortRange)) *HostPortRangeDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *HostPortRangeDie) DeepCopy() *HostPortRangeDie {
	r := *d.r.DeepCopy()
	return &HostPortRangeDie{
		mutable: d.mutable,
		r:       r,
	}
}

// min is the start of the range, inclusive.
func (d *HostPortRangeDie) Min(v int32) *HostPortRangeDie {
	return d.DieStamp(func(r *policyv1beta1.HostPortRange) {
		r.Min = v
	})
}

// max is the end of the range, inclusive.
func (d *HostPortRangeDie) Max(v int32) *HostPortRangeDie {
	return d.DieStamp(func(r *policyv1beta1.HostPortRange) {
		r.Max = v
	})
}

var SELinuxStrategyOptionsBlank = (&SELinuxStrategyOptionsDie{}).DieFeed(policyv1beta1.SELinuxStrategyOptions{})

type SELinuxStrategyOptionsDie struct {
	mutable bool
	r       policyv1beta1.SELinuxStrategyOptions
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *SELinuxStrategyOptionsDie) DieImmutable(immutable bool) *SELinuxStrategyOptionsDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *SELinuxStrategyOptionsDie) DieFeed(r policyv1beta1.SELinuxStrategyOptions) *SELinuxStrategyOptionsDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &SELinuxStrategyOptionsDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *SELinuxStrategyOptionsDie) DieFeedPtr(r *policyv1beta1.SELinuxStrategyOptions) *SELinuxStrategyOptionsDie {
	if r == nil {
		r = &policyv1beta1.SELinuxStrategyOptions{}
	}
	return d.DieFeed(*r)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *SELinuxStrategyOptionsDie) DieFeedJSON(j []byte) *SELinuxStrategyOptionsDie {
	r := policyv1beta1.SELinuxStrategyOptions{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *SELinuxStrategyOptionsDie) DieFeedYAML(y []byte) *SELinuxStrategyOptionsDie {
	r := policyv1beta1.SELinuxStrategyOptions{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *SELinuxStrategyOptionsDie) DieFeedYAMLFile(name string) *SELinuxStrategyOptionsDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *SELinuxStrategyOptionsDie) DieFeedRawExtension(raw runtime.RawExtension) *SELinuxStrategyOptionsDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *SELinuxStrategyOptionsDie) DieRelease() policyv1beta1.SELinuxStrategyOptions {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *SELinuxStrategyOptionsDie) DieReleasePtr() *policyv1beta1.SELinuxStrategyOptions {
	r := d.DieRelease()
	return &r
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *SELinuxStrategyOptionsDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *SELinuxStrategyOptionsDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *SELinuxStrategyOptionsDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *SELinuxStrategyOptionsDie) DieStamp(fn func(r *policyv1beta1.SELinuxStrategyOptions)) *SELinuxStrategyOptionsDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *SELinuxStrategyOptionsDie) DeepCopy() *SELinuxStrategyOptionsDie {
	r := *d.r.DeepCopy()
	return &SELinuxStrategyOptionsDie{
		mutable: d.mutable,
		r:       r,
	}
}

// rule is the strategy that will dictate the allowable labels that may be set.
func (d *SELinuxStrategyOptionsDie) Rule(v policyv1beta1.SELinuxStrategy) *SELinuxStrategyOptionsDie {
	return d.DieStamp(func(r *policyv1beta1.SELinuxStrategyOptions) {
		r.Rule = v
	})
}

// seLinuxOptions required to run as; required for MustRunAs More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
func (d *SELinuxStrategyOptionsDie) SELinuxOptions(v *corev1.SELinuxOptions) *SELinuxStrategyOptionsDie {
	return d.DieStamp(func(r *policyv1beta1.SELinuxStrategyOptions) {
		r.SELinuxOptions = v
	})
}

var RunAsUserStrategyOptionsBlank = (&RunAsUserStrategyOptionsDie{}).DieFeed(policyv1beta1.RunAsUserStrategyOptions{})

type RunAsUserStrategyOptionsDie struct {
	mutable bool
	r       policyv1beta1.RunAsUserStrategyOptions
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *RunAsUserStrategyOptionsDie) DieImmutable(immutable bool) *RunAsUserStrategyOptionsDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *RunAsUserStrategyOptionsDie) DieFeed(r policyv1beta1.RunAsUserStrategyOptions) *RunAsUserStrategyOptionsDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &RunAsUserStrategyOptionsDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *RunAsUserStrategyOptionsDie) DieFeedPtr(r *policyv1beta1.RunAsUserStrategyOptions) *RunAsUserStrategyOptionsDie {
	if r == nil {
		r = &policyv1beta1.RunAsUserStrategyOptions{}
	}
	return d.DieFeed(*r)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *RunAsUserStrategyOptionsDie) DieFeedJSON(j []byte) *RunAsUserStrategyOptionsDie {
	r := policyv1beta1.RunAsUserStrategyOptions{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *RunAsUserStrategyOptionsDie) DieFeedYAML(y []byte) *RunAsUserStrategyOptionsDie {
	r := policyv1beta1.RunAsUserStrategyOptions{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *RunAsUserStrategyOptionsDie) DieFeedYAMLFile(name string) *RunAsUserStrategyOptionsDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *RunAsUserStrategyOptionsDie) DieFeedRawExtension(raw runtime.RawExtension) *RunAsUserStrategyOptionsDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *RunAsUserStrategyOptionsDie) DieRelease() policyv1beta1.RunAsUserStrategyOptions {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *RunAsUserStrategyOptionsDie) DieReleasePtr() *policyv1beta1.RunAsUserStrategyOptions {
	r := d.DieRelease()
	return &r
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *RunAsUserStrategyOptionsDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *RunAsUserStrategyOptionsDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *RunAsUserStrategyOptionsDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *RunAsUserStrategyOptionsDie) DieStamp(fn func(r *policyv1beta1.RunAsUserStrategyOptions)) *RunAsUserStrategyOptionsDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *RunAsUserStrategyOptionsDie) DeepCopy() *RunAsUserStrategyOptionsDie {
	r := *d.r.DeepCopy()
	return &RunAsUserStrategyOptionsDie{
		mutable: d.mutable,
		r:       r,
	}
}

// rule is the strategy that will dictate the allowable RunAsUser values that may be set.
func (d *RunAsUserStrategyOptionsDie) Rule(v policyv1beta1.RunAsUserStrategy) *RunAsUserStrategyOptionsDie {
	return d.DieStamp(func(r *policyv1beta1.RunAsUserStrategyOptions) {
		r.Rule = v
	})
}

// ranges are the allowed ranges of uids that may be used. If you would like to force a single uid then supply a single range with the same start and end. Required for MustRunAs.
func (d *RunAsUserStrategyOptionsDie) Ranges(v ...policyv1beta1.IDRange) *RunAsUserStrategyOptionsDie {
	return d.DieStamp(func(r *policyv1beta1.RunAsUserStrategyOptions) {
		r.Ranges = v
	})
}

var RunAsGroupStrategyOptionsBlank = (&RunAsGroupStrategyOptionsDie{}).DieFeed(policyv1beta1.RunAsGroupStrategyOptions{})

type RunAsGroupStrategyOptionsDie struct {
	mutable bool
	r       policyv1beta1.RunAsGroupStrategyOptions
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *RunAsGroupStrategyOptionsDie) DieImmutable(immutable bool) *RunAsGroupStrategyOptionsDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *RunAsGroupStrategyOptionsDie) DieFeed(r policyv1beta1.RunAsGroupStrategyOptions) *RunAsGroupStrategyOptionsDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &RunAsGroupStrategyOptionsDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *RunAsGroupStrategyOptionsDie) DieFeedPtr(r *policyv1beta1.RunAsGroupStrategyOptions) *RunAsGroupStrategyOptionsDie {
	if r == nil {
		r = &policyv1beta1.RunAsGroupStrategyOptions{}
	}
	return d.DieFeed(*r)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *RunAsGroupStrategyOptionsDie) DieFeedJSON(j []byte) *RunAsGroupStrategyOptionsDie {
	r := policyv1beta1.RunAsGroupStrategyOptions{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *RunAsGroupStrategyOptionsDie) DieFeedYAML(y []byte) *RunAsGroupStrategyOptionsDie {
	r := policyv1beta1.RunAsGroupStrategyOptions{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *RunAsGroupStrategyOptionsDie) DieFeedYAMLFile(name string) *RunAsGroupStrategyOptionsDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *RunAsGroupStrategyOptionsDie) DieFeedRawExtension(raw runtime.RawExtension) *RunAsGroupStrategyOptionsDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *RunAsGroupStrategyOptionsDie) DieRelease() policyv1beta1.RunAsGroupStrategyOptions {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *RunAsGroupStrategyOptionsDie) DieReleasePtr() *policyv1beta1.RunAsGroupStrategyOptions {
	r := d.DieRelease()
	return &r
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *RunAsGroupStrategyOptionsDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *RunAsGroupStrategyOptionsDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *RunAsGroupStrategyOptionsDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *RunAsGroupStrategyOptionsDie) DieStamp(fn func(r *policyv1beta1.RunAsGroupStrategyOptions)) *RunAsGroupStrategyOptionsDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *RunAsGroupStrategyOptionsDie) DeepCopy() *RunAsGroupStrategyOptionsDie {
	r := *d.r.DeepCopy()
	return &RunAsGroupStrategyOptionsDie{
		mutable: d.mutable,
		r:       r,
	}
}

// rule is the strategy that will dictate the allowable RunAsGroup values that may be set.
func (d *RunAsGroupStrategyOptionsDie) Rule(v policyv1beta1.RunAsGroupStrategy) *RunAsGroupStrategyOptionsDie {
	return d.DieStamp(func(r *policyv1beta1.RunAsGroupStrategyOptions) {
		r.Rule = v
	})
}

// ranges are the allowed ranges of gids that may be used. If you would like to force a single gid then supply a single range with the same start and end. Required for MustRunAs.
func (d *RunAsGroupStrategyOptionsDie) Ranges(v ...policyv1beta1.IDRange) *RunAsGroupStrategyOptionsDie {
	return d.DieStamp(func(r *policyv1beta1.RunAsGroupStrategyOptions) {
		r.Ranges = v
	})
}

var SupplementalGroupsStrategyOptionsBlank = (&SupplementalGroupsStrategyOptionsDie{}).DieFeed(policyv1beta1.SupplementalGroupsStrategyOptions{})

type SupplementalGroupsStrategyOptionsDie struct {
	mutable bool
	r       policyv1beta1.SupplementalGroupsStrategyOptions
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *SupplementalGroupsStrategyOptionsDie) DieImmutable(immutable bool) *SupplementalGroupsStrategyOptionsDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *SupplementalGroupsStrategyOptionsDie) DieFeed(r policyv1beta1.SupplementalGroupsStrategyOptions) *SupplementalGroupsStrategyOptionsDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &SupplementalGroupsStrategyOptionsDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *SupplementalGroupsStrategyOptionsDie) DieFeedPtr(r *policyv1beta1.SupplementalGroupsStrategyOptions) *SupplementalGroupsStrategyOptionsDie {
	if r == nil {
		r = &policyv1beta1.SupplementalGroupsStrategyOptions{}
	}
	return d.DieFeed(*r)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *SupplementalGroupsStrategyOptionsDie) DieFeedJSON(j []byte) *SupplementalGroupsStrategyOptionsDie {
	r := policyv1beta1.SupplementalGroupsStrategyOptions{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *SupplementalGroupsStrategyOptionsDie) DieFeedYAML(y []byte) *SupplementalGroupsStrategyOptionsDie {
	r := policyv1beta1.SupplementalGroupsStrategyOptions{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *SupplementalGroupsStrategyOptionsDie) DieFeedYAMLFile(name string) *SupplementalGroupsStrategyOptionsDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *SupplementalGroupsStrategyOptionsDie) DieFeedRawExtension(raw runtime.RawExtension) *SupplementalGroupsStrategyOptionsDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *SupplementalGroupsStrategyOptionsDie) DieRelease() policyv1beta1.SupplementalGroupsStrategyOptions {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *SupplementalGroupsStrategyOptionsDie) DieReleasePtr() *policyv1beta1.SupplementalGroupsStrategyOptions {
	r := d.DieRelease()
	return &r
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *SupplementalGroupsStrategyOptionsDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *SupplementalGroupsStrategyOptionsDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *SupplementalGroupsStrategyOptionsDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *SupplementalGroupsStrategyOptionsDie) DieStamp(fn func(r *policyv1beta1.SupplementalGroupsStrategyOptions)) *SupplementalGroupsStrategyOptionsDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *SupplementalGroupsStrategyOptionsDie) DeepCopy() *SupplementalGroupsStrategyOptionsDie {
	r := *d.r.DeepCopy()
	return &SupplementalGroupsStrategyOptionsDie{
		mutable: d.mutable,
		r:       r,
	}
}

// rule is the strategy that will dictate what supplemental groups is used in the SecurityContext.
func (d *SupplementalGroupsStrategyOptionsDie) Rule(v policyv1beta1.SupplementalGroupsStrategyType) *SupplementalGroupsStrategyOptionsDie {
	return d.DieStamp(func(r *policyv1beta1.SupplementalGroupsStrategyOptions) {
		r.Rule = v
	})
}

// ranges are the allowed ranges of supplemental groups.  If you would like to force a single supplemental group then supply a single range with the same start and end. Required for MustRunAs.
func (d *SupplementalGroupsStrategyOptionsDie) Ranges(v ...policyv1beta1.IDRange) *SupplementalGroupsStrategyOptionsDie {
	return d.DieStamp(func(r *policyv1beta1.SupplementalGroupsStrategyOptions) {
		r.Ranges = v
	})
}

var FSGroupStrategyOptionsBlank = (&FSGroupStrategyOptionsDie{}).DieFeed(policyv1beta1.FSGroupStrategyOptions{})

type FSGroupStrategyOptionsDie struct {
	mutable bool
	r       policyv1beta1.FSGroupStrategyOptions
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *FSGroupStrategyOptionsDie) DieImmutable(immutable bool) *FSGroupStrategyOptionsDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *FSGroupStrategyOptionsDie) DieFeed(r policyv1beta1.FSGroupStrategyOptions) *FSGroupStrategyOptionsDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &FSGroupStrategyOptionsDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *FSGroupStrategyOptionsDie) DieFeedPtr(r *policyv1beta1.FSGroupStrategyOptions) *FSGroupStrategyOptionsDie {
	if r == nil {
		r = &policyv1beta1.FSGroupStrategyOptions{}
	}
	return d.DieFeed(*r)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *FSGroupStrategyOptionsDie) DieFeedJSON(j []byte) *FSGroupStrategyOptionsDie {
	r := policyv1beta1.FSGroupStrategyOptions{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *FSGroupStrategyOptionsDie) DieFeedYAML(y []byte) *FSGroupStrategyOptionsDie {
	r := policyv1beta1.FSGroupStrategyOptions{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *FSGroupStrategyOptionsDie) DieFeedYAMLFile(name string) *FSGroupStrategyOptionsDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *FSGroupStrategyOptionsDie) DieFeedRawExtension(raw runtime.RawExtension) *FSGroupStrategyOptionsDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *FSGroupStrategyOptionsDie) DieRelease() policyv1beta1.FSGroupStrategyOptions {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *FSGroupStrategyOptionsDie) DieReleasePtr() *policyv1beta1.FSGroupStrategyOptions {
	r := d.DieRelease()
	return &r
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *FSGroupStrategyOptionsDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *FSGroupStrategyOptionsDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *FSGroupStrategyOptionsDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *FSGroupStrategyOptionsDie) DieStamp(fn func(r *policyv1beta1.FSGroupStrategyOptions)) *FSGroupStrategyOptionsDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *FSGroupStrategyOptionsDie) DeepCopy() *FSGroupStrategyOptionsDie {
	r := *d.r.DeepCopy()
	return &FSGroupStrategyOptionsDie{
		mutable: d.mutable,
		r:       r,
	}
}

// rule is the strategy that will dictate what FSGroup is used in the SecurityContext.
func (d *FSGroupStrategyOptionsDie) Rule(v policyv1beta1.FSGroupStrategyType) *FSGroupStrategyOptionsDie {
	return d.DieStamp(func(r *policyv1beta1.FSGroupStrategyOptions) {
		r.Rule = v
	})
}

// ranges are the allowed ranges of fs groups.  If you would like to force a single fs group then supply a single range with the same start and end. Required for MustRunAs.
func (d *FSGroupStrategyOptionsDie) Ranges(v ...policyv1beta1.IDRange) *FSGroupStrategyOptionsDie {
	return d.DieStamp(func(r *policyv1beta1.FSGroupStrategyOptions) {
		r.Ranges = v
	})
}

var AllowedHostPathBlank = (&AllowedHostPathDie{}).DieFeed(policyv1beta1.AllowedHostPath{})

type AllowedHostPathDie struct {
	mutable bool
	r       policyv1beta1.AllowedHostPath
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *AllowedHostPathDie) DieImmutable(immutable bool) *AllowedHostPathDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *AllowedHostPathDie) DieFeed(r policyv1beta1.AllowedHostPath) *AllowedHostPathDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &AllowedHostPathDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *AllowedHostPathDie) DieFeedPtr(r *policyv1beta1.AllowedHostPath) *AllowedHostPathDie {
	if r == nil {
		r = &policyv1beta1.AllowedHostPath{}
	}
	return d.DieFeed(*r)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *AllowedHostPathDie) DieFeedJSON(j []byte) *AllowedHostPathDie {
	r := policyv1beta1.AllowedHostPath{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *AllowedHostPathDie) DieFeedYAML(y []byte) *AllowedHostPathDie {
	r := policyv1beta1.AllowedHostPath{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *AllowedHostPathDie) DieFeedYAMLFile(name string) *AllowedHostPathDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *AllowedHostPathDie) DieFeedRawExtension(raw runtime.RawExtension) *AllowedHostPathDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *AllowedHostPathDie) DieRelease() policyv1beta1.AllowedHostPath {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *AllowedHostPathDie) DieReleasePtr() *policyv1beta1.AllowedHostPath {
	r := d.DieRelease()
	return &r
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *AllowedHostPathDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *AllowedHostPathDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *AllowedHostPathDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *AllowedHostPathDie) DieStamp(fn func(r *policyv1beta1.AllowedHostPath)) *AllowedHostPathDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *AllowedHostPathDie) DeepCopy() *AllowedHostPathDie {
	r := *d.r.DeepCopy()
	return &AllowedHostPathDie{
		mutable: d.mutable,
		r:       r,
	}
}

// pathPrefix is the path prefix that the host volume must match. It does not support `*`. Trailing slashes are trimmed when validating the path prefix with a host path.
//
// Examples: `/foo` would allow `/foo`, `/foo/` and `/foo/bar` `/foo` would not allow `/food` or `/etc/foo`
func (d *AllowedHostPathDie) PathPrefix(v string) *AllowedHostPathDie {
	return d.DieStamp(func(r *policyv1beta1.AllowedHostPath) {
		r.PathPrefix = v
	})
}

// when set to true, will allow host volumes matching the pathPrefix only if all volume mounts are readOnly.
func (d *AllowedHostPathDie) ReadOnly(v bool) *AllowedHostPathDie {
	return d.DieStamp(func(r *policyv1beta1.AllowedHostPath) {
		r.ReadOnly = v
	})
}

var AllowedFlexVolumeBlank = (&AllowedFlexVolumeDie{}).DieFeed(policyv1beta1.AllowedFlexVolume{})

type AllowedFlexVolumeDie struct {
	mutable bool
	r       policyv1beta1.AllowedFlexVolume
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *AllowedFlexVolumeDie) DieImmutable(immutable bool) *AllowedFlexVolumeDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *AllowedFlexVolumeDie) DieFeed(r policyv1beta1.AllowedFlexVolume) *AllowedFlexVolumeDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &AllowedFlexVolumeDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *AllowedFlexVolumeDie) DieFeedPtr(r *policyv1beta1.AllowedFlexVolume) *AllowedFlexVolumeDie {
	if r == nil {
		r = &policyv1beta1.AllowedFlexVolume{}
	}
	return d.DieFeed(*r)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *AllowedFlexVolumeDie) DieFeedJSON(j []byte) *AllowedFlexVolumeDie {
	r := policyv1beta1.AllowedFlexVolume{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *AllowedFlexVolumeDie) DieFeedYAML(y []byte) *AllowedFlexVolumeDie {
	r := policyv1beta1.AllowedFlexVolume{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *AllowedFlexVolumeDie) DieFeedYAMLFile(name string) *AllowedFlexVolumeDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *AllowedFlexVolumeDie) DieFeedRawExtension(raw runtime.RawExtension) *AllowedFlexVolumeDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *AllowedFlexVolumeDie) DieRelease() policyv1beta1.AllowedFlexVolume {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *AllowedFlexVolumeDie) DieReleasePtr() *policyv1beta1.AllowedFlexVolume {
	r := d.DieRelease()
	return &r
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *AllowedFlexVolumeDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *AllowedFlexVolumeDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *AllowedFlexVolumeDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *AllowedFlexVolumeDie) DieStamp(fn func(r *policyv1beta1.AllowedFlexVolume)) *AllowedFlexVolumeDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *AllowedFlexVolumeDie) DeepCopy() *AllowedFlexVolumeDie {
	r := *d.r.DeepCopy()
	return &AllowedFlexVolumeDie{
		mutable: d.mutable,
		r:       r,
	}
}

// driver is the name of the Flexvolume driver.
func (d *AllowedFlexVolumeDie) Driver(v string) *AllowedFlexVolumeDie {
	return d.DieStamp(func(r *policyv1beta1.AllowedFlexVolume) {
		r.Driver = v
	})
}

var AllowedCSIDriverBlank = (&AllowedCSIDriverDie{}).DieFeed(policyv1beta1.AllowedCSIDriver{})

type AllowedCSIDriverDie struct {
	mutable bool
	r       policyv1beta1.AllowedCSIDriver
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *AllowedCSIDriverDie) DieImmutable(immutable bool) *AllowedCSIDriverDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *AllowedCSIDriverDie) DieFeed(r policyv1beta1.AllowedCSIDriver) *AllowedCSIDriverDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &AllowedCSIDriverDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *AllowedCSIDriverDie) DieFeedPtr(r *policyv1beta1.AllowedCSIDriver) *AllowedCSIDriverDie {
	if r == nil {
		r = &policyv1beta1.AllowedCSIDriver{}
	}
	return d.DieFeed(*r)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *AllowedCSIDriverDie) DieFeedJSON(j []byte) *AllowedCSIDriverDie {
	r := policyv1beta1.AllowedCSIDriver{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *AllowedCSIDriverDie) DieFeedYAML(y []byte) *AllowedCSIDriverDie {
	r := policyv1beta1.AllowedCSIDriver{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *AllowedCSIDriverDie) DieFeedYAMLFile(name string) *AllowedCSIDriverDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *AllowedCSIDriverDie) DieFeedRawExtension(raw runtime.RawExtension) *AllowedCSIDriverDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *AllowedCSIDriverDie) DieRelease() policyv1beta1.AllowedCSIDriver {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *AllowedCSIDriverDie) DieReleasePtr() *policyv1beta1.AllowedCSIDriver {
	r := d.DieRelease()
	return &r
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *AllowedCSIDriverDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *AllowedCSIDriverDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *AllowedCSIDriverDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *AllowedCSIDriverDie) DieStamp(fn func(r *policyv1beta1.AllowedCSIDriver)) *AllowedCSIDriverDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *AllowedCSIDriverDie) DeepCopy() *AllowedCSIDriverDie {
	r := *d.r.DeepCopy()
	return &AllowedCSIDriverDie{
		mutable: d.mutable,
		r:       r,
	}
}

// Name is the registered name of the CSI driver
func (d *AllowedCSIDriverDie) Name(v string) *AllowedCSIDriverDie {
	return d.DieStamp(func(r *policyv1beta1.AllowedCSIDriver) {
		r.Name = v
	})
}

var RuntimeClassStrategyOptionsBlank = (&RuntimeClassStrategyOptionsDie{}).DieFeed(policyv1beta1.RuntimeClassStrategyOptions{})

type RuntimeClassStrategyOptionsDie struct {
	mutable bool
	r       policyv1beta1.RuntimeClassStrategyOptions
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *RuntimeClassStrategyOptionsDie) DieImmutable(immutable bool) *RuntimeClassStrategyOptionsDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *RuntimeClassStrategyOptionsDie) DieFeed(r policyv1beta1.RuntimeClassStrategyOptions) *RuntimeClassStrategyOptionsDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &RuntimeClassStrategyOptionsDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *RuntimeClassStrategyOptionsDie) DieFeedPtr(r *policyv1beta1.RuntimeClassStrategyOptions) *RuntimeClassStrategyOptionsDie {
	if r == nil {
		r = &policyv1beta1.RuntimeClassStrategyOptions{}
	}
	return d.DieFeed(*r)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *RuntimeClassStrategyOptionsDie) DieFeedJSON(j []byte) *RuntimeClassStrategyOptionsDie {
	r := policyv1beta1.RuntimeClassStrategyOptions{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *RuntimeClassStrategyOptionsDie) DieFeedYAML(y []byte) *RuntimeClassStrategyOptionsDie {
	r := policyv1beta1.RuntimeClassStrategyOptions{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *RuntimeClassStrategyOptionsDie) DieFeedYAMLFile(name string) *RuntimeClassStrategyOptionsDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *RuntimeClassStrategyOptionsDie) DieFeedRawExtension(raw runtime.RawExtension) *RuntimeClassStrategyOptionsDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *RuntimeClassStrategyOptionsDie) DieRelease() policyv1beta1.RuntimeClassStrategyOptions {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *RuntimeClassStrategyOptionsDie) DieReleasePtr() *policyv1beta1.RuntimeClassStrategyOptions {
	r := d.DieRelease()
	return &r
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *RuntimeClassStrategyOptionsDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *RuntimeClassStrategyOptionsDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *RuntimeClassStrategyOptionsDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *RuntimeClassStrategyOptionsDie) DieStamp(fn func(r *policyv1beta1.RuntimeClassStrategyOptions)) *RuntimeClassStrategyOptionsDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *RuntimeClassStrategyOptionsDie) DeepCopy() *RuntimeClassStrategyOptionsDie {
	r := *d.r.DeepCopy()
	return &RuntimeClassStrategyOptionsDie{
		mutable: d.mutable,
		r:       r,
	}
}

// allowedRuntimeClassNames is an allowlist of RuntimeClass names that may be specified on a pod. A value of "*" means that any RuntimeClass name is allowed, and must be the only item in the list. An empty list requires the RuntimeClassName field to be unset.
func (d *RuntimeClassStrategyOptionsDie) AllowedRuntimeClassNames(v ...string) *RuntimeClassStrategyOptionsDie {
	return d.DieStamp(func(r *policyv1beta1.RuntimeClassStrategyOptions) {
		r.AllowedRuntimeClassNames = v
	})
}

// defaultRuntimeClassName is the default RuntimeClassName to set on the pod. The default MUST be allowed by the allowedRuntimeClassNames list. A value of nil does not mutate the Pod.
func (d *RuntimeClassStrategyOptionsDie) DefaultRuntimeClassName(v *string) *RuntimeClassStrategyOptionsDie {
	return d.DieStamp(func(r *policyv1beta1.RuntimeClassStrategyOptions) {
		r.DefaultRuntimeClassName = v
	})
}

var IDRangeBlank = (&IDRangeDie{}).DieFeed(policyv1beta1.IDRange{})

type IDRangeDie struct {
	mutable bool
	r       policyv1beta1.IDRange
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *IDRangeDie) DieImmutable(immutable bool) *IDRangeDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *IDRangeDie) DieFeed(r policyv1beta1.IDRange) *IDRangeDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &IDRangeDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *IDRangeDie) DieFeedPtr(r *policyv1beta1.IDRange) *IDRangeDie {
	if r == nil {
		r = &policyv1beta1.IDRange{}
	}
	return d.DieFeed(*r)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *IDRangeDie) DieFeedJSON(j []byte) *IDRangeDie {
	r := policyv1beta1.IDRange{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *IDRangeDie) DieFeedYAML(y []byte) *IDRangeDie {
	r := policyv1beta1.IDRange{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *IDRangeDie) DieFeedYAMLFile(name string) *IDRangeDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *IDRangeDie) DieFeedRawExtension(raw runtime.RawExtension) *IDRangeDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *IDRangeDie) DieRelease() policyv1beta1.IDRange {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *IDRangeDie) DieReleasePtr() *policyv1beta1.IDRange {
	r := d.DieRelease()
	return &r
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *IDRangeDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *IDRangeDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *IDRangeDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *IDRangeDie) DieStamp(fn func(r *policyv1beta1.IDRange)) *IDRangeDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *IDRangeDie) DeepCopy() *IDRangeDie {
	r := *d.r.DeepCopy()
	return &IDRangeDie{
		mutable: d.mutable,
		r:       r,
	}
}

// min is the start of the range, inclusive.
func (d *IDRangeDie) Min(v int64) *IDRangeDie {
	return d.DieStamp(func(r *policyv1beta1.IDRange) {
		r.Min = v
	})
}

// max is the end of the range, inclusive.
func (d *IDRangeDie) Max(v int64) *IDRangeDie {
	return d.DieStamp(func(r *policyv1beta1.IDRange) {
		r.Max = v
	})
}
