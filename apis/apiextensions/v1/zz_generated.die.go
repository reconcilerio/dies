//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright 2021-2022 the original author or authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by diegen. DO NOT EDIT.

package v1

import (
	metav1 "dies.dev/apis/meta/v1"
	json "encoding/json"
	fmtx "fmt"
	apiextensionsv1 "k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1"
	unstructured "k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
	runtime "k8s.io/apimachinery/pkg/runtime"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	jsonpath "k8s.io/client-go/util/jsonpath"
	osx "os"
	reflectx "reflect"
	yaml "sigs.k8s.io/yaml"
)

var CustomResourceDefinitionBlank = (&CustomResourceDefinitionDie{}).DieFeed(apiextensionsv1.CustomResourceDefinition{})

type CustomResourceDefinitionDie struct {
	metav1.FrozenObjectMeta
	mutable bool
	r       apiextensionsv1.CustomResourceDefinition
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *CustomResourceDefinitionDie) DieImmutable(immutable bool) *CustomResourceDefinitionDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *CustomResourceDefinitionDie) DieFeed(r apiextensionsv1.CustomResourceDefinition) *CustomResourceDefinitionDie {
	if d.mutable {
		d.FrozenObjectMeta = metav1.FreezeObjectMeta(r.ObjectMeta)
		d.r = r
		return d
	}
	return &CustomResourceDefinitionDie{
		FrozenObjectMeta: metav1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *CustomResourceDefinitionDie) DieFeedPtr(r *apiextensionsv1.CustomResourceDefinition) *CustomResourceDefinitionDie {
	if r == nil {
		r = &apiextensionsv1.CustomResourceDefinition{}
	}
	return d.DieFeed(*r)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *CustomResourceDefinitionDie) DieFeedJSON(j []byte) *CustomResourceDefinitionDie {
	r := apiextensionsv1.CustomResourceDefinition{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *CustomResourceDefinitionDie) DieFeedYAML(y []byte) *CustomResourceDefinitionDie {
	r := apiextensionsv1.CustomResourceDefinition{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *CustomResourceDefinitionDie) DieFeedYAMLFile(name string) *CustomResourceDefinitionDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *CustomResourceDefinitionDie) DieFeedRawExtension(raw runtime.RawExtension) *CustomResourceDefinitionDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *CustomResourceDefinitionDie) DieRelease() apiextensionsv1.CustomResourceDefinition {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *CustomResourceDefinitionDie) DieReleasePtr() *apiextensionsv1.CustomResourceDefinition {
	r := d.DieRelease()
	return &r
}

// DieReleaseUnstructured returns the resource managed by the die as an unstructured object. Panics on error.
func (d *CustomResourceDefinitionDie) DieReleaseUnstructured() *unstructured.Unstructured {
	r := d.DieReleasePtr()
	u, err := runtime.DefaultUnstructuredConverter.ToUnstructured(r)
	if err != nil {
		panic(err)
	}
	return &unstructured.Unstructured{
		Object: u,
	}
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *CustomResourceDefinitionDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *CustomResourceDefinitionDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *CustomResourceDefinitionDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *CustomResourceDefinitionDie) DieStamp(fn func(r *apiextensionsv1.CustomResourceDefinition)) *CustomResourceDefinitionDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// Experimental: DieStampAt uses a JSON path (http://goessner.net/articles/JsonPath/) expression to stamp portions of the resource. The callback is invoked with each JSON path match. Panics if the callback function does not accept a single argument of the same type or a pointer to that type as found on the resource at the target location.
//
// Future iterations will improve type coercion from the resource to the callback argument.
func (d *CustomResourceDefinitionDie) DieStampAt(jp string, fn interface{}) *CustomResourceDefinitionDie {
	return d.DieStamp(func(r *apiextensionsv1.CustomResourceDefinition) {
		if ni := reflectx.ValueOf(fn).Type().NumIn(); ni != 1 {
			panic(fmtx.Errorf("callback function must have 1 input parameters, found %d", ni))
		}
		if no := reflectx.ValueOf(fn).Type().NumOut(); no != 0 {
			panic(fmtx.Errorf("callback function must have 0 output parameters, found %d", no))
		}

		cp := jsonpath.New("")
		if err := cp.Parse(fmtx.Sprintf("{%s}", jp)); err != nil {
			panic(err)
		}
		cr, err := cp.FindResults(r)
		if err != nil {
			// errors are expected if a path is not found
			return
		}
		for _, cv := range cr[0] {
			arg0t := reflectx.ValueOf(fn).Type().In(0)

			var args []reflectx.Value
			if cv.Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv}
			} else if cv.CanAddr() && cv.Addr().Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv.Addr()}
			} else {
				panic(fmtx.Errorf("callback function must accept value of type %q, found type %q", cv.Type(), arg0t))
			}

			reflectx.ValueOf(fn).Call(args)
		}
	})
}

// DieWith returns a new die after passing the current die to the callback function. The passed die is mutable.
func (d *CustomResourceDefinitionDie) DieWith(fns ...func(d *CustomResourceDefinitionDie)) *CustomResourceDefinitionDie {
	nd := CustomResourceDefinitionBlank.DieFeed(d.DieRelease()).DieImmutable(false)
	for _, fn := range fns {
		if fn != nil {
			fn(nd)
		}
	}
	return d.DieFeed(nd.DieRelease())
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *CustomResourceDefinitionDie) DeepCopy() *CustomResourceDefinitionDie {
	r := *d.r.DeepCopy()
	return &CustomResourceDefinitionDie{
		FrozenObjectMeta: metav1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
	}
}

var _ runtime.Object = (*CustomResourceDefinitionDie)(nil)

func (d *CustomResourceDefinitionDie) DeepCopyObject() runtime.Object {
	return d.r.DeepCopy()
}

func (d *CustomResourceDefinitionDie) GetObjectKind() schema.ObjectKind {
	r := d.DieRelease()
	return r.GetObjectKind()
}

func (d *CustomResourceDefinitionDie) MarshalJSON() ([]byte, error) {
	return json.Marshal(d.r)
}

func (d *CustomResourceDefinitionDie) UnmarshalJSON(b []byte) error {
	if d == CustomResourceDefinitionBlank {
		return fmtx.Errorf("cannot unmarshal into the blank die, create a copy first")
	}
	if !d.mutable {
		return fmtx.Errorf("cannot unmarshal into immutable dies, create a mutable version first")
	}
	r := &apiextensionsv1.CustomResourceDefinition{}
	err := json.Unmarshal(b, r)
	*d = *d.DieFeed(*r)
	return err
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (d *CustomResourceDefinitionDie) APIVersion(v string) *CustomResourceDefinitionDie {
	return d.DieStamp(func(r *apiextensionsv1.CustomResourceDefinition) {
		r.APIVersion = v
	})
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (d *CustomResourceDefinitionDie) Kind(v string) *CustomResourceDefinitionDie {
	return d.DieStamp(func(r *apiextensionsv1.CustomResourceDefinition) {
		r.Kind = v
	})
}

// MetadataDie stamps the resource's ObjectMeta field with a mutable die.
func (d *CustomResourceDefinitionDie) MetadataDie(fn func(d *metav1.ObjectMetaDie)) *CustomResourceDefinitionDie {
	return d.DieStamp(func(r *apiextensionsv1.CustomResourceDefinition) {
		d := metav1.ObjectMetaBlank.DieImmutable(false).DieFeed(r.ObjectMeta)
		fn(d)
		r.ObjectMeta = d.DieRelease()
	})
}

// SpecDie stamps the resource's spec field with a mutable die.
func (d *CustomResourceDefinitionDie) SpecDie(fn func(d *CustomResourceDefinitionSpecDie)) *CustomResourceDefinitionDie {
	return d.DieStamp(func(r *apiextensionsv1.CustomResourceDefinition) {
		d := CustomResourceDefinitionSpecBlank.DieImmutable(false).DieFeed(r.Spec)
		fn(d)
		r.Spec = d.DieRelease()
	})
}

// StatusDie stamps the resource's status field with a mutable die.
func (d *CustomResourceDefinitionDie) StatusDie(fn func(d *CustomResourceDefinitionStatusDie)) *CustomResourceDefinitionDie {
	return d.DieStamp(func(r *apiextensionsv1.CustomResourceDefinition) {
		d := CustomResourceDefinitionStatusBlank.DieImmutable(false).DieFeed(r.Status)
		fn(d)
		r.Status = d.DieRelease()
	})
}

// spec describes how the user wants the resources to appear
func (d *CustomResourceDefinitionDie) Spec(v apiextensionsv1.CustomResourceDefinitionSpec) *CustomResourceDefinitionDie {
	return d.DieStamp(func(r *apiextensionsv1.CustomResourceDefinition) {
		r.Spec = v
	})
}

// status indicates the actual state of the CustomResourceDefinition
func (d *CustomResourceDefinitionDie) Status(v apiextensionsv1.CustomResourceDefinitionStatus) *CustomResourceDefinitionDie {
	return d.DieStamp(func(r *apiextensionsv1.CustomResourceDefinition) {
		r.Status = v
	})
}

var CustomResourceDefinitionSpecBlank = (&CustomResourceDefinitionSpecDie{}).DieFeed(apiextensionsv1.CustomResourceDefinitionSpec{})

type CustomResourceDefinitionSpecDie struct {
	mutable bool
	r       apiextensionsv1.CustomResourceDefinitionSpec
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *CustomResourceDefinitionSpecDie) DieImmutable(immutable bool) *CustomResourceDefinitionSpecDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *CustomResourceDefinitionSpecDie) DieFeed(r apiextensionsv1.CustomResourceDefinitionSpec) *CustomResourceDefinitionSpecDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &CustomResourceDefinitionSpecDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *CustomResourceDefinitionSpecDie) DieFeedPtr(r *apiextensionsv1.CustomResourceDefinitionSpec) *CustomResourceDefinitionSpecDie {
	if r == nil {
		r = &apiextensionsv1.CustomResourceDefinitionSpec{}
	}
	return d.DieFeed(*r)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *CustomResourceDefinitionSpecDie) DieFeedJSON(j []byte) *CustomResourceDefinitionSpecDie {
	r := apiextensionsv1.CustomResourceDefinitionSpec{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *CustomResourceDefinitionSpecDie) DieFeedYAML(y []byte) *CustomResourceDefinitionSpecDie {
	r := apiextensionsv1.CustomResourceDefinitionSpec{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *CustomResourceDefinitionSpecDie) DieFeedYAMLFile(name string) *CustomResourceDefinitionSpecDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *CustomResourceDefinitionSpecDie) DieFeedRawExtension(raw runtime.RawExtension) *CustomResourceDefinitionSpecDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *CustomResourceDefinitionSpecDie) DieRelease() apiextensionsv1.CustomResourceDefinitionSpec {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *CustomResourceDefinitionSpecDie) DieReleasePtr() *apiextensionsv1.CustomResourceDefinitionSpec {
	r := d.DieRelease()
	return &r
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *CustomResourceDefinitionSpecDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *CustomResourceDefinitionSpecDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *CustomResourceDefinitionSpecDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *CustomResourceDefinitionSpecDie) DieStamp(fn func(r *apiextensionsv1.CustomResourceDefinitionSpec)) *CustomResourceDefinitionSpecDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// Experimental: DieStampAt uses a JSON path (http://goessner.net/articles/JsonPath/) expression to stamp portions of the resource. The callback is invoked with each JSON path match. Panics if the callback function does not accept a single argument of the same type or a pointer to that type as found on the resource at the target location.
//
// Future iterations will improve type coercion from the resource to the callback argument.
func (d *CustomResourceDefinitionSpecDie) DieStampAt(jp string, fn interface{}) *CustomResourceDefinitionSpecDie {
	return d.DieStamp(func(r *apiextensionsv1.CustomResourceDefinitionSpec) {
		if ni := reflectx.ValueOf(fn).Type().NumIn(); ni != 1 {
			panic(fmtx.Errorf("callback function must have 1 input parameters, found %d", ni))
		}
		if no := reflectx.ValueOf(fn).Type().NumOut(); no != 0 {
			panic(fmtx.Errorf("callback function must have 0 output parameters, found %d", no))
		}

		cp := jsonpath.New("")
		if err := cp.Parse(fmtx.Sprintf("{%s}", jp)); err != nil {
			panic(err)
		}
		cr, err := cp.FindResults(r)
		if err != nil {
			// errors are expected if a path is not found
			return
		}
		for _, cv := range cr[0] {
			arg0t := reflectx.ValueOf(fn).Type().In(0)

			var args []reflectx.Value
			if cv.Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv}
			} else if cv.CanAddr() && cv.Addr().Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv.Addr()}
			} else {
				panic(fmtx.Errorf("callback function must accept value of type %q, found type %q", cv.Type(), arg0t))
			}

			reflectx.ValueOf(fn).Call(args)
		}
	})
}

// DieWith returns a new die after passing the current die to the callback function. The passed die is mutable.
func (d *CustomResourceDefinitionSpecDie) DieWith(fns ...func(d *CustomResourceDefinitionSpecDie)) *CustomResourceDefinitionSpecDie {
	nd := CustomResourceDefinitionSpecBlank.DieFeed(d.DieRelease()).DieImmutable(false)
	for _, fn := range fns {
		if fn != nil {
			fn(nd)
		}
	}
	return d.DieFeed(nd.DieRelease())
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *CustomResourceDefinitionSpecDie) DeepCopy() *CustomResourceDefinitionSpecDie {
	r := *d.r.DeepCopy()
	return &CustomResourceDefinitionSpecDie{
		mutable: d.mutable,
		r:       r,
	}
}

// group is the API group of the defined custom resource. The custom resources are served under `/apis/<group>/...`. Must match the name of the CustomResourceDefinition (in the form `<names.plural>.<group>`).
func (d *CustomResourceDefinitionSpecDie) Group(v string) *CustomResourceDefinitionSpecDie {
	return d.DieStamp(func(r *apiextensionsv1.CustomResourceDefinitionSpec) {
		r.Group = v
	})
}

// names specify the resource and kind names for the custom resource.
func (d *CustomResourceDefinitionSpecDie) Names(v apiextensionsv1.CustomResourceDefinitionNames) *CustomResourceDefinitionSpecDie {
	return d.DieStamp(func(r *apiextensionsv1.CustomResourceDefinitionSpec) {
		r.Names = v
	})
}

// scope indicates whether the defined custom resource is cluster- or namespace-scoped. Allowed values are `Cluster` and `Namespaced`.
func (d *CustomResourceDefinitionSpecDie) Scope(v apiextensionsv1.ResourceScope) *CustomResourceDefinitionSpecDie {
	return d.DieStamp(func(r *apiextensionsv1.CustomResourceDefinitionSpec) {
		r.Scope = v
	})
}

// versions is the list of all API versions of the defined custom resource. Version names are used to compute the order in which served versions are listed in API discovery. If the version string is "kube-like", it will sort above non "kube-like" version strings, which are ordered lexicographically. "Kube-like" versions start with a "v", then are followed by a number (the major version), then optionally the string "alpha" or "beta" and another number (the minor version). These are sorted first by GA > beta > alpha (where GA is a version with no suffix such as beta or alpha), and then by comparing major version, then minor version. An example sorted list of versions: v10, v2, v1, v11beta2, v10beta3, v3beta1, v12alpha1, v11alpha2, foo1, foo10.
func (d *CustomResourceDefinitionSpecDie) Versions(v ...apiextensionsv1.CustomResourceDefinitionVersion) *CustomResourceDefinitionSpecDie {
	return d.DieStamp(func(r *apiextensionsv1.CustomResourceDefinitionSpec) {
		r.Versions = v
	})
}

// conversion defines conversion settings for the CRD.
func (d *CustomResourceDefinitionSpecDie) Conversion(v *apiextensionsv1.CustomResourceConversion) *CustomResourceDefinitionSpecDie {
	return d.DieStamp(func(r *apiextensionsv1.CustomResourceDefinitionSpec) {
		r.Conversion = v
	})
}

// preserveUnknownFields indicates that object fields which are not specified in the OpenAPI schema should be preserved when persisting to storage. apiVersion, kind, metadata and known fields inside metadata are always preserved. This field is deprecated in favor of setting `x-preserve-unknown-fields` to true in `spec.versions[*].schema.openAPIV3Schema`. See https://kubernetes.io/docs/tasks/extend-kubernetes/custom-resources/custom-resource-definitions/#field-pruning for details.
func (d *CustomResourceDefinitionSpecDie) PreserveUnknownFields(v bool) *CustomResourceDefinitionSpecDie {
	return d.DieStamp(func(r *apiextensionsv1.CustomResourceDefinitionSpec) {
		r.PreserveUnknownFields = v
	})
}

var CustomResourceDefinitionVersionBlank = (&CustomResourceDefinitionVersionDie{}).DieFeed(apiextensionsv1.CustomResourceDefinitionVersion{})

type CustomResourceDefinitionVersionDie struct {
	mutable bool
	r       apiextensionsv1.CustomResourceDefinitionVersion
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *CustomResourceDefinitionVersionDie) DieImmutable(immutable bool) *CustomResourceDefinitionVersionDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *CustomResourceDefinitionVersionDie) DieFeed(r apiextensionsv1.CustomResourceDefinitionVersion) *CustomResourceDefinitionVersionDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &CustomResourceDefinitionVersionDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *CustomResourceDefinitionVersionDie) DieFeedPtr(r *apiextensionsv1.CustomResourceDefinitionVersion) *CustomResourceDefinitionVersionDie {
	if r == nil {
		r = &apiextensionsv1.CustomResourceDefinitionVersion{}
	}
	return d.DieFeed(*r)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *CustomResourceDefinitionVersionDie) DieFeedJSON(j []byte) *CustomResourceDefinitionVersionDie {
	r := apiextensionsv1.CustomResourceDefinitionVersion{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *CustomResourceDefinitionVersionDie) DieFeedYAML(y []byte) *CustomResourceDefinitionVersionDie {
	r := apiextensionsv1.CustomResourceDefinitionVersion{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *CustomResourceDefinitionVersionDie) DieFeedYAMLFile(name string) *CustomResourceDefinitionVersionDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *CustomResourceDefinitionVersionDie) DieFeedRawExtension(raw runtime.RawExtension) *CustomResourceDefinitionVersionDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *CustomResourceDefinitionVersionDie) DieRelease() apiextensionsv1.CustomResourceDefinitionVersion {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *CustomResourceDefinitionVersionDie) DieReleasePtr() *apiextensionsv1.CustomResourceDefinitionVersion {
	r := d.DieRelease()
	return &r
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *CustomResourceDefinitionVersionDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *CustomResourceDefinitionVersionDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *CustomResourceDefinitionVersionDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *CustomResourceDefinitionVersionDie) DieStamp(fn func(r *apiextensionsv1.CustomResourceDefinitionVersion)) *CustomResourceDefinitionVersionDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// Experimental: DieStampAt uses a JSON path (http://goessner.net/articles/JsonPath/) expression to stamp portions of the resource. The callback is invoked with each JSON path match. Panics if the callback function does not accept a single argument of the same type or a pointer to that type as found on the resource at the target location.
//
// Future iterations will improve type coercion from the resource to the callback argument.
func (d *CustomResourceDefinitionVersionDie) DieStampAt(jp string, fn interface{}) *CustomResourceDefinitionVersionDie {
	return d.DieStamp(func(r *apiextensionsv1.CustomResourceDefinitionVersion) {
		if ni := reflectx.ValueOf(fn).Type().NumIn(); ni != 1 {
			panic(fmtx.Errorf("callback function must have 1 input parameters, found %d", ni))
		}
		if no := reflectx.ValueOf(fn).Type().NumOut(); no != 0 {
			panic(fmtx.Errorf("callback function must have 0 output parameters, found %d", no))
		}

		cp := jsonpath.New("")
		if err := cp.Parse(fmtx.Sprintf("{%s}", jp)); err != nil {
			panic(err)
		}
		cr, err := cp.FindResults(r)
		if err != nil {
			// errors are expected if a path is not found
			return
		}
		for _, cv := range cr[0] {
			arg0t := reflectx.ValueOf(fn).Type().In(0)

			var args []reflectx.Value
			if cv.Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv}
			} else if cv.CanAddr() && cv.Addr().Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv.Addr()}
			} else {
				panic(fmtx.Errorf("callback function must accept value of type %q, found type %q", cv.Type(), arg0t))
			}

			reflectx.ValueOf(fn).Call(args)
		}
	})
}

// DieWith returns a new die after passing the current die to the callback function. The passed die is mutable.
func (d *CustomResourceDefinitionVersionDie) DieWith(fns ...func(d *CustomResourceDefinitionVersionDie)) *CustomResourceDefinitionVersionDie {
	nd := CustomResourceDefinitionVersionBlank.DieFeed(d.DieRelease()).DieImmutable(false)
	for _, fn := range fns {
		if fn != nil {
			fn(nd)
		}
	}
	return d.DieFeed(nd.DieRelease())
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *CustomResourceDefinitionVersionDie) DeepCopy() *CustomResourceDefinitionVersionDie {
	r := *d.r.DeepCopy()
	return &CustomResourceDefinitionVersionDie{
		mutable: d.mutable,
		r:       r,
	}
}

// name is the version name, e.g. “v1”, “v2beta1”, etc. The custom resources are served under this version at `/apis/<group>/<version>/...` if `served` is true.
func (d *CustomResourceDefinitionVersionDie) Name(v string) *CustomResourceDefinitionVersionDie {
	return d.DieStamp(func(r *apiextensionsv1.CustomResourceDefinitionVersion) {
		r.Name = v
	})
}

// served is a flag enabling/disabling this version from being served via REST APIs
func (d *CustomResourceDefinitionVersionDie) Served(v bool) *CustomResourceDefinitionVersionDie {
	return d.DieStamp(func(r *apiextensionsv1.CustomResourceDefinitionVersion) {
		r.Served = v
	})
}

// storage indicates this version should be used when persisting custom resources to storage. There must be exactly one version with storage=true.
func (d *CustomResourceDefinitionVersionDie) Storage(v bool) *CustomResourceDefinitionVersionDie {
	return d.DieStamp(func(r *apiextensionsv1.CustomResourceDefinitionVersion) {
		r.Storage = v
	})
}

// deprecated indicates this version of the custom resource API is deprecated. When set to true, API requests to this version receive a warning header in the server response. Defaults to false.
func (d *CustomResourceDefinitionVersionDie) Deprecated(v bool) *CustomResourceDefinitionVersionDie {
	return d.DieStamp(func(r *apiextensionsv1.CustomResourceDefinitionVersion) {
		r.Deprecated = v
	})
}

// deprecationWarning overrides the default warning returned to API clients. May only be set when `deprecated` is true. The default warning indicates this version is deprecated and recommends use of the newest served version of equal or greater stability, if one exists.
func (d *CustomResourceDefinitionVersionDie) DeprecationWarning(v *string) *CustomResourceDefinitionVersionDie {
	return d.DieStamp(func(r *apiextensionsv1.CustomResourceDefinitionVersion) {
		r.DeprecationWarning = v
	})
}

// schema describes the schema used for validation, pruning, and defaulting of this version of the custom resource.
func (d *CustomResourceDefinitionVersionDie) Schema(v *apiextensionsv1.CustomResourceValidation) *CustomResourceDefinitionVersionDie {
	return d.DieStamp(func(r *apiextensionsv1.CustomResourceDefinitionVersion) {
		r.Schema = v
	})
}

// subresources specify what subresources this version of the defined custom resource have.
func (d *CustomResourceDefinitionVersionDie) Subresources(v *apiextensionsv1.CustomResourceSubresources) *CustomResourceDefinitionVersionDie {
	return d.DieStamp(func(r *apiextensionsv1.CustomResourceDefinitionVersion) {
		r.Subresources = v
	})
}

// additionalPrinterColumns specifies additional columns returned in Table output. See https://kubernetes.io/docs/reference/using-api/api-concepts/#receiving-resources-as-tables for details. If no columns are specified, a single column displaying the age of the custom resource is used.
func (d *CustomResourceDefinitionVersionDie) AdditionalPrinterColumns(v ...apiextensionsv1.CustomResourceColumnDefinition) *CustomResourceDefinitionVersionDie {
	return d.DieStamp(func(r *apiextensionsv1.CustomResourceDefinitionVersion) {
		r.AdditionalPrinterColumns = v
	})
}

var CustomResourceValidationBlank = (&CustomResourceValidationDie{}).DieFeed(apiextensionsv1.CustomResourceValidation{})

type CustomResourceValidationDie struct {
	mutable bool
	r       apiextensionsv1.CustomResourceValidation
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *CustomResourceValidationDie) DieImmutable(immutable bool) *CustomResourceValidationDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *CustomResourceValidationDie) DieFeed(r apiextensionsv1.CustomResourceValidation) *CustomResourceValidationDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &CustomResourceValidationDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *CustomResourceValidationDie) DieFeedPtr(r *apiextensionsv1.CustomResourceValidation) *CustomResourceValidationDie {
	if r == nil {
		r = &apiextensionsv1.CustomResourceValidation{}
	}
	return d.DieFeed(*r)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *CustomResourceValidationDie) DieFeedJSON(j []byte) *CustomResourceValidationDie {
	r := apiextensionsv1.CustomResourceValidation{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *CustomResourceValidationDie) DieFeedYAML(y []byte) *CustomResourceValidationDie {
	r := apiextensionsv1.CustomResourceValidation{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *CustomResourceValidationDie) DieFeedYAMLFile(name string) *CustomResourceValidationDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *CustomResourceValidationDie) DieFeedRawExtension(raw runtime.RawExtension) *CustomResourceValidationDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *CustomResourceValidationDie) DieRelease() apiextensionsv1.CustomResourceValidation {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *CustomResourceValidationDie) DieReleasePtr() *apiextensionsv1.CustomResourceValidation {
	r := d.DieRelease()
	return &r
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *CustomResourceValidationDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *CustomResourceValidationDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *CustomResourceValidationDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *CustomResourceValidationDie) DieStamp(fn func(r *apiextensionsv1.CustomResourceValidation)) *CustomResourceValidationDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// Experimental: DieStampAt uses a JSON path (http://goessner.net/articles/JsonPath/) expression to stamp portions of the resource. The callback is invoked with each JSON path match. Panics if the callback function does not accept a single argument of the same type or a pointer to that type as found on the resource at the target location.
//
// Future iterations will improve type coercion from the resource to the callback argument.
func (d *CustomResourceValidationDie) DieStampAt(jp string, fn interface{}) *CustomResourceValidationDie {
	return d.DieStamp(func(r *apiextensionsv1.CustomResourceValidation) {
		if ni := reflectx.ValueOf(fn).Type().NumIn(); ni != 1 {
			panic(fmtx.Errorf("callback function must have 1 input parameters, found %d", ni))
		}
		if no := reflectx.ValueOf(fn).Type().NumOut(); no != 0 {
			panic(fmtx.Errorf("callback function must have 0 output parameters, found %d", no))
		}

		cp := jsonpath.New("")
		if err := cp.Parse(fmtx.Sprintf("{%s}", jp)); err != nil {
			panic(err)
		}
		cr, err := cp.FindResults(r)
		if err != nil {
			// errors are expected if a path is not found
			return
		}
		for _, cv := range cr[0] {
			arg0t := reflectx.ValueOf(fn).Type().In(0)

			var args []reflectx.Value
			if cv.Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv}
			} else if cv.CanAddr() && cv.Addr().Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv.Addr()}
			} else {
				panic(fmtx.Errorf("callback function must accept value of type %q, found type %q", cv.Type(), arg0t))
			}

			reflectx.ValueOf(fn).Call(args)
		}
	})
}

// DieWith returns a new die after passing the current die to the callback function. The passed die is mutable.
func (d *CustomResourceValidationDie) DieWith(fns ...func(d *CustomResourceValidationDie)) *CustomResourceValidationDie {
	nd := CustomResourceValidationBlank.DieFeed(d.DieRelease()).DieImmutable(false)
	for _, fn := range fns {
		if fn != nil {
			fn(nd)
		}
	}
	return d.DieFeed(nd.DieRelease())
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *CustomResourceValidationDie) DeepCopy() *CustomResourceValidationDie {
	r := *d.r.DeepCopy()
	return &CustomResourceValidationDie{
		mutable: d.mutable,
		r:       r,
	}
}

// openAPIV3Schema is the OpenAPI v3 schema to use for validation and pruning.
func (d *CustomResourceValidationDie) OpenAPIV3Schema(v *apiextensionsv1.JSONSchemaProps) *CustomResourceValidationDie {
	return d.DieStamp(func(r *apiextensionsv1.CustomResourceValidation) {
		r.OpenAPIV3Schema = v
	})
}

var CustomResourceSubresourcesBlank = (&CustomResourceSubresourcesDie{}).DieFeed(apiextensionsv1.CustomResourceSubresources{})

type CustomResourceSubresourcesDie struct {
	mutable bool
	r       apiextensionsv1.CustomResourceSubresources
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *CustomResourceSubresourcesDie) DieImmutable(immutable bool) *CustomResourceSubresourcesDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *CustomResourceSubresourcesDie) DieFeed(r apiextensionsv1.CustomResourceSubresources) *CustomResourceSubresourcesDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &CustomResourceSubresourcesDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *CustomResourceSubresourcesDie) DieFeedPtr(r *apiextensionsv1.CustomResourceSubresources) *CustomResourceSubresourcesDie {
	if r == nil {
		r = &apiextensionsv1.CustomResourceSubresources{}
	}
	return d.DieFeed(*r)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *CustomResourceSubresourcesDie) DieFeedJSON(j []byte) *CustomResourceSubresourcesDie {
	r := apiextensionsv1.CustomResourceSubresources{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *CustomResourceSubresourcesDie) DieFeedYAML(y []byte) *CustomResourceSubresourcesDie {
	r := apiextensionsv1.CustomResourceSubresources{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *CustomResourceSubresourcesDie) DieFeedYAMLFile(name string) *CustomResourceSubresourcesDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *CustomResourceSubresourcesDie) DieFeedRawExtension(raw runtime.RawExtension) *CustomResourceSubresourcesDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *CustomResourceSubresourcesDie) DieRelease() apiextensionsv1.CustomResourceSubresources {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *CustomResourceSubresourcesDie) DieReleasePtr() *apiextensionsv1.CustomResourceSubresources {
	r := d.DieRelease()
	return &r
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *CustomResourceSubresourcesDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *CustomResourceSubresourcesDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *CustomResourceSubresourcesDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *CustomResourceSubresourcesDie) DieStamp(fn func(r *apiextensionsv1.CustomResourceSubresources)) *CustomResourceSubresourcesDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// Experimental: DieStampAt uses a JSON path (http://goessner.net/articles/JsonPath/) expression to stamp portions of the resource. The callback is invoked with each JSON path match. Panics if the callback function does not accept a single argument of the same type or a pointer to that type as found on the resource at the target location.
//
// Future iterations will improve type coercion from the resource to the callback argument.
func (d *CustomResourceSubresourcesDie) DieStampAt(jp string, fn interface{}) *CustomResourceSubresourcesDie {
	return d.DieStamp(func(r *apiextensionsv1.CustomResourceSubresources) {
		if ni := reflectx.ValueOf(fn).Type().NumIn(); ni != 1 {
			panic(fmtx.Errorf("callback function must have 1 input parameters, found %d", ni))
		}
		if no := reflectx.ValueOf(fn).Type().NumOut(); no != 0 {
			panic(fmtx.Errorf("callback function must have 0 output parameters, found %d", no))
		}

		cp := jsonpath.New("")
		if err := cp.Parse(fmtx.Sprintf("{%s}", jp)); err != nil {
			panic(err)
		}
		cr, err := cp.FindResults(r)
		if err != nil {
			// errors are expected if a path is not found
			return
		}
		for _, cv := range cr[0] {
			arg0t := reflectx.ValueOf(fn).Type().In(0)

			var args []reflectx.Value
			if cv.Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv}
			} else if cv.CanAddr() && cv.Addr().Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv.Addr()}
			} else {
				panic(fmtx.Errorf("callback function must accept value of type %q, found type %q", cv.Type(), arg0t))
			}

			reflectx.ValueOf(fn).Call(args)
		}
	})
}

// DieWith returns a new die after passing the current die to the callback function. The passed die is mutable.
func (d *CustomResourceSubresourcesDie) DieWith(fns ...func(d *CustomResourceSubresourcesDie)) *CustomResourceSubresourcesDie {
	nd := CustomResourceSubresourcesBlank.DieFeed(d.DieRelease()).DieImmutable(false)
	for _, fn := range fns {
		if fn != nil {
			fn(nd)
		}
	}
	return d.DieFeed(nd.DieRelease())
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *CustomResourceSubresourcesDie) DeepCopy() *CustomResourceSubresourcesDie {
	r := *d.r.DeepCopy()
	return &CustomResourceSubresourcesDie{
		mutable: d.mutable,
		r:       r,
	}
}

// status indicates the custom resource should serve a `/status` subresource. When enabled: 1. requests to the custom resource primary endpoint ignore changes to the `status` stanza of the object. 2. requests to the custom resource `/status` subresource ignore changes to anything other than the `status` stanza of the object.
func (d *CustomResourceSubresourcesDie) Status(v *apiextensionsv1.CustomResourceSubresourceStatus) *CustomResourceSubresourcesDie {
	return d.DieStamp(func(r *apiextensionsv1.CustomResourceSubresources) {
		r.Status = v
	})
}

// scale indicates the custom resource should serve a `/scale` subresource that returns an `autoscaling/v1` Scale object.
func (d *CustomResourceSubresourcesDie) Scale(v *apiextensionsv1.CustomResourceSubresourceScale) *CustomResourceSubresourcesDie {
	return d.DieStamp(func(r *apiextensionsv1.CustomResourceSubresources) {
		r.Scale = v
	})
}

var CustomResourceSubresourceScaleBlank = (&CustomResourceSubresourceScaleDie{}).DieFeed(apiextensionsv1.CustomResourceSubresourceScale{})

type CustomResourceSubresourceScaleDie struct {
	mutable bool
	r       apiextensionsv1.CustomResourceSubresourceScale
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *CustomResourceSubresourceScaleDie) DieImmutable(immutable bool) *CustomResourceSubresourceScaleDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *CustomResourceSubresourceScaleDie) DieFeed(r apiextensionsv1.CustomResourceSubresourceScale) *CustomResourceSubresourceScaleDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &CustomResourceSubresourceScaleDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *CustomResourceSubresourceScaleDie) DieFeedPtr(r *apiextensionsv1.CustomResourceSubresourceScale) *CustomResourceSubresourceScaleDie {
	if r == nil {
		r = &apiextensionsv1.CustomResourceSubresourceScale{}
	}
	return d.DieFeed(*r)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *CustomResourceSubresourceScaleDie) DieFeedJSON(j []byte) *CustomResourceSubresourceScaleDie {
	r := apiextensionsv1.CustomResourceSubresourceScale{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *CustomResourceSubresourceScaleDie) DieFeedYAML(y []byte) *CustomResourceSubresourceScaleDie {
	r := apiextensionsv1.CustomResourceSubresourceScale{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *CustomResourceSubresourceScaleDie) DieFeedYAMLFile(name string) *CustomResourceSubresourceScaleDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *CustomResourceSubresourceScaleDie) DieFeedRawExtension(raw runtime.RawExtension) *CustomResourceSubresourceScaleDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *CustomResourceSubresourceScaleDie) DieRelease() apiextensionsv1.CustomResourceSubresourceScale {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *CustomResourceSubresourceScaleDie) DieReleasePtr() *apiextensionsv1.CustomResourceSubresourceScale {
	r := d.DieRelease()
	return &r
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *CustomResourceSubresourceScaleDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *CustomResourceSubresourceScaleDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *CustomResourceSubresourceScaleDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *CustomResourceSubresourceScaleDie) DieStamp(fn func(r *apiextensionsv1.CustomResourceSubresourceScale)) *CustomResourceSubresourceScaleDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// Experimental: DieStampAt uses a JSON path (http://goessner.net/articles/JsonPath/) expression to stamp portions of the resource. The callback is invoked with each JSON path match. Panics if the callback function does not accept a single argument of the same type or a pointer to that type as found on the resource at the target location.
//
// Future iterations will improve type coercion from the resource to the callback argument.
func (d *CustomResourceSubresourceScaleDie) DieStampAt(jp string, fn interface{}) *CustomResourceSubresourceScaleDie {
	return d.DieStamp(func(r *apiextensionsv1.CustomResourceSubresourceScale) {
		if ni := reflectx.ValueOf(fn).Type().NumIn(); ni != 1 {
			panic(fmtx.Errorf("callback function must have 1 input parameters, found %d", ni))
		}
		if no := reflectx.ValueOf(fn).Type().NumOut(); no != 0 {
			panic(fmtx.Errorf("callback function must have 0 output parameters, found %d", no))
		}

		cp := jsonpath.New("")
		if err := cp.Parse(fmtx.Sprintf("{%s}", jp)); err != nil {
			panic(err)
		}
		cr, err := cp.FindResults(r)
		if err != nil {
			// errors are expected if a path is not found
			return
		}
		for _, cv := range cr[0] {
			arg0t := reflectx.ValueOf(fn).Type().In(0)

			var args []reflectx.Value
			if cv.Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv}
			} else if cv.CanAddr() && cv.Addr().Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv.Addr()}
			} else {
				panic(fmtx.Errorf("callback function must accept value of type %q, found type %q", cv.Type(), arg0t))
			}

			reflectx.ValueOf(fn).Call(args)
		}
	})
}

// DieWith returns a new die after passing the current die to the callback function. The passed die is mutable.
func (d *CustomResourceSubresourceScaleDie) DieWith(fns ...func(d *CustomResourceSubresourceScaleDie)) *CustomResourceSubresourceScaleDie {
	nd := CustomResourceSubresourceScaleBlank.DieFeed(d.DieRelease()).DieImmutable(false)
	for _, fn := range fns {
		if fn != nil {
			fn(nd)
		}
	}
	return d.DieFeed(nd.DieRelease())
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *CustomResourceSubresourceScaleDie) DeepCopy() *CustomResourceSubresourceScaleDie {
	r := *d.r.DeepCopy()
	return &CustomResourceSubresourceScaleDie{
		mutable: d.mutable,
		r:       r,
	}
}

// specReplicasPath defines the JSON path inside of a custom resource that corresponds to Scale `spec.replicas`. Only JSON paths without the array notation are allowed. Must be a JSON Path under `.spec`. If there is no value under the given path in the custom resource, the `/scale` subresource will return an error on GET.
func (d *CustomResourceSubresourceScaleDie) SpecReplicasPath(v string) *CustomResourceSubresourceScaleDie {
	return d.DieStamp(func(r *apiextensionsv1.CustomResourceSubresourceScale) {
		r.SpecReplicasPath = v
	})
}

// statusReplicasPath defines the JSON path inside of a custom resource that corresponds to Scale `status.replicas`. Only JSON paths without the array notation are allowed. Must be a JSON Path under `.status`. If there is no value under the given path in the custom resource, the `status.replicas` value in the `/scale` subresource will default to 0.
func (d *CustomResourceSubresourceScaleDie) StatusReplicasPath(v string) *CustomResourceSubresourceScaleDie {
	return d.DieStamp(func(r *apiextensionsv1.CustomResourceSubresourceScale) {
		r.StatusReplicasPath = v
	})
}

// labelSelectorPath defines the JSON path inside of a custom resource that corresponds to Scale `status.selector`. Only JSON paths without the array notation are allowed. Must be a JSON Path under `.status` or `.spec`. Must be set to work with HorizontalPodAutoscaler. The field pointed by this JSON path must be a string field (not a complex selector struct) which contains a serialized label selector in string form. More info: https://kubernetes.io/docs/tasks/access-kubernetes-api/custom-resources/custom-resource-definitions#scale-subresource If there is no value under the given path in the custom resource, the `status.selector` value in the `/scale` subresource will default to the empty string.
func (d *CustomResourceSubresourceScaleDie) LabelSelectorPath(v *string) *CustomResourceSubresourceScaleDie {
	return d.DieStamp(func(r *apiextensionsv1.CustomResourceSubresourceScale) {
		r.LabelSelectorPath = v
	})
}

var CustomResourceColumnDefinitionBlank = (&CustomResourceColumnDefinitionDie{}).DieFeed(apiextensionsv1.CustomResourceColumnDefinition{})

type CustomResourceColumnDefinitionDie struct {
	mutable bool
	r       apiextensionsv1.CustomResourceColumnDefinition
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *CustomResourceColumnDefinitionDie) DieImmutable(immutable bool) *CustomResourceColumnDefinitionDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *CustomResourceColumnDefinitionDie) DieFeed(r apiextensionsv1.CustomResourceColumnDefinition) *CustomResourceColumnDefinitionDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &CustomResourceColumnDefinitionDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *CustomResourceColumnDefinitionDie) DieFeedPtr(r *apiextensionsv1.CustomResourceColumnDefinition) *CustomResourceColumnDefinitionDie {
	if r == nil {
		r = &apiextensionsv1.CustomResourceColumnDefinition{}
	}
	return d.DieFeed(*r)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *CustomResourceColumnDefinitionDie) DieFeedJSON(j []byte) *CustomResourceColumnDefinitionDie {
	r := apiextensionsv1.CustomResourceColumnDefinition{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *CustomResourceColumnDefinitionDie) DieFeedYAML(y []byte) *CustomResourceColumnDefinitionDie {
	r := apiextensionsv1.CustomResourceColumnDefinition{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *CustomResourceColumnDefinitionDie) DieFeedYAMLFile(name string) *CustomResourceColumnDefinitionDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *CustomResourceColumnDefinitionDie) DieFeedRawExtension(raw runtime.RawExtension) *CustomResourceColumnDefinitionDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *CustomResourceColumnDefinitionDie) DieRelease() apiextensionsv1.CustomResourceColumnDefinition {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *CustomResourceColumnDefinitionDie) DieReleasePtr() *apiextensionsv1.CustomResourceColumnDefinition {
	r := d.DieRelease()
	return &r
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *CustomResourceColumnDefinitionDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *CustomResourceColumnDefinitionDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *CustomResourceColumnDefinitionDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *CustomResourceColumnDefinitionDie) DieStamp(fn func(r *apiextensionsv1.CustomResourceColumnDefinition)) *CustomResourceColumnDefinitionDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// Experimental: DieStampAt uses a JSON path (http://goessner.net/articles/JsonPath/) expression to stamp portions of the resource. The callback is invoked with each JSON path match. Panics if the callback function does not accept a single argument of the same type or a pointer to that type as found on the resource at the target location.
//
// Future iterations will improve type coercion from the resource to the callback argument.
func (d *CustomResourceColumnDefinitionDie) DieStampAt(jp string, fn interface{}) *CustomResourceColumnDefinitionDie {
	return d.DieStamp(func(r *apiextensionsv1.CustomResourceColumnDefinition) {
		if ni := reflectx.ValueOf(fn).Type().NumIn(); ni != 1 {
			panic(fmtx.Errorf("callback function must have 1 input parameters, found %d", ni))
		}
		if no := reflectx.ValueOf(fn).Type().NumOut(); no != 0 {
			panic(fmtx.Errorf("callback function must have 0 output parameters, found %d", no))
		}

		cp := jsonpath.New("")
		if err := cp.Parse(fmtx.Sprintf("{%s}", jp)); err != nil {
			panic(err)
		}
		cr, err := cp.FindResults(r)
		if err != nil {
			// errors are expected if a path is not found
			return
		}
		for _, cv := range cr[0] {
			arg0t := reflectx.ValueOf(fn).Type().In(0)

			var args []reflectx.Value
			if cv.Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv}
			} else if cv.CanAddr() && cv.Addr().Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv.Addr()}
			} else {
				panic(fmtx.Errorf("callback function must accept value of type %q, found type %q", cv.Type(), arg0t))
			}

			reflectx.ValueOf(fn).Call(args)
		}
	})
}

// DieWith returns a new die after passing the current die to the callback function. The passed die is mutable.
func (d *CustomResourceColumnDefinitionDie) DieWith(fns ...func(d *CustomResourceColumnDefinitionDie)) *CustomResourceColumnDefinitionDie {
	nd := CustomResourceColumnDefinitionBlank.DieFeed(d.DieRelease()).DieImmutable(false)
	for _, fn := range fns {
		if fn != nil {
			fn(nd)
		}
	}
	return d.DieFeed(nd.DieRelease())
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *CustomResourceColumnDefinitionDie) DeepCopy() *CustomResourceColumnDefinitionDie {
	r := *d.r.DeepCopy()
	return &CustomResourceColumnDefinitionDie{
		mutable: d.mutable,
		r:       r,
	}
}

// name is a human readable name for the column.
func (d *CustomResourceColumnDefinitionDie) Name(v string) *CustomResourceColumnDefinitionDie {
	return d.DieStamp(func(r *apiextensionsv1.CustomResourceColumnDefinition) {
		r.Name = v
	})
}

// type is an OpenAPI type definition for this column. See https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#data-types for details.
func (d *CustomResourceColumnDefinitionDie) Type(v string) *CustomResourceColumnDefinitionDie {
	return d.DieStamp(func(r *apiextensionsv1.CustomResourceColumnDefinition) {
		r.Type = v
	})
}

// format is an optional OpenAPI type definition for this column. The 'name' format is applied to the primary identifier column to assist in clients identifying column is the resource name. See https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#data-types for details.
func (d *CustomResourceColumnDefinitionDie) Format(v string) *CustomResourceColumnDefinitionDie {
	return d.DieStamp(func(r *apiextensionsv1.CustomResourceColumnDefinition) {
		r.Format = v
	})
}

// description is a human readable description of this column.
func (d *CustomResourceColumnDefinitionDie) Description(v string) *CustomResourceColumnDefinitionDie {
	return d.DieStamp(func(r *apiextensionsv1.CustomResourceColumnDefinition) {
		r.Description = v
	})
}

// priority is an integer defining the relative importance of this column compared to others. Lower numbers are considered higher priority. Columns that may be omitted in limited space scenarios should be given a priority greater than 0.
func (d *CustomResourceColumnDefinitionDie) Priority(v int32) *CustomResourceColumnDefinitionDie {
	return d.DieStamp(func(r *apiextensionsv1.CustomResourceColumnDefinition) {
		r.Priority = v
	})
}

// jsonPath is a simple JSON path (i.e. with array notation) which is evaluated against each custom resource to produce the value for this column.
func (d *CustomResourceColumnDefinitionDie) JSONPath(v string) *CustomResourceColumnDefinitionDie {
	return d.DieStamp(func(r *apiextensionsv1.CustomResourceColumnDefinition) {
		r.JSONPath = v
	})
}

var CustomResourceConversionBlank = (&CustomResourceConversionDie{}).DieFeed(apiextensionsv1.CustomResourceConversion{})

type CustomResourceConversionDie struct {
	mutable bool
	r       apiextensionsv1.CustomResourceConversion
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *CustomResourceConversionDie) DieImmutable(immutable bool) *CustomResourceConversionDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *CustomResourceConversionDie) DieFeed(r apiextensionsv1.CustomResourceConversion) *CustomResourceConversionDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &CustomResourceConversionDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *CustomResourceConversionDie) DieFeedPtr(r *apiextensionsv1.CustomResourceConversion) *CustomResourceConversionDie {
	if r == nil {
		r = &apiextensionsv1.CustomResourceConversion{}
	}
	return d.DieFeed(*r)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *CustomResourceConversionDie) DieFeedJSON(j []byte) *CustomResourceConversionDie {
	r := apiextensionsv1.CustomResourceConversion{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *CustomResourceConversionDie) DieFeedYAML(y []byte) *CustomResourceConversionDie {
	r := apiextensionsv1.CustomResourceConversion{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *CustomResourceConversionDie) DieFeedYAMLFile(name string) *CustomResourceConversionDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *CustomResourceConversionDie) DieFeedRawExtension(raw runtime.RawExtension) *CustomResourceConversionDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *CustomResourceConversionDie) DieRelease() apiextensionsv1.CustomResourceConversion {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *CustomResourceConversionDie) DieReleasePtr() *apiextensionsv1.CustomResourceConversion {
	r := d.DieRelease()
	return &r
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *CustomResourceConversionDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *CustomResourceConversionDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *CustomResourceConversionDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *CustomResourceConversionDie) DieStamp(fn func(r *apiextensionsv1.CustomResourceConversion)) *CustomResourceConversionDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// Experimental: DieStampAt uses a JSON path (http://goessner.net/articles/JsonPath/) expression to stamp portions of the resource. The callback is invoked with each JSON path match. Panics if the callback function does not accept a single argument of the same type or a pointer to that type as found on the resource at the target location.
//
// Future iterations will improve type coercion from the resource to the callback argument.
func (d *CustomResourceConversionDie) DieStampAt(jp string, fn interface{}) *CustomResourceConversionDie {
	return d.DieStamp(func(r *apiextensionsv1.CustomResourceConversion) {
		if ni := reflectx.ValueOf(fn).Type().NumIn(); ni != 1 {
			panic(fmtx.Errorf("callback function must have 1 input parameters, found %d", ni))
		}
		if no := reflectx.ValueOf(fn).Type().NumOut(); no != 0 {
			panic(fmtx.Errorf("callback function must have 0 output parameters, found %d", no))
		}

		cp := jsonpath.New("")
		if err := cp.Parse(fmtx.Sprintf("{%s}", jp)); err != nil {
			panic(err)
		}
		cr, err := cp.FindResults(r)
		if err != nil {
			// errors are expected if a path is not found
			return
		}
		for _, cv := range cr[0] {
			arg0t := reflectx.ValueOf(fn).Type().In(0)

			var args []reflectx.Value
			if cv.Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv}
			} else if cv.CanAddr() && cv.Addr().Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv.Addr()}
			} else {
				panic(fmtx.Errorf("callback function must accept value of type %q, found type %q", cv.Type(), arg0t))
			}

			reflectx.ValueOf(fn).Call(args)
		}
	})
}

// DieWith returns a new die after passing the current die to the callback function. The passed die is mutable.
func (d *CustomResourceConversionDie) DieWith(fns ...func(d *CustomResourceConversionDie)) *CustomResourceConversionDie {
	nd := CustomResourceConversionBlank.DieFeed(d.DieRelease()).DieImmutable(false)
	for _, fn := range fns {
		if fn != nil {
			fn(nd)
		}
	}
	return d.DieFeed(nd.DieRelease())
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *CustomResourceConversionDie) DeepCopy() *CustomResourceConversionDie {
	r := *d.r.DeepCopy()
	return &CustomResourceConversionDie{
		mutable: d.mutable,
		r:       r,
	}
}

// strategy specifies how custom resources are converted between versions. Allowed values are: - `"None"`: The converter only change the apiVersion and would not touch any other field in the custom resource. - `"Webhook"`: API Server will call to an external webhook to do the conversion. Additional information is needed for this option. This requires spec.preserveUnknownFields to be false, and spec.conversion.webhook to be set.
func (d *CustomResourceConversionDie) Strategy(v apiextensionsv1.ConversionStrategyType) *CustomResourceConversionDie {
	return d.DieStamp(func(r *apiextensionsv1.CustomResourceConversion) {
		r.Strategy = v
	})
}

// webhook describes how to call the conversion webhook. Required when `strategy` is set to `"Webhook"`.
func (d *CustomResourceConversionDie) Webhook(v *apiextensionsv1.WebhookConversion) *CustomResourceConversionDie {
	return d.DieStamp(func(r *apiextensionsv1.CustomResourceConversion) {
		r.Webhook = v
	})
}

var WebhookConversionBlank = (&WebhookConversionDie{}).DieFeed(apiextensionsv1.WebhookConversion{})

type WebhookConversionDie struct {
	mutable bool
	r       apiextensionsv1.WebhookConversion
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *WebhookConversionDie) DieImmutable(immutable bool) *WebhookConversionDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *WebhookConversionDie) DieFeed(r apiextensionsv1.WebhookConversion) *WebhookConversionDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &WebhookConversionDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *WebhookConversionDie) DieFeedPtr(r *apiextensionsv1.WebhookConversion) *WebhookConversionDie {
	if r == nil {
		r = &apiextensionsv1.WebhookConversion{}
	}
	return d.DieFeed(*r)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *WebhookConversionDie) DieFeedJSON(j []byte) *WebhookConversionDie {
	r := apiextensionsv1.WebhookConversion{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *WebhookConversionDie) DieFeedYAML(y []byte) *WebhookConversionDie {
	r := apiextensionsv1.WebhookConversion{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *WebhookConversionDie) DieFeedYAMLFile(name string) *WebhookConversionDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *WebhookConversionDie) DieFeedRawExtension(raw runtime.RawExtension) *WebhookConversionDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *WebhookConversionDie) DieRelease() apiextensionsv1.WebhookConversion {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *WebhookConversionDie) DieReleasePtr() *apiextensionsv1.WebhookConversion {
	r := d.DieRelease()
	return &r
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *WebhookConversionDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *WebhookConversionDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *WebhookConversionDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *WebhookConversionDie) DieStamp(fn func(r *apiextensionsv1.WebhookConversion)) *WebhookConversionDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// Experimental: DieStampAt uses a JSON path (http://goessner.net/articles/JsonPath/) expression to stamp portions of the resource. The callback is invoked with each JSON path match. Panics if the callback function does not accept a single argument of the same type or a pointer to that type as found on the resource at the target location.
//
// Future iterations will improve type coercion from the resource to the callback argument.
func (d *WebhookConversionDie) DieStampAt(jp string, fn interface{}) *WebhookConversionDie {
	return d.DieStamp(func(r *apiextensionsv1.WebhookConversion) {
		if ni := reflectx.ValueOf(fn).Type().NumIn(); ni != 1 {
			panic(fmtx.Errorf("callback function must have 1 input parameters, found %d", ni))
		}
		if no := reflectx.ValueOf(fn).Type().NumOut(); no != 0 {
			panic(fmtx.Errorf("callback function must have 0 output parameters, found %d", no))
		}

		cp := jsonpath.New("")
		if err := cp.Parse(fmtx.Sprintf("{%s}", jp)); err != nil {
			panic(err)
		}
		cr, err := cp.FindResults(r)
		if err != nil {
			// errors are expected if a path is not found
			return
		}
		for _, cv := range cr[0] {
			arg0t := reflectx.ValueOf(fn).Type().In(0)

			var args []reflectx.Value
			if cv.Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv}
			} else if cv.CanAddr() && cv.Addr().Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv.Addr()}
			} else {
				panic(fmtx.Errorf("callback function must accept value of type %q, found type %q", cv.Type(), arg0t))
			}

			reflectx.ValueOf(fn).Call(args)
		}
	})
}

// DieWith returns a new die after passing the current die to the callback function. The passed die is mutable.
func (d *WebhookConversionDie) DieWith(fns ...func(d *WebhookConversionDie)) *WebhookConversionDie {
	nd := WebhookConversionBlank.DieFeed(d.DieRelease()).DieImmutable(false)
	for _, fn := range fns {
		if fn != nil {
			fn(nd)
		}
	}
	return d.DieFeed(nd.DieRelease())
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *WebhookConversionDie) DeepCopy() *WebhookConversionDie {
	r := *d.r.DeepCopy()
	return &WebhookConversionDie{
		mutable: d.mutable,
		r:       r,
	}
}

// clientConfig is the instructions for how to call the webhook if strategy is `Webhook`.
func (d *WebhookConversionDie) ClientConfig(v *apiextensionsv1.WebhookClientConfig) *WebhookConversionDie {
	return d.DieStamp(func(r *apiextensionsv1.WebhookConversion) {
		r.ClientConfig = v
	})
}

// conversionReviewVersions is an ordered list of preferred `ConversionReview` versions the Webhook expects. The API server will use the first version in the list which it supports. If none of the versions specified in this list are supported by API server, conversion will fail for the custom resource. If a persisted Webhook configuration specifies allowed versions and does not include any versions known to the API Server, calls to the webhook will fail.
func (d *WebhookConversionDie) ConversionReviewVersions(v ...string) *WebhookConversionDie {
	return d.DieStamp(func(r *apiextensionsv1.WebhookConversion) {
		r.ConversionReviewVersions = v
	})
}

var WebhookClientConfigBlank = (&WebhookClientConfigDie{}).DieFeed(apiextensionsv1.WebhookClientConfig{})

type WebhookClientConfigDie struct {
	mutable bool
	r       apiextensionsv1.WebhookClientConfig
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *WebhookClientConfigDie) DieImmutable(immutable bool) *WebhookClientConfigDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *WebhookClientConfigDie) DieFeed(r apiextensionsv1.WebhookClientConfig) *WebhookClientConfigDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &WebhookClientConfigDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *WebhookClientConfigDie) DieFeedPtr(r *apiextensionsv1.WebhookClientConfig) *WebhookClientConfigDie {
	if r == nil {
		r = &apiextensionsv1.WebhookClientConfig{}
	}
	return d.DieFeed(*r)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *WebhookClientConfigDie) DieFeedJSON(j []byte) *WebhookClientConfigDie {
	r := apiextensionsv1.WebhookClientConfig{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *WebhookClientConfigDie) DieFeedYAML(y []byte) *WebhookClientConfigDie {
	r := apiextensionsv1.WebhookClientConfig{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *WebhookClientConfigDie) DieFeedYAMLFile(name string) *WebhookClientConfigDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *WebhookClientConfigDie) DieFeedRawExtension(raw runtime.RawExtension) *WebhookClientConfigDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *WebhookClientConfigDie) DieRelease() apiextensionsv1.WebhookClientConfig {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *WebhookClientConfigDie) DieReleasePtr() *apiextensionsv1.WebhookClientConfig {
	r := d.DieRelease()
	return &r
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *WebhookClientConfigDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *WebhookClientConfigDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *WebhookClientConfigDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *WebhookClientConfigDie) DieStamp(fn func(r *apiextensionsv1.WebhookClientConfig)) *WebhookClientConfigDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// Experimental: DieStampAt uses a JSON path (http://goessner.net/articles/JsonPath/) expression to stamp portions of the resource. The callback is invoked with each JSON path match. Panics if the callback function does not accept a single argument of the same type or a pointer to that type as found on the resource at the target location.
//
// Future iterations will improve type coercion from the resource to the callback argument.
func (d *WebhookClientConfigDie) DieStampAt(jp string, fn interface{}) *WebhookClientConfigDie {
	return d.DieStamp(func(r *apiextensionsv1.WebhookClientConfig) {
		if ni := reflectx.ValueOf(fn).Type().NumIn(); ni != 1 {
			panic(fmtx.Errorf("callback function must have 1 input parameters, found %d", ni))
		}
		if no := reflectx.ValueOf(fn).Type().NumOut(); no != 0 {
			panic(fmtx.Errorf("callback function must have 0 output parameters, found %d", no))
		}

		cp := jsonpath.New("")
		if err := cp.Parse(fmtx.Sprintf("{%s}", jp)); err != nil {
			panic(err)
		}
		cr, err := cp.FindResults(r)
		if err != nil {
			// errors are expected if a path is not found
			return
		}
		for _, cv := range cr[0] {
			arg0t := reflectx.ValueOf(fn).Type().In(0)

			var args []reflectx.Value
			if cv.Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv}
			} else if cv.CanAddr() && cv.Addr().Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv.Addr()}
			} else {
				panic(fmtx.Errorf("callback function must accept value of type %q, found type %q", cv.Type(), arg0t))
			}

			reflectx.ValueOf(fn).Call(args)
		}
	})
}

// DieWith returns a new die after passing the current die to the callback function. The passed die is mutable.
func (d *WebhookClientConfigDie) DieWith(fns ...func(d *WebhookClientConfigDie)) *WebhookClientConfigDie {
	nd := WebhookClientConfigBlank.DieFeed(d.DieRelease()).DieImmutable(false)
	for _, fn := range fns {
		if fn != nil {
			fn(nd)
		}
	}
	return d.DieFeed(nd.DieRelease())
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *WebhookClientConfigDie) DeepCopy() *WebhookClientConfigDie {
	r := *d.r.DeepCopy()
	return &WebhookClientConfigDie{
		mutable: d.mutable,
		r:       r,
	}
}

// url gives the location of the webhook, in standard URL form (`scheme://host:port/path`). Exactly one of `url` or `service` must be specified.
//
// The `host` should not refer to a service running in the cluster; use the `service` field instead. The host might be resolved via external DNS in some apiservers (e.g., `kube-apiserver` cannot resolve in-cluster DNS as that would be a layering violation). `host` may also be an IP address.
//
// Please note that using `localhost` or `127.0.0.1` as a `host` is risky unless you take great care to run this webhook on all hosts which run an apiserver which might need to make calls to this webhook. Such installs are likely to be non-portable, i.e., not easy to turn up in a new cluster.
//
// The scheme must be "https"; the URL must begin with "https://".
//
// A path is optional, and if present may be any string permissible in a URL. You may use the path to pass an arbitrary string to the webhook, for example, a cluster identifier.
//
// Attempting to use a user or basic auth e.g. "user:password@" is not allowed. Fragments ("#...") and query parameters ("?...") are not allowed, either.
func (d *WebhookClientConfigDie) URL(v *string) *WebhookClientConfigDie {
	return d.DieStamp(func(r *apiextensionsv1.WebhookClientConfig) {
		r.URL = v
	})
}

// service is a reference to the service for this webhook. Either service or url must be specified.
//
// If the webhook is running within the cluster, then you should use `service`.
func (d *WebhookClientConfigDie) Service(v *apiextensionsv1.ServiceReference) *WebhookClientConfigDie {
	return d.DieStamp(func(r *apiextensionsv1.WebhookClientConfig) {
		r.Service = v
	})
}

// caBundle is a PEM encoded CA bundle which will be used to validate the webhook's server certificate. If unspecified, system trust roots on the apiserver are used.
func (d *WebhookClientConfigDie) CABundle(v []byte) *WebhookClientConfigDie {
	return d.DieStamp(func(r *apiextensionsv1.WebhookClientConfig) {
		r.CABundle = v
	})
}

var ServiceReferenceBlank = (&ServiceReferenceDie{}).DieFeed(apiextensionsv1.ServiceReference{})

type ServiceReferenceDie struct {
	mutable bool
	r       apiextensionsv1.ServiceReference
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *ServiceReferenceDie) DieImmutable(immutable bool) *ServiceReferenceDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *ServiceReferenceDie) DieFeed(r apiextensionsv1.ServiceReference) *ServiceReferenceDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &ServiceReferenceDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *ServiceReferenceDie) DieFeedPtr(r *apiextensionsv1.ServiceReference) *ServiceReferenceDie {
	if r == nil {
		r = &apiextensionsv1.ServiceReference{}
	}
	return d.DieFeed(*r)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *ServiceReferenceDie) DieFeedJSON(j []byte) *ServiceReferenceDie {
	r := apiextensionsv1.ServiceReference{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *ServiceReferenceDie) DieFeedYAML(y []byte) *ServiceReferenceDie {
	r := apiextensionsv1.ServiceReference{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *ServiceReferenceDie) DieFeedYAMLFile(name string) *ServiceReferenceDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *ServiceReferenceDie) DieFeedRawExtension(raw runtime.RawExtension) *ServiceReferenceDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *ServiceReferenceDie) DieRelease() apiextensionsv1.ServiceReference {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *ServiceReferenceDie) DieReleasePtr() *apiextensionsv1.ServiceReference {
	r := d.DieRelease()
	return &r
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *ServiceReferenceDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *ServiceReferenceDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *ServiceReferenceDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *ServiceReferenceDie) DieStamp(fn func(r *apiextensionsv1.ServiceReference)) *ServiceReferenceDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// Experimental: DieStampAt uses a JSON path (http://goessner.net/articles/JsonPath/) expression to stamp portions of the resource. The callback is invoked with each JSON path match. Panics if the callback function does not accept a single argument of the same type or a pointer to that type as found on the resource at the target location.
//
// Future iterations will improve type coercion from the resource to the callback argument.
func (d *ServiceReferenceDie) DieStampAt(jp string, fn interface{}) *ServiceReferenceDie {
	return d.DieStamp(func(r *apiextensionsv1.ServiceReference) {
		if ni := reflectx.ValueOf(fn).Type().NumIn(); ni != 1 {
			panic(fmtx.Errorf("callback function must have 1 input parameters, found %d", ni))
		}
		if no := reflectx.ValueOf(fn).Type().NumOut(); no != 0 {
			panic(fmtx.Errorf("callback function must have 0 output parameters, found %d", no))
		}

		cp := jsonpath.New("")
		if err := cp.Parse(fmtx.Sprintf("{%s}", jp)); err != nil {
			panic(err)
		}
		cr, err := cp.FindResults(r)
		if err != nil {
			// errors are expected if a path is not found
			return
		}
		for _, cv := range cr[0] {
			arg0t := reflectx.ValueOf(fn).Type().In(0)

			var args []reflectx.Value
			if cv.Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv}
			} else if cv.CanAddr() && cv.Addr().Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv.Addr()}
			} else {
				panic(fmtx.Errorf("callback function must accept value of type %q, found type %q", cv.Type(), arg0t))
			}

			reflectx.ValueOf(fn).Call(args)
		}
	})
}

// DieWith returns a new die after passing the current die to the callback function. The passed die is mutable.
func (d *ServiceReferenceDie) DieWith(fns ...func(d *ServiceReferenceDie)) *ServiceReferenceDie {
	nd := ServiceReferenceBlank.DieFeed(d.DieRelease()).DieImmutable(false)
	for _, fn := range fns {
		if fn != nil {
			fn(nd)
		}
	}
	return d.DieFeed(nd.DieRelease())
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *ServiceReferenceDie) DeepCopy() *ServiceReferenceDie {
	r := *d.r.DeepCopy()
	return &ServiceReferenceDie{
		mutable: d.mutable,
		r:       r,
	}
}

// namespace is the namespace of the service. Required
func (d *ServiceReferenceDie) Namespace(v string) *ServiceReferenceDie {
	return d.DieStamp(func(r *apiextensionsv1.ServiceReference) {
		r.Namespace = v
	})
}

// name is the name of the service. Required
func (d *ServiceReferenceDie) Name(v string) *ServiceReferenceDie {
	return d.DieStamp(func(r *apiextensionsv1.ServiceReference) {
		r.Name = v
	})
}

// path is an optional URL path at which the webhook will be contacted.
func (d *ServiceReferenceDie) Path(v *string) *ServiceReferenceDie {
	return d.DieStamp(func(r *apiextensionsv1.ServiceReference) {
		r.Path = v
	})
}

// port is an optional service port at which the webhook will be contacted. `port` should be a valid port number (1-65535, inclusive). Defaults to 443 for backward compatibility.
func (d *ServiceReferenceDie) Port(v *int32) *ServiceReferenceDie {
	return d.DieStamp(func(r *apiextensionsv1.ServiceReference) {
		r.Port = v
	})
}

var CustomResourceDefinitionStatusBlank = (&CustomResourceDefinitionStatusDie{}).DieFeed(apiextensionsv1.CustomResourceDefinitionStatus{})

type CustomResourceDefinitionStatusDie struct {
	mutable bool
	r       apiextensionsv1.CustomResourceDefinitionStatus
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *CustomResourceDefinitionStatusDie) DieImmutable(immutable bool) *CustomResourceDefinitionStatusDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *CustomResourceDefinitionStatusDie) DieFeed(r apiextensionsv1.CustomResourceDefinitionStatus) *CustomResourceDefinitionStatusDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &CustomResourceDefinitionStatusDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *CustomResourceDefinitionStatusDie) DieFeedPtr(r *apiextensionsv1.CustomResourceDefinitionStatus) *CustomResourceDefinitionStatusDie {
	if r == nil {
		r = &apiextensionsv1.CustomResourceDefinitionStatus{}
	}
	return d.DieFeed(*r)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *CustomResourceDefinitionStatusDie) DieFeedJSON(j []byte) *CustomResourceDefinitionStatusDie {
	r := apiextensionsv1.CustomResourceDefinitionStatus{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *CustomResourceDefinitionStatusDie) DieFeedYAML(y []byte) *CustomResourceDefinitionStatusDie {
	r := apiextensionsv1.CustomResourceDefinitionStatus{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *CustomResourceDefinitionStatusDie) DieFeedYAMLFile(name string) *CustomResourceDefinitionStatusDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *CustomResourceDefinitionStatusDie) DieFeedRawExtension(raw runtime.RawExtension) *CustomResourceDefinitionStatusDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *CustomResourceDefinitionStatusDie) DieRelease() apiextensionsv1.CustomResourceDefinitionStatus {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *CustomResourceDefinitionStatusDie) DieReleasePtr() *apiextensionsv1.CustomResourceDefinitionStatus {
	r := d.DieRelease()
	return &r
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *CustomResourceDefinitionStatusDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *CustomResourceDefinitionStatusDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *CustomResourceDefinitionStatusDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *CustomResourceDefinitionStatusDie) DieStamp(fn func(r *apiextensionsv1.CustomResourceDefinitionStatus)) *CustomResourceDefinitionStatusDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// Experimental: DieStampAt uses a JSON path (http://goessner.net/articles/JsonPath/) expression to stamp portions of the resource. The callback is invoked with each JSON path match. Panics if the callback function does not accept a single argument of the same type or a pointer to that type as found on the resource at the target location.
//
// Future iterations will improve type coercion from the resource to the callback argument.
func (d *CustomResourceDefinitionStatusDie) DieStampAt(jp string, fn interface{}) *CustomResourceDefinitionStatusDie {
	return d.DieStamp(func(r *apiextensionsv1.CustomResourceDefinitionStatus) {
		if ni := reflectx.ValueOf(fn).Type().NumIn(); ni != 1 {
			panic(fmtx.Errorf("callback function must have 1 input parameters, found %d", ni))
		}
		if no := reflectx.ValueOf(fn).Type().NumOut(); no != 0 {
			panic(fmtx.Errorf("callback function must have 0 output parameters, found %d", no))
		}

		cp := jsonpath.New("")
		if err := cp.Parse(fmtx.Sprintf("{%s}", jp)); err != nil {
			panic(err)
		}
		cr, err := cp.FindResults(r)
		if err != nil {
			// errors are expected if a path is not found
			return
		}
		for _, cv := range cr[0] {
			arg0t := reflectx.ValueOf(fn).Type().In(0)

			var args []reflectx.Value
			if cv.Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv}
			} else if cv.CanAddr() && cv.Addr().Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv.Addr()}
			} else {
				panic(fmtx.Errorf("callback function must accept value of type %q, found type %q", cv.Type(), arg0t))
			}

			reflectx.ValueOf(fn).Call(args)
		}
	})
}

// DieWith returns a new die after passing the current die to the callback function. The passed die is mutable.
func (d *CustomResourceDefinitionStatusDie) DieWith(fns ...func(d *CustomResourceDefinitionStatusDie)) *CustomResourceDefinitionStatusDie {
	nd := CustomResourceDefinitionStatusBlank.DieFeed(d.DieRelease()).DieImmutable(false)
	for _, fn := range fns {
		if fn != nil {
			fn(nd)
		}
	}
	return d.DieFeed(nd.DieRelease())
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *CustomResourceDefinitionStatusDie) DeepCopy() *CustomResourceDefinitionStatusDie {
	r := *d.r.DeepCopy()
	return &CustomResourceDefinitionStatusDie{
		mutable: d.mutable,
		r:       r,
	}
}

// conditions indicate state for particular aspects of a CustomResourceDefinition
func (d *CustomResourceDefinitionStatusDie) Conditions(v ...apiextensionsv1.CustomResourceDefinitionCondition) *CustomResourceDefinitionStatusDie {
	return d.DieStamp(func(r *apiextensionsv1.CustomResourceDefinitionStatus) {
		r.Conditions = v
	})
}

// acceptedNames are the names that are actually being used to serve discovery. They may be different than the names in spec.
func (d *CustomResourceDefinitionStatusDie) AcceptedNames(v apiextensionsv1.CustomResourceDefinitionNames) *CustomResourceDefinitionStatusDie {
	return d.DieStamp(func(r *apiextensionsv1.CustomResourceDefinitionStatus) {
		r.AcceptedNames = v
	})
}

// storedVersions lists all versions of CustomResources that were ever persisted. Tracking these versions allows a migration path for stored versions in etcd. The field is mutable so a migration controller can finish a migration to another version (ensuring no old objects are left in storage), and then remove the rest of the versions from this list. Versions may not be removed from `spec.versions` while they exist in this list.
func (d *CustomResourceDefinitionStatusDie) StoredVersions(v ...string) *CustomResourceDefinitionStatusDie {
	return d.DieStamp(func(r *apiextensionsv1.CustomResourceDefinitionStatus) {
		r.StoredVersions = v
	})
}

var CustomResourceDefinitionNamesBlank = (&CustomResourceDefinitionNamesDie{}).DieFeed(apiextensionsv1.CustomResourceDefinitionNames{})

type CustomResourceDefinitionNamesDie struct {
	mutable bool
	r       apiextensionsv1.CustomResourceDefinitionNames
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *CustomResourceDefinitionNamesDie) DieImmutable(immutable bool) *CustomResourceDefinitionNamesDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *CustomResourceDefinitionNamesDie) DieFeed(r apiextensionsv1.CustomResourceDefinitionNames) *CustomResourceDefinitionNamesDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &CustomResourceDefinitionNamesDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *CustomResourceDefinitionNamesDie) DieFeedPtr(r *apiextensionsv1.CustomResourceDefinitionNames) *CustomResourceDefinitionNamesDie {
	if r == nil {
		r = &apiextensionsv1.CustomResourceDefinitionNames{}
	}
	return d.DieFeed(*r)
}

// DieFeedJSON returns a new die with the provided JSON. Panics on error.
func (d *CustomResourceDefinitionNamesDie) DieFeedJSON(j []byte) *CustomResourceDefinitionNamesDie {
	r := apiextensionsv1.CustomResourceDefinitionNames{}
	if err := json.Unmarshal(j, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAML returns a new die with the provided YAML. Panics on error.
func (d *CustomResourceDefinitionNamesDie) DieFeedYAML(y []byte) *CustomResourceDefinitionNamesDie {
	r := apiextensionsv1.CustomResourceDefinitionNames{}
	if err := yaml.Unmarshal(y, &r); err != nil {
		panic(err)
	}
	return d.DieFeed(r)
}

// DieFeedYAMLFile returns a new die loading YAML from a file path. Panics on error.
func (d *CustomResourceDefinitionNamesDie) DieFeedYAMLFile(name string) *CustomResourceDefinitionNamesDie {
	y, err := osx.ReadFile(name)
	if err != nil {
		panic(err)
	}
	return d.DieFeedYAML(y)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *CustomResourceDefinitionNamesDie) DieFeedRawExtension(raw runtime.RawExtension) *CustomResourceDefinitionNamesDie {
	j, err := json.Marshal(raw)
	if err != nil {
		panic(err)
	}
	return d.DieFeedJSON(j)
}

// DieRelease returns the resource managed by the die.
func (d *CustomResourceDefinitionNamesDie) DieRelease() apiextensionsv1.CustomResourceDefinitionNames {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *CustomResourceDefinitionNamesDie) DieReleasePtr() *apiextensionsv1.CustomResourceDefinitionNames {
	r := d.DieRelease()
	return &r
}

// DieReleaseJSON returns the resource managed by the die as JSON. Panics on error.
func (d *CustomResourceDefinitionNamesDie) DieReleaseJSON() []byte {
	r := d.DieReleasePtr()
	j, err := json.Marshal(r)
	if err != nil {
		panic(err)
	}
	return j
}

// DieReleaseYAML returns the resource managed by the die as YAML. Panics on error.
func (d *CustomResourceDefinitionNamesDie) DieReleaseYAML() []byte {
	r := d.DieReleasePtr()
	y, err := yaml.Marshal(r)
	if err != nil {
		panic(err)
	}
	return y
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension. Panics on error.
func (d *CustomResourceDefinitionNamesDie) DieReleaseRawExtension() runtime.RawExtension {
	j := d.DieReleaseJSON()
	raw := runtime.RawExtension{}
	if err := json.Unmarshal(j, &raw); err != nil {
		panic(err)
	}
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *CustomResourceDefinitionNamesDie) DieStamp(fn func(r *apiextensionsv1.CustomResourceDefinitionNames)) *CustomResourceDefinitionNamesDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// Experimental: DieStampAt uses a JSON path (http://goessner.net/articles/JsonPath/) expression to stamp portions of the resource. The callback is invoked with each JSON path match. Panics if the callback function does not accept a single argument of the same type or a pointer to that type as found on the resource at the target location.
//
// Future iterations will improve type coercion from the resource to the callback argument.
func (d *CustomResourceDefinitionNamesDie) DieStampAt(jp string, fn interface{}) *CustomResourceDefinitionNamesDie {
	return d.DieStamp(func(r *apiextensionsv1.CustomResourceDefinitionNames) {
		if ni := reflectx.ValueOf(fn).Type().NumIn(); ni != 1 {
			panic(fmtx.Errorf("callback function must have 1 input parameters, found %d", ni))
		}
		if no := reflectx.ValueOf(fn).Type().NumOut(); no != 0 {
			panic(fmtx.Errorf("callback function must have 0 output parameters, found %d", no))
		}

		cp := jsonpath.New("")
		if err := cp.Parse(fmtx.Sprintf("{%s}", jp)); err != nil {
			panic(err)
		}
		cr, err := cp.FindResults(r)
		if err != nil {
			// errors are expected if a path is not found
			return
		}
		for _, cv := range cr[0] {
			arg0t := reflectx.ValueOf(fn).Type().In(0)

			var args []reflectx.Value
			if cv.Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv}
			} else if cv.CanAddr() && cv.Addr().Type().AssignableTo(arg0t) {
				args = []reflectx.Value{cv.Addr()}
			} else {
				panic(fmtx.Errorf("callback function must accept value of type %q, found type %q", cv.Type(), arg0t))
			}

			reflectx.ValueOf(fn).Call(args)
		}
	})
}

// DieWith returns a new die after passing the current die to the callback function. The passed die is mutable.
func (d *CustomResourceDefinitionNamesDie) DieWith(fns ...func(d *CustomResourceDefinitionNamesDie)) *CustomResourceDefinitionNamesDie {
	nd := CustomResourceDefinitionNamesBlank.DieFeed(d.DieRelease()).DieImmutable(false)
	for _, fn := range fns {
		if fn != nil {
			fn(nd)
		}
	}
	return d.DieFeed(nd.DieRelease())
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *CustomResourceDefinitionNamesDie) DeepCopy() *CustomResourceDefinitionNamesDie {
	r := *d.r.DeepCopy()
	return &CustomResourceDefinitionNamesDie{
		mutable: d.mutable,
		r:       r,
	}
}

// plural is the plural name of the resource to serve. The custom resources are served under `/apis/<group>/<version>/.../<plural>`. Must match the name of the CustomResourceDefinition (in the form `<names.plural>.<group>`). Must be all lowercase.
func (d *CustomResourceDefinitionNamesDie) Plural(v string) *CustomResourceDefinitionNamesDie {
	return d.DieStamp(func(r *apiextensionsv1.CustomResourceDefinitionNames) {
		r.Plural = v
	})
}

// singular is the singular name of the resource. It must be all lowercase. Defaults to lowercased `kind`.
func (d *CustomResourceDefinitionNamesDie) Singular(v string) *CustomResourceDefinitionNamesDie {
	return d.DieStamp(func(r *apiextensionsv1.CustomResourceDefinitionNames) {
		r.Singular = v
	})
}

// shortNames are short names for the resource, exposed in API discovery documents, and used by clients to support invocations like `kubectl get <shortname>`. It must be all lowercase.
func (d *CustomResourceDefinitionNamesDie) ShortNames(v ...string) *CustomResourceDefinitionNamesDie {
	return d.DieStamp(func(r *apiextensionsv1.CustomResourceDefinitionNames) {
		r.ShortNames = v
	})
}

// kind is the serialized kind of the resource. It is normally CamelCase and singular. Custom resource instances will use this value as the `kind` attribute in API calls.
func (d *CustomResourceDefinitionNamesDie) Kind(v string) *CustomResourceDefinitionNamesDie {
	return d.DieStamp(func(r *apiextensionsv1.CustomResourceDefinitionNames) {
		r.Kind = v
	})
}

// listKind is the serialized kind of the list for this resource. Defaults to "`kind`List".
func (d *CustomResourceDefinitionNamesDie) ListKind(v string) *CustomResourceDefinitionNamesDie {
	return d.DieStamp(func(r *apiextensionsv1.CustomResourceDefinitionNames) {
		r.ListKind = v
	})
}

// categories is a list of grouped resources this custom resource belongs to (e.g. 'all'). This is published in API discovery documents, and used by clients to support invocations like `kubectl get all`.
func (d *CustomResourceDefinitionNamesDie) Categories(v ...string) *CustomResourceDefinitionNamesDie {
	return d.DieStamp(func(r *apiextensionsv1.CustomResourceDefinitionNames) {
		r.Categories = v
	})
}
